[
  {
    "tagName": "lightning-accordion",
    "shortDescription": "This component is a user interface element that displays vertically stacked sections of content that can be expanded or collapsed, allowing users to control the visibility of content and reduce the need for scrolling.",
    "relatedComponents": {
      "lightning-accordion-section": "required"
    },
    "publicApi": [
      {
        "name": "active-section-name",
        "typeSignature": "string | string[]",
        "examples": [
          "<lightning-accordion active-section-name='B'>",
          "<lightning-accordion active-section-name={activeSections}>"
        ]
      },
      {
        "name": "allow-multiple-sections-open",
        "typeSignature": "boolean",
        "examples": ["<lightning-accordion allow-multiple-sections-open>"]
      },
      {
        "name": "onsectiontoggle",
        "typeSignature": "(ev: CustomEvent & { detail: { openSections: string[] } }) => void",
        "examples": ["<lightning-accordion onsectiontoggle={handleSectionToggle}>"]
      }
    ],
    "useCases": [
      "Imagine you're browsing an online store and you're looking at a product page. The product has a lot of information, like specifications, reviews, and shipping details. Instead of having all this information displayed at once, making the page very long and hard to navigate, the website uses a <lightning-accordion> component. This means that each category of information (specifications, reviews, shipping) has its own section that you can click to expand and read, making the page much easier to navigate.",
      "On a company's internal website, there's a page for employees to access various resources and documents. However, not all resources are relevant to all employees, so to make the page more user-friendly, the company uses a <lightning-accordion> component. Each department has its own section, and within each section, there are subsections for different types of resources. This way, employees can easily find and access the resources they need without having to scroll through irrelevant information.",
      "Consider a FAQ page on a website. Instead of listing all questions and answers at once, which can be overwhelming and hard to navigate, the website uses a <lightning-accordion> component. Each question has its own section that you can click to expand and see the answer. This makes it easy for you to find the information you're looking for without having to read through all the questions and answers.",
      "On a news website, there's a section for top stories. Each story has a headline and a brief summary, and if you want to read the full story, you can click on the headline to expand the section. This is done using a <lightning-accordion> component, which allows the website to display a lot of content in a compact and user-friendly way.",
      "Imagine you're filling out a long form on a website, like a job application. The form is divided into several sections, like personal information, education, work experience, and references. To make the form easier to navigate, the website uses a <lightning-accordion> component. This way, you can focus on one section at a time, and you don't have to scroll through a long page of fields.",
      "On a travel website, there's a page for each destination with information about attractions, hotels, restaurants, and travel tips. To make the page easier to navigate, the website uses a <lightning-accordion> component. Each category of information has its own section that you can click to expand and read. This way, you can quickly find the information you're interested in without having to scroll through the entire page."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Accordion\n      description: Accordion with a pre-selected open section, and a button that programmatically opens another section. By default, only one section can be open at a time. You can close a section by opening another section.\n    - name: conditional\n      label: Accordion with Conditional Section\n      description: Accordion sections can be toggled to be visible or not.\n    - name: multiple\n      label: Accordion with Multiple Open Sections\n      description: Accordion sections can be open or closed without restrictions, programmatically or by clicking the section headers.\n---\n\nA `lightning-accordion` displays vertically stacked sections of content that you can expand and collapse. Click a section's header to expand its content. Users can control how much content is visible at once, and don't need to scroll as much to see the content of a page.\n\nTo create an accordion section, nest a `lightning-accordion-section` component within `lightning-accordion`. Each `lightning-accordion-section` can contain HTML markup or Lightning components.\n\nBy default, only one section can be open at a time. You can close a section by opening another section. You can configure the accordion to allow multiple sections to be open, and then the sections can be opened and closed by clicking section headers.\n\nYou can specify one or multiple active sections. Active sections are expanded when the component loads. The terms \"active\", \"expanded\", and \"open\" are used interchangeably in this documentation.\n\nLazy loading is not currently supported. The content you load in inactive sections also impact your page load time.\n\n#### Initializing the Accordion with An Active Section\n\nThe first accordion section is expanded by default. To change the default, provide a section name using the `active-section-name` attribute. The section name is case-sensitive.\n\nThis example creates a basic accordion with three sections, where section B is expanded by default. Only one accordion section is expanded at a time.\n\n```html\n<template>\n    <lightning-accordion active-section-name=\"B\">\n        <lightning-accordion-section name=\"A\" label=\"Accordion Title A\"\n            >This is the content area for section A</lightning-accordion-section\n        >\n        <lightning-accordion-section name=\"B\" label=\"Accordion Title B\"\n            >This is the content area for section B</lightning-accordion-section\n        >\n        <lightning-accordion-section name=\"C\" label=\"Accordion Title C\"\n            >This is the content area for section C</lightning-accordion-section\n        >\n    </lightning-accordion>\n</template>\n```\n\nIf two or more sections use the same name and that name is also specified as the `active-section-name`, the first section with that name is expanded by default.\n\n#### Initializing the Accordion with Multiple Active Sections\n\nTo specify multiple expanded sections, include `allow-multiple-sections-open` in your markup and pass in an array of accordion section names to `active-section-name`.\nIf you don't pass in a section name, all sections are closed by default.\n\n```html\n<template>\n    <lightning-accordion\n        allow-multiple-sections-open\n        active-section-name={activeSections}\n    >\n        <lightning-accordion-section name=\"A\" label=\"Accordion Title A\">\n            <p>This is the content area for section A.</p>\n        </lightning-accordion-section>\n\n        <lightning-accordion-section name=\"B\" label=\"Accordion Title B\">\n            <p>This is the content area for section B.</p>\n        </lightning-accordion-section>\n\n        <lightning-accordion-section name=\"C\" label=\"Accordion Title C\">\n            <p>This is the content area for section C.</p>\n        </lightning-accordion-section>\n    </lightning-accordion>\n</template>\n```\n\nIn your JavaScript code, define the sections you want to expand.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class LightningExampleAccordionMultiple extends LightningElement {\n    activeSections = ['A', 'C'];\n}\n```\n\n#### Handling the Section Toggle Event\n\nWhen the open sections change, use the `onsectiontoggle` handler to find out which sections are active.\n\nThis example displays the name of the active section.\n\n```html\n<template>\n    <p>{activeSectionsMessage}</p>\n\n    <lightning-accordion\n        allow-multiple-sections-open\n        onsectiontoggle={handleSectionToggle}\n        active-section-name=\"A\"\n    >\n        <lightning-accordion-section name=\"A\" label=\"Accordion Title A\">\n            <p>This is the content area for section A.</p>\n        </lightning-accordion-section>\n\n        <lightning-accordion-section name=\"B\" label=\"Accordion Title B\">\n            <p>This is the content area for section B.</p>\n        </lightning-accordion-section>\n\n        <lightning-accordion-section name=\"C\" label=\"Accordion Title C\">\n            <p>This is the content area for section C.</p>\n        </lightning-accordion-section>\n    </lightning-accordion>\n</template>\n```\n\nUse the `detail.openSections` property to return the active section names.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class DemoAccordionMultiple extends LightningElement {\n    activeSectionsMessage = '';\n\n    handleSectionToggle(event) {\n        const openSections = event.detail.openSections;\n\n        if (openSections.length === 0) {\n            this.activeSectionsMessage = 'All sections are closed';\n        } else {\n            this.activeSectionsMessage =\n                'Open sections: ' + openSections.join(', ');\n        }\n    }\n}\n```\n\n#### Expanding Sections Programmatically\n\nTo expand a section using JavaScript, pass in the section name using `active-section-name`.\n\nThis example expands section B when the **Expand Section B** button is pressed.\n\n```html\n<template>\n    <lightning-button label=\"Expand Section B\" onclick={handleClick}>\n    </lightning-button>\n    <lightning-accordion\n        active-section-name={section}\n        onsectiontoggle={handleSectionToggle}\n    >\n        <lightning-accordion-section name=\"A\" label=\"A\"\n            >Content A</lightning-accordion-section\n        >\n        <lightning-accordion-section name=\"B\" label=\"B\"\n            >Content B</lightning-accordion-section\n        >\n        <lightning-accordion-section name=\"C\" label=\"C\"\n            >Content C</lightning-accordion-section\n        >\n    </lightning-accordion>\n</template>\n```\n\nThe `onclick` handler on the button sets the active section name, which opens the section programmatically.\n\nSet the value for the open section using the `openSections` property in the `onsectiontoggle` handler.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class App extends LightningElement {\n    section = '';\n\n    handleClick(event) {\n        this.section = 'B';\n    }\n\n    handleSectionToggle(event) {\n        this.section = event.detail.openSections;\n    }\n}\n```\n\nTo expand multiple sections programmatically, include `allow-multiple-sections-open` in your markup and pass in an array of section names instead.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class App extends LightningElement {\n    section = [];\n\n    handleClick(event) {\n        this.section = ['B', 'C'];\n    }\n\n    handleSectionToggle(event) {\n        this.section = event.detail.openSections;\n    }\n}\n```\n\n#### Nested Accordions\n\nYou can nest `lightning-accordion` components inside `lightning-accordion-section` components to create multiple levels in the accordion. The chevron icon is used for all sections and levels.\n\n#### Component Styling\n\n`lightning-accordion` implements the [accordion](https://www.lightningdesignsystem.com/components/accordion) blueprint in the Salesforce Lightning Design System (SLDS).\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds a border and gray background to the accordion content area using SLDS classes.\n\n```html\n<lightning-accordion active-section-name=\"A\">\n    <lightning-accordion-section name=\"A\" label=\"Accordion Title A\">\n        <div class=\"slds-box slds-theme_shade\">\n            <p>This is the content area for section A.</p>\n        </div>\n    </lightning-accordion-section>\n    <!-- More accordion sections here -->\n</lightning-accordion>\n```\n\nTo apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n```html\n<lightning-accordion class=\"example-accordion\" active-section-name=\"A\">\n    <lightning-accordion-section name=\"A\" label=\"Accordion Title A\">\n        <p>This is the content area for section A.</p>\n    </lightning-accordion-section>\n    <!-- More accordion sections here -->\n</lightning-accordion>\n```\n\nUse SLDS styling hooks to customize the component's styles. For example, specify the border color using the `--slds-c-accordion-color-border` custom property.\n\n```css\n.example-accordion {\n    --slds-c-accordion-color-border: orange;\n}\n```\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/accordion/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\nTo understand how we implemented SLDS in `lightning-accordion`, see the **Source Code** section.\n\n#### Usage Considerations\n\nYou can't initialize an accordion with multiple sections using only markup. Pass the array of section names using JavaScript, as described in **Initializing the Accordion with Multiple Active Sections**.\n\nAccordion sections are not lazy loaded. Content in sections that are collapsed initially are available on load in the DOM.\n\nThis component has usage differences from its Aura counterpart. See [Base Components: Aura Vs Lightning Web Components](https://developer.salesforce.com/docs/platform/lwc/guide/migrate-map-aura-lwc-components) in the Lightning Web Components Developer Guide.\n\n#### Custom Events\n\n**`sectiontoggle`**\n\nThe event fired when an accordion loads with at least one active section or when a section is toggled.\n\nThe `sectiontoggle` event returns the following parameter.\n\n| Parameter    | Type   | Description                                                                               |\n| ------------ | ------ | ----------------------------------------------------------------------------------------- |\n| openSections | object | The name of the active section. Returns an array of strings for the active section names. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                               |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                            |\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleAccordionBasic extends LightningElement {\n    activeSectionMessage = '';\n\n    handleToggleSection(event) {\n        this.activeSectionMessage =\n            'Open section name:  ' + event.detail.openSections;\n    }\n\n    handleSetActiveSectionC() {\n        const accordion = this.template.querySelector('.example-accordion');\n\n        accordion.activeSectionName = 'C';\n    }\n}\n",
        "html": "<template>\n    <p class=\"slds-text-heading_small\">{activeSectionMessage}</p>\n\n    <lightning-button onclick={handleSetActiveSectionC} label=\"Open Section C\"></lightning-button>\n\n    <lightning-accordion class=\"example-accordion\"\n                         onsectiontoggle={handleToggleSection}\n                         active-section-name=\"B\">\n        <lightning-accordion-section name=\"A\" label=\"Accordion Title A\">\n            <lightning-button-menu slot=\"actions\"\n                                  alternative-text=\"Show menu\"\n                                  icon-size=\"x-small\"\n                                  menu-alignment=\"right\">\n                <lightning-menu-item value=\"New\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"Edit\" label=\"Menu Item Two\"></lightning-menu-item>\n            </lightning-button-menu>\n            <p>This is the content area for section A.</p>\n            <p>.</p>\n            <p>.</p>\n            <p>.</p>\n            <p>The section height expands to fit your content.</p>\n        </lightning-accordion-section>\n\n        <lightning-accordion-section name=\"B\" label=\"Accordion Title B\">\n            <p>This is the content area for section B.</p>\n            <p>.</p>\n            <p>.</p>\n            <p>.</p>\n            <p>The section height expands to fit your content.</p>\n        </lightning-accordion-section>\n\n        <lightning-accordion-section name=\"C\" label=\"Accordion Title C\">\n            <p>This is the content area for section C.</p>\n            <p>.</p>\n            <p>.</p>\n            <p>.</p>\n            <p>The section height expands to fit your content.</p>\n        </lightning-accordion-section>\n    </lightning-accordion>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleAccordionConditional extends LightningElement {\n    activeSectionMessage = '';\n    isDVisible = false;\n\n    handleToggleSection(event) {\n        this.activeSectionMessage =\n            'Open section name:  ' + event.detail.openSections;\n    }\n\n    handleToggleSectionD() {\n        this.isDVisible = !this.isDVisible;\n    }\n\n    get isMessageVisible() {\n        return this.activeSectionMessage.length > 0;\n    }\n}\n",
        "html": "<template>\n    <p class=\"slds-text-heading_small\">{activeSectionMessage}</p>\n\n    <lightning-button onclick={handleToggleSectionD} label=\"Toggle Section D\"></lightning-button>\n\n    <lightning-accordion class=\"example-accordion\"\n                         onsectiontoggle={handleToggleSection}\n                         active-section-name=\"B\">\n        <lightning-accordion-section name=\"A\" label=\"Accordion Title A\">\n            <p>This is the content area for section A.</p>\n            <p>Donec vitae tellus egestas, faucibus ipsum ac, imperdiet erat. Nam venenatis non ante at sagittis. Integer vel purus eget nunc semper placerat. Nam tristique quam leo, et posuere enim condimentum quis. Ut sagittis libero id lectus tempor maximus. Nunc ut tincidunt eros, a hendrerit leo. Suspendisse quis fermentum dolor. Nulla euismod consectetur leo, id condimentum nunc consequat quis.</p>\n        </lightning-accordion-section>\n\n        <lightning-accordion-section name=\"B\" label=\"Accordion Title B\">\n            <p>This is the content area for section B.</p>\n            <p>Nam at elit et justo scelerisque ullamcorper vel a felis. Mauris sit amet lorem sed est sagittis blandit nec ac turpis. Ut a mi id turpis pharetra ornare. Nullam rhoncus feugiat nunc, ac pulvinar felis pulvinar at. Nullam efficitur aliquet justo et ultricies. Maecenas eu felis aliquam, tincidunt elit at, suscipit leo. Duis ut urna nec nibh hendrerit lacinia. Sed non auctor libero. Sed pellentesque tempor mollis.</p>\n        </lightning-accordion-section>\n\n        <lightning-accordion-section name=\"C\" label=\"Accordion Title C\">\n            <p>This is the content area for section C.</p>\n            <p>Nulla ornare ipsum felis, vel aliquet dui blandit vel. Integer accumsan velit quis mauris pharetra, nec sollicitudin dui eleifend. Cras condimentum odio mi, nec ullamcorper arcu ullamcorper sed. Proin massa arcu, rutrum a ullamcorper nec, hendrerit in sem. Etiam tempus eros ut lorem tincidunt, id condimentum nulla molestie. Morbi hendrerit elit pretium, ultrices neque non, ullamcorper justo. Quisque vel nisi eget eros efficitur semper. Nulla pulvinar venenatis quam vitae efficitur. Nam facilisis sollicitudin quam ac imperdiet.</p>\n        </lightning-accordion-section>\n\n        <template if:true={isDVisible}>\n            <lightning-accordion-section name=\"D\" label=\"Accordion Title D\">\n                <p>This is the content area for section D.</p>\n                <p>Suspendisse est eros, maximus et risus a, luctus bibendum eros. Etiam ultrices tellus vehicula neque ornare, viverra venenatis purus accumsan. Aenean viverra finibus odio, vitae bibendum nisi tincidunt sed. Ut at porta dui. Praesent varius eleifend quam eget gravida. Curabitur maximus, leo sit amet dapibus gravida, mi ligula lacinia turpis, id feugiat tellus urna quis odio. Nullam tristique orci eu magna hendrerit vestibulum. Sed id purus at metus tristique tristique et vitae arcu. Sed molestie odio felis, sit amet lacinia mauris rutrum nec. Morbi semper lacinia tellus bibendum faucibus. Vestibulum eget ornare sapien, eget ultrices orci.</p>\n            </lightning-accordion-section>\n        </template>\n    </lightning-accordion>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleAccordionMultiple extends LightningElement {\n    activeSections = ['A', 'C'];\n    activeSectionsMessage = '';\n\n    handleSectionToggle(event) {\n        const openSections = event.detail.openSections;\n\n        if (openSections.length === 0) {\n            this.activeSectionsMessage = 'All sections are closed';\n        } else {\n            this.activeSectionsMessage =\n                'Open sections: ' + openSections.join(', ');\n        }\n    }\n}\n",
        "html": "<template>\n    <p>{activeSectionsMessage}</p>\n\n    <lightning-accordion allow-multiple-sections-open\n                         onsectiontoggle={handleSectionToggle}\n                         active-section-name={activeSections}>\n        <lightning-accordion-section name=\"A\" label=\"Accordion Title A\">\n            <p>This is the content area for section A.</p>\n            <p>Donec vitae tellus egestas, faucibus ipsum ac, imperdiet erat. Nam venenatis non ante at sagittis. Integer vel purus eget nunc semper placerat. Nam tristique quam leo, et posuere enim condimentum quis. Ut sagittis libero id lectus tempor maximus. Nunc ut tincidunt eros, a hendrerit leo. Suspendisse quis fermentum dolor. Nulla euismod consectetur leo, id condimentum nunc consequat quis.</p>\n        </lightning-accordion-section>\n\n        <lightning-accordion-section name=\"B\" label=\"Accordion Title B\">\n            <p>This is the content area for section B.</p>\n            <p>Nam at elit et justo scelerisque ullamcorper vel a felis. Mauris sit amet lorem sed est sagittis blandit nec ac turpis. Ut a mi id turpis pharetra ornare. Nullam rhoncus feugiat nunc, ac pulvinar felis pulvinar at. Nullam efficitur aliquet justo et ultricies. Maecenas eu felis aliquam, tincidunt elit at, suscipit leo. Duis ut urna nec nibh hendrerit lacinia. Sed non auctor libero. Sed pellentesque tempor mollis.</p>\n        </lightning-accordion-section>\n\n        <lightning-accordion-section name=\"C\" label=\"Accordion Title C\">\n            <p>This is the content area for section C.</p>\n            <p>Nulla ornare ipsum felis, vel aliquet dui blandit vel. Integer accumsan velit quis mauris pharetra, nec sollicitudin dui eleifend. Cras condimentum odio mi, nec ullamcorper arcu ullamcorper sed. Proin massa arcu, rutrum a ullamcorper nec, hendrerit in sem. Etiam tempus eros ut lorem tincidunt, id condimentum nulla molestie. Morbi hendrerit elit pretium, ultrices neque non, ullamcorper justo. Quisque vel nisi eget eros efficitur semper. Nulla pulvinar venenatis quam vitae efficitur. Nam facilisis sollicitudin quam ac imperdiet.</p>\n        </lightning-accordion-section>\n    </lightning-accordion>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-accordion-section",
    "shortDescription": "This component is used to define the content of an individual section within an accordion-style interface, providing an interactive user experience where sections can be expanded or collapsed by clicking on the header text or toggle button.",
    "relatedComponents": {
      "lightning-accordion": "required",
      "lightning-button-menu": "optional",
      "lightning-menu-item": "optional"
    },
    "publicApi": [
      {
        "name": "name",
        "typeSignature": "string",
        "examples": ["<lightning-accordion-section name='A'>", "<lightning-accordion-section name={sectionName}>"]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": [
          "<lightning-accordion-section label='Accordion Title A'>",
          "<lightning-accordion-section label={sectionLabel}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're browsing an online store and you're looking at a product page. The product has a lot of information, like specifications, reviews, and shipping details. Instead of having all this information displayed at once, making the page long and cluttered, the website uses the <lightning-accordion-section> component to neatly organize the information into separate sections. You can click on each section to expand it and see the information you're interested in.",
      "On a company's internal website, there's a page for employees to access various resources and documents. To make it easier for employees to find what they need, the page uses the <lightning-accordion-section> component to categorize the resources into different sections like 'HR Documents', 'IT Support', and 'Training Materials'. Employees can click on a section to expand it and see the resources available.",
      "Consider a mobile app for a music festival. The app has a page listing all the performing artists. Instead of listing all the artists and their details on one long page, the app uses the <lightning-accordion-section> component. Each artist has their own section, and when a user clicks on an artist's name, the section expands to show more information about the artist and their performance schedule.",
      "On a university's website, there's a page for prospective students to learn about the different programs offered. The page uses the <lightning-accordion-section> component to organize the programs into sections by faculty. Prospective students can click on a faculty to expand the section and see the programs offered, along with details about each program.",
      "Imagine a news website that has a page for each major news category, like 'World', 'Business', and 'Sports'. Each category page uses the <lightning-accordion-section> component to organize the news articles into sections by region or topic. Readers can click on a section to expand it and see the articles available."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Accordion Section\n      description: Content for an accordion is an accordion-section.\n---\n\nA `lightning-accordion-section` defines the content of an accordion section inside a `lightning-accordion` component.\nEach section can contain HTML markup or Lightning components.\n\nThis example creates a basic accordion with three sections, where section B is\nexpanded by specifying it with the `active-section-name` attribute in `lightning-accordion`.\n\n```html\n<template>\n    <lightning-accordion active-section-name=\"B\">\n        <lightning-accordion-section name=\"A\" label=\"Accordion Title A\"\n            >This is the content area for section A</lightning-accordion-section\n        >\n        <lightning-accordion-section name=\"B\" label=\"Accordion Title B\"\n            >This is the content area for section B</lightning-accordion-section\n        >\n        <lightning-accordion-section name=\"C\" label=\"Accordion Title C\"\n            >This is the content area for section C</lightning-accordion-section\n        >\n    </lightning-accordion>\n</template>\n```\n\nUse the `label` attribute to provide optional header text for an accordion section. When the header text is too long to display in the viewport, the text is truncated and displayed with an ellipsis on desktop screens. Hover with the mouse to see the full text.\n\nOn mobile devices, long header text wraps to multiple lines because hover text isn't available.\n\nTo expand or collapse a section, click the toggle button or header text.\n\n#### Adding an Action to a Section\n\nThis example creates the same basic accordion with an added `lightning-button-menu` on\nthe first section. The button menu is assigned to the `actions` slot which makes it display on the section header.\n\n```html\n<template>\n    <lightning-accordion active-section-name=\"B\">\n        <lightning-accordion-section name=\"A\" label=\"Accordion Title A\">\n            <lightning-button-menu\n                slot=\"actions\"\n                alternative-text=\"Show menu\"\n                menu-alignment=\"right\"\n            >\n                <lightning-menu-item\n                    value=\"New\"\n                    label=\"Menu Item One\"\n                ></lightning-menu-item>\n                <lightning-menu-item\n                    value=\"Edit\"\n                    label=\"Menu Item Two\"\n                ></lightning-menu-item>\n            </lightning-button-menu>\n            <p>This is the content area for section A.</p>\n        </lightning-accordion-section>\n        <lightning-accordion-section name=\"B\" label=\"Accordion Title B\"\n            >This is the content area for section B</lightning-accordion-section\n        >\n        <lightning-accordion-section name=\"C\" label=\"Accordion Title C\"\n            >This is the content area for section C</lightning-accordion-section\n        >\n    </lightning-accordion>\n</template>\n```\n\n#### Component Styling\n\nThis component implements the\n[accordion](https://www.lightningdesignsystem.com/components/accordion) blueprint in the Salesforce Lightning Design System (SLDS).\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nFor more information, see [lightning-accordion](bundle/lightning-accordion/documentation).\n#### Usage Considerations\n\nIf two or more sections use the same name and that name is also specified as\nthe `active-section-name`, the first section using that name is expanded by default.\n\nThis component has usage differences from its Aura counterpart. See [Base Components: Aura Vs Lightning Web Components](https://developer.salesforce.com/docs/platform/lwc/guide/migrate-map-aura-lwc-components) in the Lightning Web Components Developer Guide.\n\n#### Accessibility\n\nThe accordion section renders the toggle button and title in a `<button>` element. When a section is expanded, the button\nrenders with `aria-expanded=\"true\"`. When a section is collapsed, the button renders with `aria-expanded=\"false\"`.\n\nAdditionally, the button uses the `aria-controls` attribute to identify the content that relates to the controlling button on the accordion section.\n\nTo expand or collapse a section using the keyboard, press the Tab key to set focus on the toggle button or header text and press Enter.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleAccordionSectionBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-around_medium\">\n        <h1 class=\"slds-text-heading_small\">Basic accordion-section</h1>\n        <p class=\"slds-text-body_regular\">A lightning-accordion-section component is a single section that’s nested in a lightning-accordion component. You can't use this component on its own. This example creates a basic accordion with one section.</p>\n    </div>\n    <lightning-accordion active-section-name=\"A\">\n        <lightning-accordion-section name=\"A\" label=\"Accordion Title A\">\n                <lightning-button-menu slot=\"actions\" alternative-text=\"Show menu\" icon-size=\"x-small\" menu-alignment=\"auto\">\n                    <lightning-menu-item value=\"New\" label=\"Menu Item One\"></lightning-menu-item>\n                    <lightning-menu-item value=\"Edit\" label=\"Menu Item Two\"></lightning-menu-item>\n                </lightning-button-menu>\n                <p>This is the content area for section A.</p>\n                <p>.</p>\n                <p>.</p>\n                <p>.</p>\n                <p>The section height expands to fit your content.</p>\n        </lightning-accordion-section>\n    </lightning-accordion>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-alert",
    "shortDescription": "This component allows the creation of an alert modal within a system, providing a consistent user experience by communicating system-wide states and not halting execution on the page.",
    "relatedComponents": {
      "lightning-button": "optional"
    },
    "publicApi": [
      {
        "name": "message",
        "typeSignature": "string",
        "examples": [
          "<lightning-alert message='this is the alert message'>",
          "<lightning-alert message={myAlertMessage}>"
        ]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-alert label='Error!'>", "<lightning-alert label={myAlertLabel}>"]
      },
      {
        "name": "variant",
        "typeSignature": "'header' | 'headerless'",
        "examples": [
          "<lightning-alert variant='header'>",
          "<lightning-alert variant='headerless'>",
          "<lightning-alert variant={myAlertVariant}>"
        ]
      },
      {
        "name": "theme",
        "typeSignature": "'default' | 'shade' | 'inverse' | 'alt-inverse' | 'success' | 'info' | 'warning' | 'error' | 'offline'",
        "examples": [
          "<lightning-alert theme='error'>",
          "<lightning-alert theme='success'>",
          "<lightning-alert theme={myAlertTheme}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're using an online banking system and you've just completed a transfer. The <lightning-alert> component could be used to display a message confirming that the transfer was successful, providing reassurance that the action has been completed correctly.",
      "Consider a scenario where you're using a web-based email client. If you attempt to send an email without a subject line, the <lightning-alert> component could be used to display a warning message, reminding you to add a subject before sending.",
      "Suppose you're using an online shopping platform and you've just added an item to your cart. The <lightning-alert> component could be used to display a message confirming that the item has been added to your cart, providing immediate feedback on your action.",
      "Imagine you're using a web-based project management tool. If you attempt to delete a project, the <lightning-alert> component could be used to display a confirmation message, ensuring that you really want to delete the project before it's removed.",
      "Consider a scenario where you're using an online form to apply for a job. If you miss out some required information, the <lightning-alert> component could be used to display an error message, indicating which fields need to be filled in before you can submit the form.",
      "Suppose you're using a web-based learning platform and you've just completed a quiz. The <lightning-alert> component could be used to display a message showing your score, providing immediate feedback on your performance."
    ],
    "docs": "The `lightning/alert` module lets you create an alert modal within your component. Use `LightningAlert` on your components to communicate a state that affects the entire system, not just a feature or page.\n\nUse `LightningAlert.open()` instead of the native `window.alert()` for a more consistent user experience. They have similar functions, but `LightningAlert.open()` works in cross-origin iframes, where the `.alert()` method is no longer supported in Chrome and Safari. Unlike `window.alert()`, `LightningAlert.open()` doesn't halt execution on the page, it returns a Promise. Use `async`/`await` or `.then()` for any code you want to execute after the alert has closed.\n\nImport `LightningAlert` from the `lightning/alert` module in the component that will launch the alert modal, and call `LightningAlert.open()` with your desired attributes.\n\nThis example creates an alert modal with an error message and **OK** button. The `.open()` function returns a promise that resolves when you click **OK**.\n\n```html\n<!-- c/myApp.html -->\n<template>\n    <lightning-button onclick={handleAlertClick} label=\"Open Alert Modal\">\n    </lightning-button>\n</template>\n```\n\n```javascript\nimport { LightningElement } from 'lwc';\nimport LightningAlert from 'lightning/alert';\n\nexport default class MyApp extends LightningElement {\n    async handleAlertClick() {\n        await LightningAlert.open({\n            message: 'this is the alert message',\n            theme: 'error', // a red theme intended for error states\n            label: 'Error!', // this is the header text\n        });\n        //Alert has been closed\n    }\n}\n```\n\n#### Component Styling\n\nThis component uses the Salesforce Lightning Design System (SLDS) [`prompt` blueprint](https://www.lightningdesignsystem.com/components/prompt/#site-main-content).\n\n`LightningAlert` supports the following attributes:\n\n-   `message`: Message text that displays in the alert.\n-   `label`: Header text, also used as the `aria-label`. Default string is `Alert`.\n-   `variant`: Two values, `header` and `headerless`. Default value is `header`.\n-   `theme`: Color theme for the header. The `theme` attribute supports the following [options](https://www.lightningdesignsystem.com/utilities/themes/#site-main-content) from SLDS:\n    -   `default`: white\n    -   `shade`: gray\n    -   `inverse`: dark blue\n    -   `alt-inverse`: darker blue\n    -   `success`: green\n    -   `info`: gray-ish blue\n    -   `warning`: yellow\n    -   `error`: red\n    -   `offline`: ​black\n\nIf an invalid value is provided, `LightningAlert` uses the `default` theme. `LightningAlert` ignores the `style` attribute.\n\n#### Testing Your Component's Alert\n\nCode using `LightningAlert` can be tested by mocking the `LightningAlert.open()` method.\n\nThe example below uses a button to open an alert dialog with text that changes when the alert opens.\n\n```html\n<button data-button onclick={handleClick}>Open Alert</button>\n<template if:true={alertViewed}>\n    <div data-text>Content Viewed</div>\n</template>\n<template if:false={alertViewed}>\n    <div data-text>Click to View Content</div>\n</template>\n```\n\n```javascript\nimport LightningAlert from 'lightning/alert';\njest.mock('lightning/alert');\n​\ntest(() => {\n    // Create and appendChild(element)\n​\n    const buttonEle = element.shadowRoot.querySelector('[data-button]');\n    const textEle = element.shadowRoot.querySelector('[data-text]');\n​\n    // Mock .open()\n    // No value passed since LightningAlert doesn't have a return value\n    LightningAlert.open = jest.fn().mockResolvedValue();\n    // Initial value\n    expect(textEle.textContent).toBe('Click to View Content');\n    // Click modal open button\n    buttonEle.click();\n​\n    // Click handler render cycle\n    await Promise.resolve();\n    // Render cycle triggered by tracked value {result}\n    await Promise.resolve();\n​\n    // Verify alertViewed has updated in template\n    expect(textEle.textContent).toBe('Content Viewed');\n    // Open triggered once\n    expect(LightningAlert.open.mock.calls).toHaveLength(1);\n})\n```\n",
    "examples": []
  },
  {
    "tagName": "lightning-aria-observer",
    "shortDescription": "This component provides a way to create accessible web components that work in both synthetic and native shadow, allowing for the connection of internal elements with external references, thus enhancing the user's experience with improved accessibility.",
    "relatedComponents": {
      "lightning-primitive-input-simple": "optional",
      "lightning-input": "optional",
      "lightning-base-combobox": "optional",
      "lightning-combobox": "optional"
    },
    "publicApi": [
      {
        "name": "aria-labelledby",
        "typeSignature": "string",
        "examples": [
          "<lightning-aria-observer aria-labelledby='my-label'>",
          "<lightning-aria-observer aria-labelledby={labelId}>"
        ]
      },
      {
        "name": "aria-describedby",
        "typeSignature": "string",
        "examples": [
          "<lightning-aria-observer aria-describedby='my-description'>",
          "<lightning-aria-observer aria-describedby={descriptionId}>"
        ]
      },
      {
        "name": "aria-activedescendant",
        "typeSignature": "string",
        "examples": [
          "<lightning-aria-observer aria-activedescendant='my-active-descendant'>",
          "<lightning-aria-observer aria-activedescendant={activeDescendantId}>"
        ]
      },
      {
        "name": "aria-controls",
        "typeSignature": "string",
        "examples": [
          "<lightning-aria-observer aria-controls='my-control'>",
          "<lightning-aria-observer aria-controls={controlId}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're using a website to fill out a form, and there's a field where you need to enter your email address. The field is labeled 'Email Address', but you're using a screen reader to navigate the website. The <lightning-aria-observer> component ensures that your screen reader can correctly identify the email field by its label, even if the website's code is complex or unusual.",
      "On a different website, you're trying to make a purchase. There's a button labeled 'Buy Now', but when you hover over it, a pop-up appears with more information about the product. The <lightning-aria-observer> component ensures that your screen reader can correctly identify the relationship between the 'Buy Now' button and the pop-up, so you can understand what's happening on the screen.",
      "Let's say you're using a music streaming website, and there's a list of songs in your current playlist. Each song in the list has a 'Play' button next to it. The <lightning-aria-observer> component ensures that your screen reader can correctly identify each 'Play' button with the corresponding song, so you know which song you're about to play."
    ],
    "docs": "The `lightning/ariaObserver` module provides an easy way for users to write accessible component that works in both synthetic and native shadow.\n\n## Aria ID referencing in native shadow\nUse the `AriaObserver` library to write accessible component that works where `ariaLabelledBy` would break native shadow.\n\nHere's an example that won't work with native shadow. In the following code, we support attribute `ariaLabelledBy` in our component `c-foo`, so the `input` element is labelled by external elements.\n\n``` html\n<template>\n    <input aria-labelledby={ariaLabelledBy}>\n</template>\n```\n\n```\nclass Foo extends LightningElement {\n    @api ariaLabelledBy;\n}\n```\n\nThis example uses the `aria-labelledby` attribute to use the internal input as an external label in `c-foo`.\n\n``` html\n<span id=\"my-label\">Input field</span>\n<c-foo aria-labelledby=\"my-label\"></c-foo>\n```\n\nThe above example works fine in synthetic shadow, but in native shadow mode, the `aria-labelledby` ID reference is broken. The `input` element is isolated in its own shadow DOM, so the label with id `my-label` isn't in the same shadow boundary.\n\n## Creating AriaObserver\n\nTo use `AriaObserver` in your component, first import it from `lightning/ariaObserver`. Then, instantiate the `AriaObserver` within your component.\n\nThe `AriaObserver` constructor takes one parameter:\n- `cmpReference` The reference of the current component (`this`).\n\n``` js\nimport AriaObserver from 'lightning/ariaObserver';\n\nclass Foo extends LightningElement {\n    constructor() {\n        super();\n        this.ariaObserver = new AriaObserver(this);\n    }\n}\n```\n\nNext, use the `connect(options)` method to connect between the internal element and the external reference. It takes an options object with the following keys:\n- `attribute` The name of the aria attribute. Two supported options: `aria-labelledby`, `aria-describedby`, `aria-activedescendant` and `aria-controls`.\n- `targetSelector` The selector to the internal element where the aria attribute should be attached.\n- `targetNode` The element where the aria attribute should be attached. If not provided, the `targetSelector` is used.\n- `relatedNodeIds` ID(s) of the external element(s) to which the `targetNode` will be related. Passed as a space separated string `id1 id2 id3` or an Array of strings `['id1', 'id2', 'id3']`. Combined with `relatedNodes` if both are present.\n- `relatedNodes` An Array of HTMLElement element(s) to which the `targetNode` will be related. Combined with `relatedNodeIds` if both are present.\n\nThis example uses `connect(options)` to display an aria label for the internal `input` element.\n``` js\n@api\nget ariaLabelledBy() {\n    return this._ariaLabelledBy;\n}\nset ariaLabelledBy(refs) {\n    this._ariaLabelledBy = refs;\n\n    this.ariaObserver.connect({\n        targetSelector: 'input',\n        attribute: 'aria-labelledby',\n        relatedNodeIds: refs\n    });\n}\n```\n\nThen use the `sync(isNativeShadow)` method to synchronize the ID references when the template is re-rendered.\n- `isNativeShadow` An optional parameter that indicates whether the relationships involve components rendered in native shadow.\nUsed when the `targetSelector` or `targetNode` is within a shadow boundary, but the parent component where AriaObserver has been\ninstantiated is not. Example: `lightning-primitive-input-simple` may be rendered in native shadow, but `lightning-input` may not be.\n\nIt is important to protect the call to `sync` by checking if the component `isConnected`. This is because there are some cases where a component may be rendered but not connected and calling `sync` when a component is not connected will fail. \n\n``` js\nrenderedCallback() {\n    if (this.isConnected) {\n        this.ariaObserver.sync();\n    }\n}\n```\n\nWhen the containing component is native shadow enabled, AriaObserver observes the component's root node to find and link\nthe related elements. This can be overridden in cases where the component's root node does not contain the related elements,\nbut one of its ancestor nodes does. For example, `lightning-base-combobox` is contained within `lightning-combobox` so the root of `lightning-combobox` should be used in place of the root of `lightning-base-combobox`. It is important to protect this assignment by checking if `ariaObserver` is defined. This is because the root node setters can be called after `ariaObserver` is set to `undefined` in the `disconnectedCallback`.\n\n```js\n    if (this.ariaObserver) {\n        this.ariaObserver.root = parentRootNode;\n    }\n```\n\nFinally, disconnect the aria observer and free the resources at the end of the component lifecycle.\n\n``` js\ndisconnectedCallback() {\n    if (this.ariaObserver) {\n        this.ariaObserver.disconnect();\n        this.ariaObserver = undefined;\n    }\n}\n```\n\nHere is all these steps combined into a complete example of a component using `AriaObserver`.\n\n``` html\n<template>\n    <!-- element where the aria attribute is attached -->\n    <input>\n</template>\n```\n\n``` js\nimport {api, LightningElement} from 'lwc';\nimport AriaObserver from 'lightning/ariaObserver';\n\nexport default class Foo extends LightningElement {\n    constructor() {\n        super();\n        this.ariaObserver = new AriaObserver(this);\n    }\n\n    _ariaLabelledBy = '';\n\n    @api\n    get ariaLabelledBy() {\n        return this._ariaLabelledBy;\n    }\n    set ariaLabelledBy(refs) {\n        this._ariaLabelledBy = refs;\n\n        /* Establish the connection between input and the external label */\n        this.ariaObserver.connect({\n            targetSelector: 'input',\n            attribute: 'aria-labelledby',\n            relatedNodeIds: refs\n        });\n    }\n\n    renderedCallback() {\n        if (this.isConnected) {\n            this.ariaObserver.sync();\n        }\n    }\n\n    disconnectedCallback() {\n        if (this.ariaObserver) {\n            this.ariaObserver.disconnect();\n            this.ariaObserver = undefined;\n        }\n    }\n}\n```\n\nSupported attributes:\n- `aria-labelledby`\n- `aria-describedby`\n- `aria-activedescendant`\n- `aria-controls`\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class AriaObserverConnect extends LightningElement {\n    connectIds = 'foo bar';\n\n    handleUpdateIds() {\n        this.connectIds = 'foo bar hello world';\n    }\n}\n",
        "html": "<template>\n    <div>\n        <label id=\"foo\">Foo</label>\n    </div>\n    <div>\n        <label id=\"bar\">Bar</label>\n    </div>\n    <div>\n        <label id=\"hello\">Hello</label>\n    </div>\n    <div>\n        <label id=\"world\">World</label>\n    </div>\n    <div>\n        <ariaobserver-connect-child aria-labelledby={connectIds}></ariaobserver-connect-child>\n        <div>Current Id: {connectIds}</div>\n        <div><button onclick={handleUpdateIds}>Update Ids to 'foo bar hello world'</button></div>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement, api } from 'lwc';\n\nimport AriaObserver from 'lightning/ariaObserver';\n\nexport default class AriaObserverConnectChild extends LightningElement {\n    constructor() {\n        super();\n        this.ariaObserver = new AriaObserver(this);\n    }\n\n    connectedCallback() {\n        if (!this.ariaObserver) {\n            this.ariaObserver = new AriaObserver(this);\n        }\n    }\n\n    disconnectedCallback() {\n        if (this.ariaObserver) {\n            this.ariaObserver.disconnect();\n            this.ariaObserver = undefined;\n        }\n    }\n\n    renderedCallback() {\n        if (this.isConnected) {\n            this.ariaObserver.sync();\n        }\n    }\n\n    _ariaLabelledBy = '';\n\n    @api\n    get ariaLabelledBy() {\n        return this._ariaLabelledBy;\n    }\n    set ariaLabelledBy(refs) {\n        this._ariaLabelledBy = refs;\n\n        this.ariaObserver.connect({\n            targetSelector: 'input',\n            attribute: 'aria-labelledby',\n            id: refs,\n        });\n    }\n}\n",
        "html": "<template>\n    <input type=\"text\" />\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-avatar",
    "shortDescription": "This component is an image representation of an object, such as a user or account, that provides a visual identifier with customizable sizing, shape, and fallback options for an enhanced user experience.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "src",
        "typeSignature": "string",
        "examples": [
          "<lightning-avatar src=\"/images/codey.jpg\">",
          "<lightning-avatar src=\"/bad/image/url.jpg\">",
          "<lightning-avatar src=\"https://www.lightningdesignsystem.com/assets/images/avatar2.jpg\">"
        ]
      },
      {
        "name": "alternative-text",
        "typeSignature": "string",
        "examples": [
          "<lightning-avatar alternative-text=\"Codey Bear\">",
          "<lightning-avatar alternative-text=\"Salesforce\">",
          "<lightning-avatar alternative-text=\"Amy Smith\">"
        ]
      },
      {
        "name": "initials",
        "typeSignature": "string",
        "examples": ["<lightning-avatar initials=\"Sa\">"]
      },
      {
        "name": "fallback-icon-name",
        "typeSignature": "string",
        "examples": [
          "<lightning-avatar fallback-icon-name=\"standard:account\">",
          "<lightning-avatar fallback-icon-name=\"standard:person_account\">"
        ]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": ["<lightning-avatar variant=\"circle\">"]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": [
          "<lightning-avatar class=\"slds-m-around_small\">",
          "<lightning-avatar class=\"my-fallback-color\">"
        ]
      }
    ],
    "useCases": [
      "Imagine you're using a social media platform where each user has a profile picture. The <lightning-avatar> component could be used to display these profile pictures. If a user hasn't uploaded a profile picture, the component could display the user's initials instead.",
      "On a business networking site, companies might have their logos displayed next to their names. The <lightning-avatar> component could be used to display these logos. If a logo isn't available, the component could display a default icon instead.",
      "Consider an online forum where users can post questions and answers. Next to each post, the user's profile picture could be displayed using the <lightning-avatar> component. If the user hasn't set a profile picture, their initials could be displayed instead.",
      "In a project management tool, each task could be assigned to a specific team member. The <lightning-avatar> component could be used to display a picture of the assigned team member next to each task. If the team member hasn't uploaded a picture, their initials could be displayed instead.",
      "On a news website, each article could have an author associated with it. The <lightning-avatar> component could be used to display a picture of the author. If the author hasn't provided a picture, their initials could be displayed instead.",
      "In a customer relationship management system, each customer could have a profile picture. The <lightning-avatar> component could be used to display these pictures. If a customer hasn't uploaded a picture, a default icon could be displayed instead."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Avatar\n      description: Avatar with the default size and variant.\n    - name: sizes\n      label: Avatar Sizes\n      description: Avatars of different sizes. The default size is medium.\n    - name: variant\n      label: Avatar Variants\n      description: Avatars support circle and square variants. The default variant is square.\n    - name: initials\n      label: Avatar Initials\n      description: Avatars can display initials if the image fails to load.\n    - name: icons\n      label: Avatar Icons\n      description: Avatars can display fallback icons if the image fails to load and initials are not provided.\n---\n\nA `lightning-avatar` component is an image that represents an object, such as\nan account or user. By default, the image renders in medium sizing with a\nrounded rectangle, which is also known as the `square` variant.\n\nHere is a basic avatar example.\n\n```html\n<lightning-avatar src=\"/images/codey.jpg\" alternative-text=\"Codey Bear\">\n</lightning-avatar>\n```\n\nTo use an image in your org as an avatar, upload the image as a static resource in the Static\nResources setup page. Use the `{!$Resource.logo}` syntax in your `src`\nattribute, where `logo` is the name you provided in the `Name` field on the\nsetup page.\n\n#### Handling Invalid Image Paths\n\nThe `src` attribute resolves the relative path to an image, but sometimes the\nimage path doesn't resolve correctly because the user is offline or the image\nhas been deleted. To handle an invalid image path, you can provide fallback\ninitials using the `initials` attribute or a fallback icon with the `fallback-icon-name`\nattribute. These attributes work together if both are specified.\n\nIf initials and fallback icon name are provided, the initials are displayed and the\nbackground color of the fallback icon is used as the background color for the initials.\nThe fallback icon is displayed only when the image path is invalid and initials are\nnot provided.\n\nThis example displays the initials \"Sa\" if the image path is invalid. The fallback icon\n\"standard:account\" provides the background color for the initials. The icon is one of the\n[standard icons](https://www.lightningdesignsystem.com/icons/#standard)\nin Lightning Design System.\n\n```html\n<template>\n    <lightning-avatar\n        src=\"/bad/image/url.jpg\"\n        initials=\"Sa\"\n        fallback-icon-name=\"standard:account\"\n        alternative-text=\"Salesforce\"\n    >\n    </lightning-avatar>\n</template>\n```\n\n#### Component Styling\n\n`lightning-avatar` implements the\n[avatar](https://www.lightningdesignsystem.com/components/avatar/) blueprint in the Salesforce Lightning Design System (SLDS).\n\n##### Icons\n\nAlthough SLDS provides several categories of icons, only icons from the [standard](https://www.lightningdesignsystem.com/icons/#standard) and [custom](https://www.lightningdesignsystem.com/icons/#custom) categories can be used in `lightning-avatar`.\n\nWhen applying SLDS classes or icons, check that they are\navailable in the SLDS release tied to your org. The latest\nSLDS resources become available only when the new release\nis available in your org.\n\n##### Variants\n\nUse the `variant` attribute with one of these values to apply styling.\n\n-   `square` is the default variant, displaying a rectangle avatar with rounded corners\n-   `circle` displays a round avatar\n\nThis example creates a round avatar.\n\n```html\n<template>\n    <lightning-avatar\n        variant=\"circle\"\n        src=\"https://www.lightningdesignsystem.com/assets/images/avatar2.jpg\"\n        fallback-icon-name=\"standard:person_account\"\n        alternative-text=\"Amy Smith\"\n    ></lightning-avatar>\n</template>\n```\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds a margin around the avatar using an SLDS class.\n\n```html\n<lightning-avatar\n    variant=\"circle\"\n    src=\"https://www.lightningdesignsystem.com/assets/images/avatar2.jpg\"\n    fallback-icon-name=\"standard:person_account\"\n    alternative-text=\"Account Name\"\n    class=\"slds-m-around_small\"\n>\n</lightning-avatar>\n```\n\nThe fallback icon is displayed if the image path is invalid. To apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n```html\n<lightning-avatar\n    variant=\"circle\"\n    src=\"https://www.lightningdesignsystem.com/invalid/path\"\n    fallback-icon-name=\"standard:person_account\"\n    alternative-text=\"Account Name\"\n    class=\"my-fallback-color\"\n>\n</lightning-avatar>\n```\n\nUse SLDS styling hooks to customize the component's styles. For example, specify the background color on the fallback icon using the `--slds-c-icon-color-background` custom property.\n\n```css\n.my-fallback-color {\n    --slds-c-icon-color-background: orange;\n}\n```\n\n`lightning-avatar` contains the same customizable elements as `lightning-icon`, which supports the `--slds-c-icon-*` custom properties. Consider the following guidelines when working with SLDS styling hooks.\n\n| CSS Custom Property             | `lightning-avatar` Guideline                                                                                                            |\n| ------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------- |\n| `--slds-c-avatar-text-color`     | Use with the `initials` attribute and when you specify the `fallback-icon-name` with a standard, utility, doctype, or action icon only. |\n| `--slds-c-avatar-radius-border`  | Adds a rounded border. Alternatively, to create an avatar on a circular background, use the `circle` variant.                           |\n| `--slds-c-icon-color-background` | Use with the `fallback-icon-name` attribute.                                                                                            |\n| `--slds-c-icon-color-foreground` | Use with the `fallback-icon-name` attribute for standard, custom, and action icons only.                                                |\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/avatar/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\nTo understand how we implemented SLDS in `lightning-avatar`, see the **Source Code** section.\n\n#### Accessibility\n\nUse the `alternative-text` attribute to describe the avatar, such as a user's initials or name. This description provides the value for the `alt` attribute in the `img` HTML tag.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class AvatarBasic extends LightningElement {}\n",
        "html": "<template>\n    <lightning-avatar src=\"https://www.lightningdesignsystem.com/assets/images/avatar2.jpg\"></lightning-avatar>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ExampleAvatarIcons extends LightningElement {}\n",
        "html": "<template>\n    <lightning-avatar src=\"/bad/image/url.jpg\" initials=\"\" fallback-icon-name=\"standard:account\" alternative-text=\"Salesforce\" class=\"slds-m-right_small\"></lightning-avatar>\n    <lightning-avatar src=\"/bad/image/url.jpg\" initials=\"\" fallback-icon-name=\"standard:avatar\"  alternative-text=\"Bob Wilson\" class=\"slds-m-right_small\"></lightning-avatar>\n    <lightning-avatar src=\"/bad/image/url.jpg\" initials=\"\" fallback-icon-name=\"custom:custom92\"  alternative-text=\"Wilson Enterprises\" class=\"slds-m-right_small\"></lightning-avatar>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ExampleAvatarInitials extends LightningElement {}\n",
        "html": "<template>\n    <lightning-avatar src=\"/bad/image/url.jpg\" initials=\"Sa\" fallback-icon-name=\"standard:account\" alternative-text=\"Salesforce\" class=\"slds-m-right_small\"></lightning-avatar>\n    <lightning-avatar src=\"/bad/image/url.jpg\" initials=\"BW\" fallback-icon-name=\"standard:avatar\"  alternative-text=\"Bob Wilson\" class=\"slds-m-right_small\"></lightning-avatar>\n    <lightning-avatar src=\"/bad/image/url.jpg\" initials=\"WE\" fallback-icon-name=\"custom:custom92\"  alternative-text=\"Wilson Enterprises\" class=\"slds-m-right_small\"></lightning-avatar>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ExampleAvatarSizes extends LightningElement {}\n",
        "html": "<template>\n    <lightning-avatar size=\"x-small\" src=\"https://www.lightningdesignsystem.com/assets/images/avatar2.jpg\" initials=\"JD\" fallback-icon-name=\"standard:person_account\" alternative-text=\"Jane Doe\" class=\"slds-m-right_small\"></lightning-avatar>\n    <lightning-avatar size=\"small\"   src=\"https://www.lightningdesignsystem.com/assets/images/avatar3.jpg\" initials=\"TP\" fallback-icon-name=\"standard:person_account\" alternative-text=\"Tony Price\" class=\"slds-m-right_small\"></lightning-avatar>\n    <lightning-avatar size=\"medium\"  src=\"https://www.lightningdesignsystem.com/assets/images/avatar1.jpg\" initials=\"RE\" fallback-icon-name=\"standard:person_account\" alternative-text=\"Ryan Eddie\" class=\"slds-m-right_small\"></lightning-avatar>\n    <lightning-avatar size=\"large\"   src=\"https://www.lightningdesignsystem.com/assets/images/avatar2.jpg\" initials=\"CR\" fallback-icon-name=\"standard:person_account\" alternative-text=\"Cindy Rice\" class=\"slds-m-right_small\"></lightning-avatar>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ExampleAvatarVariant extends LightningElement {}\n",
        "html": "<template>\n    <lightning-avatar variant=\"circle\" src=\"https://www.lightningdesignsystem.com/assets/images/avatar2.jpg\" initials=\"AW\" fallback-icon-name=\"standard:person_account\" alternative-text=\"Amy Weaver\" class=\"slds-m-right_small\"></lightning-avatar>\n    <lightning-avatar variant=\"square\" src=\"https://www.lightningdesignsystem.com/assets/images/avatar2.jpg\" initials=\"SJ\" fallback-icon-name=\"standard:person_account\" alternative-text=\"Sarah Jones\" class=\"slds-m-right_small\"></lightning-avatar>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-badge",
    "shortDescription": "This component is a label that holds small amounts of information, such as unread notifications or text labels, and can be customized with text only or with an icon before or after the text, providing a clear and concise way to display brief information to the user.",
    "relatedComponents": {
      "lightning-pill": "optional"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-badge label='Account Name'>", "<lightning-badge label={myLabelValue}>"]
      },
      {
        "name": "icon-name",
        "typeSignature": "string",
        "examples": [
          "<lightning-badge label='Account Name' icon-name='standard:account'>",
          "<lightning-badge label={myLabelValue} icon-name={myIconValue}>"
        ]
      },
      {
        "name": "icon-position",
        "typeSignature": "string",
        "examples": [
          "<lightning-badge label='Starred Accounts' icon-name='custom:custom11' icon-position='end'>",
          "<lightning-badge label={myLabelValue} icon-name={myIconValue} icon-position={myIconPositionValue}>"
        ]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": [
          "<lightning-badge label='Approved' class='slds-theme_success'>",
          "<lightning-badge label='Pending' class='pending-badge'>",
          "<lightning-badge label={myLabelValue} class={myClassValue}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're using a social media platform and you see a small, colorful label next to a user's name. This label, or <lightning-badge>, might say 'Verified' or 'Admin' to indicate the user's status on the platform. This is a simple, text-only badge that provides quick, easy-to-understand information about the user.",
      "Consider an email application where you see a small number next to the 'Inbox' label. This number, displayed on a <lightning-badge>, represents the number of unread emails in your inbox. The badge might also include a small envelope icon for added visual context.",
      "Think about a project management tool where each project has a status label. This label, or <lightning-badge>, might say 'In Progress', 'Completed', or 'On Hold'. The badge could also include a small icon representing the status, such as a checkmark for 'Completed' or a pause symbol for 'On Hold'.",
      "Imagine a music streaming service where each song has a small label indicating its genre. This label, or <lightning-badge>, might say 'Rock', 'Pop', or 'Classical'. The badge could also include a small icon representing the genre, such as a guitar for 'Rock' or a violin for 'Classical'.",
      "Consider a news website where each article has a small label indicating its category. This label, or <lightning-badge>, might say 'Politics', 'Sports', or 'Entertainment'. The badge might also include a small icon representing the category, such as a ball for 'Sports' or a film reel for 'Entertainment'."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Badge\n      description: Basic badges with custom labels.\n    - name: icon\n      label: Badges with Icons\n      description: Basic badges with icons.\n---\n\nA `lightning-badge` is a label that holds small amounts of information. A\nbadge can be used to display unread notifications, or to label a block of\ntext. Badges don't work for navigation because they can't include a hyperlink.\n\nYou can create two types of badges.\n\n-   A text-only badge\n-   A badge with an icon that's displayed before or after the text\n\nHere is an example of a text-only badge.\n\n```html\n<template>\n    <lightning-badge label=\"Account Name\"> </lightning-badge>\n</template>\n```\n\nTo create a badge with an icon, set the `icon-name` to a Lightning Design System icon. The icon is displayed before the text by default.\n\n```html\n<template>\n    <lightning-badge label=\"Account Name\" icon-name=\"standard:account\">\n    </lightning-badge>\n</template>\n```\n\nTo display the icon after the text, set `icon-position=\"end\"`.\n\n```html\n<template>\n    <lightning-badge\n        label=\"Starred Accounts\"\n        icon-name=\"custom:custom11\"\n        icon-position=\"end\"\n    >\n    </lightning-badge>\n</template>\n```\n\n#### Component Styling\n\n`lightning-badge` implements the\n[badge](https://www.lightningdesignsystem.com/components/badges/) blueprint in the Salesforce Lightning Design System (SLDS).\n\n##### Icons\n\nVisit [icons](https://lightningdesignsystem.com/icons) to view the available icons.\n\nWhen applying SLDS classes or icons, check that they are\navailable in the SLDS release tied to your org. The latest\nSLDS resources become available only when the new release\nis available in your org.\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nChange the badge color using an SLDS class.\nSee [colors](https://www.lightningdesignsystem.com/components/badges/#Colors) for more information.\n\nThis example creates a green badge using the `slds-theme_success` SLDS class.\n\n```html\n<lightning-badge label=\"Approved\" class=\"slds-theme_success\"> </lightning-badge>\n```\n\nAlternatively, to apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n```html\n<lightning-badge label=\"Pending\" class=\"pending-badge\"> </lightning-badge>\n```\n\nUse SLDS styling hooks to customize the component's styles. For example, specify the badge color using the `--slds-c-badge-color-background` custom property.\n\n```css\n.pending-badge {\n    --slds-c-badge-color-background: orange;\n}\n```\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/badges/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\nTo understand how we implemented SLDS in `lightning-badge`, see the **Source Code** section.\n\n#### Usage Considerations\n\nBadges with nested elements are not supported. To create a label that can contain links, use `lightning-pill` instead.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class BadgeBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Badges with custom <code>label</code> attribute values.\n        </h2>\n\n        <!-- Badge: basic -->\n        <lightning-badge label=\"Alpha\"></lightning-badge>\n        <lightning-badge label=\"Beta\"></lightning-badge>\n        <lightning-badge label=\"Gamma\"></lightning-badge>\n        <lightning-badge label=\"Inverse\" class=\"slds-badge_inverse\"></lightning-badge>\n        <lightning-badge label=\"Lightest\" class=\"slds-badge_lightest\"></lightning-badge>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class BadgeWithIcon extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Badges with <code>icon</code>.\n        </h2>\n\n        <!-- Badge: basic -->\n        <lightning-badge label=\"Alpha\" icon-name=\"standard:event\"></lightning-badge>\n        <lightning-badge label=\"Beta\" icon-name=\"standard:email\" icon-position=\"end\"></lightning-badge>\n        <lightning-badge label=\"Gamma\" icon-name=\"custom:custom11\"></lightning-badge>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-barcode-scanner",
    "shortDescription": "This component provides a user-interactive barcode scanning function, which can be customized to support specific barcode types, scanning modes, and scanner sizes, and can be triggered by clicking an icon that can also be customized in size and appearance.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "disabled",
        "typeSignature": "boolean",
        "examples": ["<lightning-barcode-scanner disabled>"]
      },
      {
        "name": "enable-continuous-scan",
        "typeSignature": "boolean",
        "examples": ["<lightning-barcode-scanner enable-continuous-scan>"]
      },
      {
        "name": "scanner-options",
        "typeSignature": "{ barcodeTypes: string[], scannerSize: string }",
        "examples": ["<lightning-barcode-scanner scanner-options={myScannerOptions}>"]
      },
      {
        "name": "icon-size",
        "typeSignature": "string",
        "examples": ["<lightning-barcode-scanner icon-size='large'>"]
      },
      {
        "name": "enabled-alternative-text",
        "typeSignature": "string",
        "examples": ["<lightning-barcode-scanner enabled-alternative-text='Alt text for the enabled icon'>"]
      },
      {
        "name": "disabled-alternative-text",
        "typeSignature": "string",
        "examples": ["<lightning-barcode-scanner disabled-alternative-text='Alt text for the disabled icon'>"]
      },
      {
        "name": "enabled-icon-src",
        "typeSignature": "string",
        "examples": ["<lightning-barcode-scanner enabled-icon-src='path/to/staticResource/enabled_image'>"]
      },
      {
        "name": "disabled-icon-src",
        "typeSignature": "string",
        "examples": ["<lightning-barcode-scanner disabled-icon-src='path/to/staticResource/disabled_image'>"]
      },
      {
        "name": "onscan",
        "typeSignature": "(ev: CustomEvent & { detail: { scannedBarcodes: string[] } }) => void",
        "examples": ["<lightning-barcode-scanner onscan={handleScan}>"]
      },
      {
        "name": "onerror",
        "typeSignature": "(ev: CustomEvent & { detail: { error: object } }) => void",
        "examples": ["<lightning-barcode-scanner onerror={handleError}>"]
      }
    ],
    "useCases": [
      "Imagine you're at a library and you want to check out a book. The library could use the <lightning-barcode-scanner> component on their website to allow you to scan the barcode on the book, automatically filling in the book's information for the checkout process.",
      "You're at a grocery store and you want to check the price of an item that isn't labeled. The store could have a kiosk with the <lightning-barcode-scanner> component, allowing you to scan the item's barcode and see its price.",
      "You're at a warehouse and need to keep track of inventory. The warehouse could use the <lightning-barcode-scanner> component on their inventory management system, allowing you to scan items as they come in or go out, automatically updating the inventory count.",
      "You're at a concert and have a digital ticket with a barcode. The venue could use the <lightning-barcode-scanner> component on their ticket checking system to scan your ticket, verifying its authenticity and allowing you to enter.",
      "You're at a retail store and want to learn more about a product. The store could use the <lightning-barcode-scanner> component on their product information kiosk, allowing you to scan the product's barcode and see detailed information about it.",
      "You're at a hospital and need to check in for your appointment. The hospital could use the <lightning-barcode-scanner> component on their check-in system, allowing you to scan your patient ID card, automatically filling in your information for the check-in process."
    ],
    "docs": "The `lightning-barcode-scanner` component embeds a barcode scanning function displayed as an icon, which launches the barcode scanner when the user clicks it. For more information on the the API this component uses, see [Use the BarcodeScanner API](https://developer.salesforce.com/docs/platform/lwc/guide/use-barcodescanner-in-a-lightning-component) in the Lightning Web Components Developer Guide.\n\n```html\n<template>\n  <lightning-barcode-scanner> </lightning-barcode-scanner>\n</template>\n```\n\nTo disable the barcode scanner, set the `disabled` attribute. The barcode scanner is enabled by default.\n\n```html\n<template>\n  <lightning-barcode-scanner disabled> </lightning-barcode-scanner>\n</template>\n```\n\n#### Scanning Modes\n\nBarcode scanning supports both single scan and continuous scan. A single scan component automatically closes after one successful scan, while a continuous scan component remains open. The `lightning-barcode-scanner` component is single scan by default.\n\nTo enable continuous scanning, set the `enable-continuous-scan` attribute.\n\n```html\n<template>\n  <lightning-barcode-scanner enable-continuous-scan>\n  </lightning-barcode-scanner>\n</template>\n```\n\n#### Scanner Options\n\nThe BarcodeScanner API for `lightning-barcode-scanner` supports various scanner options. For the list of barcode scanner option properties, see [BarcodeScannerOptions](https://developer.salesforce.com/docs/platform/lwc/guide/reference-lightning-barcodescanner-data-types) in the Lightning Web Components Developer Guide.\n\nYou can configure various scanner options for a scanning session. For example, if you want your component to support only a specific set of barcode types, specify the types as a list in the `barcodeTypes` property. If you want to modify the size of the scanner camera view, specify the size in the `scannerSize` property. In this example, the barcode scanner supports only the specified types `CODE_128`,`EAN_13`, and `QR`, and will ignore the other types, and the barcode scanner camera view is changed to `LARGE`.\n\n```html\n<template>\n  <lightning-barcode-scanner scanner-options={myScannerOptions}>\n  </lightning-barcode-scanner>\n</template>\n```\n\n```javascript\nconst myScannerOptions = {\n  barcodeTypes: [\"CODE_128\", \"QR\", \"EAN_13\"],\n  scannerSize: \"LARGE\",\n};\n```\n\n#### Icons\n\nTo specify an icon size for the barcode scanner component, set the `icon-size` attribute. By default, the `icon-size` is medium.\n\n```html\n<template>\n  <lightning-barcode-scanner icon-size=\"large\"> </lightning-barcode-scanner>\n</template>\n```\n\nTo set custom assistive technology text for the component icon in its enabled and disabled state, set the `enabled-alternative-text` and `disabled-alternative-text` attributes.\n\n```html\n<template>\n  <lightning-barcode-scanner\n    enabled-alternative-text=\"Alt text for the enabled icon\"\n    disabled-alternative-text=\"Alt text for the disabled icon\"\n  >\n  </lightning-barcode-scanner>\n</template>\n```\n\nYou can also create a custom icon for the component by specifying images and alternative texts to use in the component's enabled and disabled states.\n\nTo use a custom image for the barcode scanner icon, set the `enabled-icon-src` and `disabled-icon-src` attributes to image paths in the `staticResource` folder. This example uses custom image for the component's icon enabled and disabled states.\n\n```html\n<template>\n  <lightning-barcode-scanner\n    enabled-icon-src=\"path/to/staticResource/enabled_image\"\n    enabled-alternative-text=\"Alt text for the custom enabled icon\"\n    disabled-icon-src=\"path/to/staticResource/disabled_image\"\n    disabled-alternative-text=\"Alt text for the custom disabled icon\"\n  >\n  </lightning-barcode-scanner>\n</template>\n```\n\n#### Custom Events\n\nThe `lightning-barcode-scanner` component supports two events, `scan` and `error`.\n\nThe `scan` event is triggered by a successful scan on a single scan component or by successfully closing the scanner window on a  multiple scan component. It returns this parameter.\n\n| Parameter       | Type | Description                           |\n| --------------- | ---- | ------------------------------------- |\n| scannedBarcodes | list | Returns an array of scanned barcodes. |\n\nThe `scan` event has these properties.\n\n| Property   | Value | Description                                                                                                          |\n| ---------- | ----- | -------------------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                                          |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event to prevent firing the click event. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                                               |\n\nThe `errors` event is triggered if there is an error during the scan. The event contains the error details. It returns this parameter.\n\n| Parameter | Type   | Description                |\n| --------- | ------ | -------------------------- |\n| error     | object | Returns the error details. |\n\nThe `errors` event has these properties.\n\n| Property   | Value | Description                                                                                                          |\n| ---------- | ----- | -------------------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                                          |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event to prevent firing the click event. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                                               |\n",
    "examples": []
  },
  {
    "tagName": "lightning-breadcrumb",
    "shortDescription": "This component displays a navigational path relative to a parent page, providing users with an actionable and intuitive way to navigate through different levels of an application's hierarchy.",
    "relatedComponents": {
      "lightning-breadcrumbs": "required",
      "lightning-navigation": "optional"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-breadcrumb label='Parent Account'>", "<lightning-breadcrumb label={breadcrumbLabel}>"]
      },
      {
        "name": "href",
        "typeSignature": "string",
        "examples": ["<lightning-breadcrumb href='path/to/place/1'>", "<lightning-breadcrumb href={breadcrumbHref}>"]
      },
      {
        "name": "name",
        "typeSignature": "string",
        "examples": ["<lightning-breadcrumb name='objectName'>", "<lightning-breadcrumb name={breadcrumbName}>"]
      },
      {
        "name": "onclick",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-breadcrumb onclick={handleNavigateToCustomPage}>"]
      }
    ],
    "useCases": [
      "Imagine you're shopping online for a new pair of shoes. You've clicked through several pages, starting from the homepage, then to the 'Shoes' category, and finally to 'Women's Shoes'. At the top of the page, you see a trail of clickable links showing you the path you've taken: 'Home > Shoes > Women's Shoes'. This is the <lightning-breadcrumb> component in action, helping you navigate back to any previous page easily.",
      "Consider a situation where you're using an online learning platform. You're deep into a course, having navigated through several modules and lessons. At the top of the page, you see a trail of links: 'Home > Course Name > Module 1 > Lesson 3'. This is the <lightning-breadcrumb> component, allowing you to jump back to any previous module or the course homepage with just one click.",
      "Imagine you're browsing a company's internal portal, looking for a specific policy document. You've navigated through several pages: 'Home > Human Resources > Policies > Leave Policy'. The <lightning-breadcrumb> component at the top of the page shows this path, allowing you to easily navigate back to the 'Policies' page or any other page in the path.",
      "Consider a scenario where you're using a project management tool. You've navigated from the dashboard to a specific project, then to a task within that project. The path at the top of the page reads 'Dashboard > Project A > Task 3'. This is the <lightning-breadcrumb> component, allowing you to easily navigate back to the project page or the dashboard.",
      "Imagine you're using a forum website. You've navigated from the homepage to a specific category, then to a thread within that category. The path at the top of the page reads 'Home > Category Name > Thread Title'. This is the <lightning-breadcrumb> component, allowing you to easily navigate back to the category page or the homepage.",
      "Consider a situation where you're using a digital library. You've navigated from the homepage to a specific genre, then to a book within that genre. The path at the top of the page reads 'Home > Genre > Book Title'. This is the <lightning-breadcrumb> component, allowing you to easily navigate back to the genre page or the homepage."
    ],
    "docs": "A `lightning-breadcrumb` component displays the path of a page relative to a\nparent page. Breadcrumbs are nested in a `lightning-breadcrumbs` component.\nEach breadcrumb is actionable and separated by a greater-than sign. The order\nthe breadcrumbs appear depends on the order they are listed in markup.\n\nHere is an example.\n\n```html\n<template>\n    <lightning-breadcrumbs>\n        <lightning-breadcrumb label=\"Parent Account\" href=\"path/to/place/1\">\n        </lightning-breadcrumb>\n        <lightning-breadcrumb label=\"Case\" href=\"path/to/place/2\">\n        </lightning-breadcrumb>\n    </lightning-breadcrumbs>\n</template>\n```\n\n#### Component Styling\n\n`lightning-breadcrumb` implements the\n[breadcrumbs](https://www.lightningdesignsystem.com/components/breadcrumbs/) blueprint in the Salesforce Lightning Design System (SLDS). For more information, see the [`lightning-breadcrumbs`](bundle/lightning-breadcrumbs) documentation.\n\n#### Creating Links Using Breadcrumbs\n\nThe behavior of a breadcrumb is similar to a link for the purpose of navigation. If a link is not provided via the `href` attribute, the value defaults to `#`. Since a breadcrumb is used as navigation, we don't recommend leaving out the `href` attribute since `#` links to the same page when middle-clicked or opened in a new tab. \n\nTo provide custom navigation, use an `onclick` handler with `lightning-navigation`. If you provide a link in the `href` attribute, calling `event.preventDefault()` enables you to bypass the link and use your custom navigation instead.\n\n```html\n<template>\n    <lightning-breadcrumbs>\n        <lightning-breadcrumb\n            label=\"Parent Account\"\n            href=\"path/to/place/1\"\n            onclick={handleNavigateToCustomPage1}\n        >\n        </lightning-breadcrumb>\n        <lightning-breadcrumb\n            label=\"Case\"\n            href=\"path/to/place/2\"\n            onclick={handleNavigateToCustomPage2}\n        >\n        </lightning-breadcrumb>\n    </lightning-breadcrumbs>\n</template>\n```\n\nHandle the `click` events in your JavaScript code.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class DemoBreadcrumbs extends LightningElement {\n\nhandleNavigateToCustomPage1(event) {\n    event.preventDefault();\n    //your custom navigation here\n}\nhandleNavigateToCustomPage2(event) {\n    event.preventDefault();\n    //your custom navigation here\n}\n```\n\n#### Generating Breadcrumbs with Iteration\n\nIterate over a list of items using `for:each` to generate breadcrumbs. If you don't provide a link with an `onclick` handler, `href` defaults to `#`.\n \nFor example, you can create an array of breadcrumbs with label and name\nvalues.\n\n```html\n<template>\n    <lightning-breadcrumbs>\n        <template for:each={myBreadcrumbs} for:item=\"crumbs\">\n            <lightning-breadcrumb\n                key={crumbs.id}\n                label={crumbs.label}\n                name={crumbs.name}\n                onclick={handleNavigateTo}\n            >\n            </lightning-breadcrumb>\n        </template>\n    </lightning-breadcrumbs>\n</template>\n```\n\nGet the name of the breadcrumb that's clicked using the `event.target` property.\n\n```javascript\n//mybreadcrumbs.js\nimport { LightningElement, track } from 'lwc';\n\nexport default class MyComponentName extends LightningElement {\n    @track\n    myBreadcrumbs = [\n        { label: 'Account', name: 'objectName', id: 'account1' },\n        { label: 'Record Name', name: 'record', id: 'account2' },\n    ];\n\n    handleNavigateTo(event) {\n        //get the name of the breadcrumb that's clicked\n        const name = event.target.name;\n        event.preventDefault();\n        //your custom navigation here\n    }\n}\n```\n\n#### Design Guidelines\n\nA breadcrumb shows your location in an app's hierarchy, not your browsing history. Breadcrumbs are especially useful when you need to go to a parent page from another page in the app. They also help you situate yourself in the app.\n\nBreadcrumbs are commonly used in conjunction with a tree for navigating between nested pages. The full hierarchy path is listed on a second or third level page. When you are on a page deeper than three levels, the breadcrumb should display the last two links and truncate the rest of the hierarchy path for simplicity.\n\n#### See Also\n\n[lightning-navigation](bundle/lightning-navigation/documentation)\n",
    "examples": []
  },
  {
    "tagName": "lightning-breadcrumbs",
    "shortDescription": "This component is an ordered list that displays the navigation path of a page, allowing users to easily navigate back to parent pages, with each item being actionable and separated by a greater-than sign for a clear and accessible user experience.",
    "relatedComponents": {
      "lightning-breadcrumb": "required"
    },
    "publicApi": [],
    "useCases": [
      "In an online shopping website, the <lightning-breadcrumbs> component can be used to show the path a user has taken to reach a specific product. For example, if a user navigates from 'Home' to 'Electronics' to 'Laptops' to 'Apple MacBook Pro', the breadcrumbs would show this path, allowing the user to easily navigate back to any previous category.",
      "In a digital library, the <lightning-breadcrumbs> component can be used to show the path a user has taken to reach a specific book or article. For example, if a user navigates from 'Home' to 'Science Fiction' to 'Isaac Asimov' to 'Foundation', the breadcrumbs would show this path, allowing the user to easily navigate back to any previous category or author.",
      "In a customer relationship management (CRM) system, the <lightning-breadcrumbs> component can be used to show the path a user has taken to reach a specific customer's profile. For example, if a user navigates from 'Home' to 'Customers' to 'John Doe', the breadcrumbs would show this path, allowing the user to easily navigate back to the main customer list or home page.",
      "In a content management system (CMS), the <lightning-breadcrumbs> component can be used to show the path a user has taken to reach a specific page or post. For example, if a user navigates from 'Home' to 'Posts' to 'Drafts' to 'New Post', the breadcrumbs would show this path, allowing the user to easily navigate back to any previous section.",
      "In an online learning platform, the <lightning-breadcrumbs> component can be used to show the path a user has taken to reach a specific course or lesson. For example, if a user navigates from 'Home' to 'Courses' to 'Web Development' to 'HTML Basics', the breadcrumbs would show this path, allowing the user to easily navigate back to any previous category or course.",
      "In a web-based email client, the <lightning-breadcrumbs> component can be used to show the path a user has taken to reach a specific email or folder. For example, if a user navigates from 'Home' to 'Inbox' to 'Important' to 'Meeting Agenda', the breadcrumbs would show this path, allowing the user to easily navigate back to any previous folder or the inbox."
    ],
    "docs": "---\nexamples:\n    - name: base\n      label: Navigate Using a Link\n      description: Use breadcrumbs to note the path of a record and help the user to navigate back to the parent.\n    - name: withOnclick\n      label: Navigate Using the onclick Handler\n      description: Using the onclick handler enables you to navigate programmatically using JavaScript.\n    - name: withIteration\n      label: Generate Breadcrumbs with for:each\n      description: Use for:each to iterate over a list of items to generate the breadcrumbs.\n---\n\nA `lightning-breadcrumbs` component is an ordered list that displays the path\nof a page and helps you navigate back to the parent. Each breadcrumb item is\nrepresented by a `lightning-breadcrumb` component. Breadcrumbs are actionable\nand separated by a greater-than sign.\n\nFor more information, see the [`lightning-breadcrumb`](bundle/lightning-breadcrumb) documentation.\n\n#### Component Styling\n\n`lightning-breadcrumbs` implements the\n[breadcrumbs](https://www.lightningdesignsystem.com/components/breadcrumbs/) blueprint in the Salesforce Lightning Design System (SLDS).\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds a margin around the breadcrumbs using an SLDS class.\n\n```html\n<lightning-breadcrumbs class=\"slds-m-around_small\">\n    <lightning-breadcrumb\n        label=\"Parent Account\"\n        href=\"http://example.com/parent\"\n    >\n    </lightning-breadcrumb>\n    <lightning-breadcrumb label=\"Case\" href=\"http://example.com/case\">\n    </lightning-breadcrumb>\n</lightning-breadcrumbs>\n```\n\nUse SLDS styling hooks to customize the component's styles. For example, adjust the spacing before and after the greater-than sign using the `--slds-c-breadcrumbs-*` custom properties.\n\n```css\n.my-breadcrumbs {\n    --slds-c-breadcrumbs-spacing-inlineend: 20px;\n    --slds-c-breadcrumbs-spacing-inlinestart: 30px;\n}\n```\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/breadcrumbs/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\n#### Accessibility\n\n`lightning-breadcrumbs` renders with `role=\"navigation\"`, which is a landmark role that enables screen readers to provide keyboard navigation to the links on the breadcrumbs.\nThe `aria-label=\"Breadcrumbs\"` property is rendered automatically to inform screen readers the navigation type. Screen readers read both the role and the label description.\n\nIf your page includes another navigation landmark besides the breadcrumbs, you can use a different label for the other navigation landmark. Updating the `aria-label` property on `lightning-breadcrumbs` is currently not supported.\n\nThe last breadcrumb item usually corresponds to the current page a user is viewing.\nThis breadcrumb item renders with `aria-current=\"page\"`, which is announced by the screen reader as the current page within a set of navigation links.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class BaseBreadcrumbs extends LightningElement {}\n",
        "html": "<template>\n    <lightning-breadcrumbs>\n        <lightning-breadcrumb\n            label=\"Parent Account\"\n            href=\"http://example.com/parent\">\n        </lightning-breadcrumb>\n        <lightning-breadcrumb\n            label=\"Case\"\n            href=\"http://example.com/case\">\n        </lightning-breadcrumb>\n    </lightning-breadcrumbs>\n</template>\n"
      },
      {
        "js": "import { LightningElement, track } from 'lwc';\n\nexport default class BreadcrumbsWithIteration extends LightningElement {\n    @track\n    myBreadcrumbs = [\n        { label: 'Account', name: 'parent', id: 'account1' },\n        { label: 'Child Account', name: 'child', id: 'account2' },\n    ];\n    breadCrumbsMap = {\n        parent: 'http://www.example.com/account1',\n        child: 'http://www.example.com/account2',\n    };\n\n    handleNavigateTo(event) {\n        // prevent default navigation by href\n        event.preventDefault();\n\n        const name = event.target.name;\n\n        if (this.breadCrumbsMap[name]) {\n            window.location.assign(this.breadCrumbsMap[name]);\n        }\n    }\n}\n",
        "html": "<template>\n    <lightning-breadcrumbs>\n        <template for:each={myBreadcrumbs} for:item=\"crumbs\">\n            <lightning-breadcrumb\n                key={crumbs.id}\n                label={crumbs.label}\n                name={crumbs.name}\n                onclick={handleNavigateTo}>\n            </lightning-breadcrumb>\n        </template>\n    </lightning-breadcrumbs>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class DemoBreadcrumbs extends LightningElement {\n    handleNavigateToAccount(event) {\n        // prevent default navigation by href\n        event.preventDefault();\n\n        const caseDiv = this.template.querySelector('.container .case');\n        this.hide(caseDiv);\n\n        const accountDiv = this.template.querySelector('.container .account');\n        this.show(accountDiv);\n    }\n\n    handleNavigateToCase(event) {\n        // prevent default navigation by href\n        event.preventDefault();\n\n        const accountDiv = this.template.querySelector('.container .account');\n        this.hide(accountDiv);\n\n        const caseDiv = this.template.querySelector('.container .case');\n        this.show(caseDiv);\n    }\n\n    close(event) {\n        const name = event.target.value;\n        const elmToClose = this.template.querySelector(`.${name}`);\n        this.hide(elmToClose);\n    }\n\n    show(elm) {\n        elm.classList.remove('slds-hide');\n        elm.classList.add('slds-show');\n    }\n\n    hide(elm) {\n        elm.classList.add('slds-hide');\n        elm.classList.remove('slds-show');\n    }\n}\n",
        "html": "<template>\n    <lightning-breadcrumbs>\n        <lightning-breadcrumb\n            label=\"Account\"\n            href=\"path/to/place/1\"\n            onclick={handleNavigateToAccount}>\n        </lightning-breadcrumb>\n        <lightning-breadcrumb\n            label=\"Case\"\n            href=\"path/to/place/2\"\n            onclick={handleNavigateToCase}>\n        </lightning-breadcrumb>\n    </lightning-breadcrumbs>\n\n    <div class=\"container\">\n        <div class=\"slds-hide account\">\n            <lightning-card\n                variant=\"narrow\"\n                icon-name=\"standard:account\"\n                title=\"Account title\">\n                <p class=\"slds-m-around_medium\">Account details</p>\n                <div slot=\"actions\">\n                    <lightning-button-icon icon-name=\"utility:down\" alternative-text=\"Show actions\"></lightning-button-icon>\n                </div>\n                <lightning-button value=\"account\" label=\"Close\" onclick={close}></lightning-button>\n            </lightning-card>\n\n        </div>\n\n        <div class=\"slds-hide case\">\n            <lightning-card\n                variant=\"narrow\"\n                icon-name=\"standard:case\"\n                title=\"Case title\">\n                <p class=\"slds-m-around_medium\">Case details</p>\n                <div slot=\"actions\">\n                    <lightning-button-icon icon-name=\"utility:down\" alternative-text=\"Show actions\"></lightning-button-icon>\n                </div>\n                <lightning-button value=\"case\" label=\"Close\" onclick={close}></lightning-button>\n            </lightning-card>\n        </div>\n    </div>\n\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-button",
    "shortDescription": "This component is a customizable button that can execute actions, display different colors and icons, and provide various user experiences such as submitting a form, starting a new task, triggering a new UI element, or specifying a new step in a process.",
    "relatedComponents": {
      "lightning-record-edit-form": "optional",
      "lightning-button-icon": "optional",
      "lightning-button-menu": "optional",
      "lightning-record-form": "optional"
    },
    "publicApi": [
      {
        "name": "type",
        "typeSignature": "string",
        "examples": [
          "<lightning-button type='button'>",
          "<lightning-button type='submit'>",
          "<lightning-button type='reset'>"
        ]
      },
      {
        "name": "onclick",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-button onclick={handleClick}>"]
      },
      {
        "name": "icon-name",
        "typeSignature": "string",
        "examples": ["<lightning-button icon-name='utility:download'>"]
      },
      {
        "name": "icon-position",
        "typeSignature": "string",
        "examples": ["<lightning-button icon-position='right'>"]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": [
          "<lightning-button variant='brand'>",
          "<lightning-button variant='neutral'>",
          "<lightning-button variant='destructive'>"
        ]
      },
      {
        "name": "disable-animation",
        "typeSignature": "boolean",
        "examples": ["<lightning-button disable-animation>"]
      },
      {
        "name": "stretch",
        "typeSignature": "boolean",
        "examples": ["<lightning-button stretch>"]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-button label='Start'>"]
      },
      {
        "name": "title",
        "typeSignature": "string",
        "examples": ["<lightning-button title='Begins the task'>"]
      },
      {
        "name": "aria-label",
        "typeSignature": "string",
        "examples": ["<lightning-button aria-label='Download'>"]
      },
      {
        "name": "aria-labelledby",
        "typeSignature": "string",
        "examples": ["<lightning-button aria-labelledby='downloadLabel downloadDesc'>"]
      },
      {
        "name": "aria-describedby",
        "typeSignature": "string",
        "examples": ["<lightning-button aria-describedby='descriptionClose'>"]
      },
      {
        "name": "disabled",
        "typeSignature": "boolean",
        "examples": ["<lightning-button disabled>"]
      },
      {
        "name": "accesskey",
        "typeSignature": "string",
        "examples": ["<lightning-button accesskey='D'>"]
      },
      {
        "name": "aria-atomic",
        "typeSignature": "boolean",
        "examples": ["<lightning-button aria-atomic>"]
      },
      {
        "name": "aria-controls",
        "typeSignature": "string",
        "examples": ["<lightning-button aria-controls='elementID'>"]
      },
      {
        "name": "aria-expanded",
        "typeSignature": "boolean",
        "examples": ["<lightning-button aria-expanded>"]
      },
      {
        "name": "aria-haspopup",
        "typeSignature": "string",
        "examples": ["<lightning-button aria-haspopup='true'>"]
      },
      {
        "name": "aria-live",
        "typeSignature": "string",
        "examples": ["<lightning-button aria-live='polite'>"]
      },
      {
        "name": "tabindex",
        "typeSignature": "integer",
        "examples": ["<lightning-button tabindex='-1'>"]
      }
    ],
    "useCases": [
      "Imagine you're on a website shopping for clothes. You've added a few items to your cart and now you're ready to checkout. You would click on a <lightning-button> that says 'Checkout' to proceed to the next step.",
      "You're filling out a form online to apply for a new job. After carefully entering all your information, you would click on a <lightning-button> that says 'Submit' to send your application.",
      "You're on a music streaming website and you've just found a new song you really like. You would click on a <lightning-button> that says 'Add to Playlist' to save the song for later.",
      "You're on a social media website and you see a post from a friend that you really like. You would click on a <lightning-button> that says 'Like' to show your friend that you enjoyed their post.",
      "You're on a news website reading an article. At the end of the article, there's a <lightning-button> that says 'Show Comments'. You would click this button to see what other people are saying about the article.",
      "You're on a website for a local restaurant. You decide you want to order food for delivery. You would click on a <lightning-button> that says 'Order Now' to start the process."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Buttons\n      description: Button variants display the buttons with different colors to convey different meanings. The default variant is neutral.\n    - name: disabled\n      label: Disabled Buttons\n      description: Disabled buttons are grayed out and can't be clicked.\n    - name: withIcon\n      label: Buttons with Icons\n      description: Buttons can include a utility icon next to the label for decorative purposes. The default icon position is left.\n    - name: inverse\n      label: Inverse Buttons\n      description: Buttons with the inverse variant are transparent and have light-colored labels, which works well with a dark background.\n    - name: onclick\n      label: Buttons with Custom onclick Actions\n      description: Buttons can use custom onclick handlers to perform actions.\n    - name: accesskey\n      label: Buttons with Accesskey and Tabindex Attributes\n      description: Buttons define access key shortcuts with the accesskey attribute, and use the tabindex attribute to determine the order in which those buttons are visited when using the tab key.\n---\n\nA `lightning-button` component represents a button element that executes an\naction. Use `lightning-button` where users need to:\n\n-   Submit or reset a form\n-   Begin a new task\n-   Trigger a new UI element to appear on the page\n-   Specify a new or next step in a process\n\nUse the `type` attribute to specify `button`, `submit`, or `reset`. The default type is `button` and doesn't need to be specified.\n\nThe `submit` and `reset` types create buttons for submitting and resetting form data.\nUse these button types in `lightning-record-edit-form` and the HTML `form` element. The `reset` type button only deletes the values in the form fields without interacting with the database. For information about resetting the form fields to their initial values, see\n[`lightning-record-edit-form`](bundle/lightning-record-edit-form/documentation) .\n\nFor the default button, clicking the button triggers the `click` event. Use an `onclick` handler to perform the button's action.\n\nYou can create a button with a label only, or add the `icon-name` attribute\nfor a button with a label and icon. To create an icon-only\nbutton, use the `lightning-button-icon` component instead.\n\nHere's an example that creates a button with the `brand` variant, and displays\n`label` text on the button. The `title` attribute provides tooltip text for the button.\n\n```html\n<template>\n    <lightning-button\n        variant=\"brand\"\n        label=\"Start\"\n        title=\"Begins the task\"\n        onclick={handleClick}\n    >\n    </lightning-button>\n</template>\n```\n\nHere's another example that creates a button with the `brand` variant, with a label\nand icon. The icon is positioned to the left\nof the label by default, so the example uses `icon-position` to display it on the right.\n\n```html\n<template>\n    <lightning-button\n        variant=\"brand\"\n        label=\"Download\"\n        icon-name=\"utility:download\"\n        icon-position=\"right\"\n        onclick={handleClick}\n    >\n    </lightning-button>\n</template>\n```\n\nYou can retrieve the button that's clicked by using `event.target`. For\nexample, to retrieve the label on the button, use\n`event.target.label`.\n\n#### Component Styling\n\n`lightning-button` implements the\n[buttons](https://www.lightningdesignsystem.com/components/buttons/) blueprint in the Salesforce Lightning Design System (SLDS).\n\n##### Icons\n\nUse the `icon-name` attribute to add a utility icon to the button.\n\nThe SLDS utility icon category provides nearly 200 utility\nicons that can be used in `lightning-button` along with label text. Although\nSLDS provides several categories of icons, only the utility category can be used in `lightning-button`.\n\nVisit [https://lightningdesignsystem.com/icons/#utility](https://lightningdesignsystem.com/icons/#utility) to view the utility icons.\n\n##### Variants\n\nUse the `variant` attribute with one of these values to apply styling and animation.\n\n-   `base` is a button without a border, which gives it the look of a plain text link.\n-   `neutral` is the default variant, a plain uncolored button.\n-   `brand` is a blue button, used to draw attention to the primary action on a page.\n-   `brand-outline` is similar to `brand` but the color is used for the label and border only, not the button color.\n-   `destructive` is a red button used to warn users that its action has a negative effect.\n-   `destructive-text` is similar to `destructive` but only the label and border are red.\n-   `inverse` uses the background color and light text, useful for dark backgrounds.\n-   `success` is a green button used to indicate a successful action.\n\n##### Animation\n\nButtons are animated by default. For the `base` variant, an underline is drawn when you mouse over the button. For the other variants, a ripple of contrasting color displays when you click the button.\n\nWhen a button is disabled, the animation is disabled as well.\n\nIf your browser or operating system is set to reduce animation, the button animations don't display.\n\nTo prevent animation for a button, use the `disable-animation` attribute.\n\n```html\n<template>\n    <lightning-button\n        variant=\"brand\"\n        label=\"Start\"\n        title=\"Begins the task\"\n        disable-animation\n        onclick={handleClick}>\n    </lightning-button>\n</template>\n```\n\nWe recommend setting this attribute only when you place `lightning-button` near other\nbuttons that aren't animated, for consistency.\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds a margin to the left of the second button using an SLDS class.\n\n```html\n<lightning-button label=\"Cancel\" title=\"Cancel\"></lightning-button>\n<lightning-button\n    variant=\"brand\"\n    label=\"Brand\"\n    title=\"Primary action\"\n    class=\"slds-m-left_x-small\"\n></lightning-button>\n```\n\nYou can also use the `stretch` attribute to expand the button to the full available width. In this example, the button stretches horizontally to fit the full `<div>` container.\n\n```html\n<div>\n    <lightning-button\n        variant=\"brand\"\n        label=\"Get Started\"\n        title=\"Get Started\"\n        stretch\n    ></lightning-button>\n</div>\n```\n\nTo apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n```html\n<lightning-button\n    variant=\"brand\"\n    label=\"Submit\"\n    title=\"Submit\"\n    class=\"my-brand\"\n>\n</lightning-button>\n```\n\nUse SLDS styling hooks to customize the component's styles. For example, specify the background color on the button with `brand` variant using the `--slds-c-button-brand-color-background` custom property.\n\n```css\n.my-brand {\n    --slds-c-button-brand-color-background: purple;\n}\n```\n\nCustom properties for buttons work only with particular `lightning-button` variants.\n\n| CSS Custom Property                 | `lightning-button` Variants                      |\n| ----------------------------------- | ------------------------------------------------ |\n| `--slds-c-button-*`                  | all                                              |\n| `--slds-c-button-color-*`            | `base`                                           |\n| `--slds-c-button-text-color-*`       | `neutral` (default), `base`, and `brand-outline` |\n| `--slds-c-button-neutral-*`          | `neutral` (default)                              |\n| `--slds-c-button-brand-*`            | `brand`                                          |\n| `--slds-c-button-outline-brand-*`    | `brand-outline`                                  |\n| `--slds-c-button-destructive-*`      | `destructive`                                    |\n| `--slds-c-button-text-destructive-*` | `destructive-text`                               |\n| `--slds-c-button-inverse-*`          | `inverse`                                        |\n| `--slds-c-button-success-*`          | `success`                                        |\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/buttons/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\nTo understand how we implemented SLDS in `lightning-button`, see the **Source Code** section.\n\n#### Usage Considerations\n\nTo create an icon-only button, use the `lightning-button-icon` component instead. Creating an icon-only button using `lightning-button` results in additional spacing next to the icon. To create a button that triggers a menu, use `lightning-button-menu`.\n\nIcons are not available in Lightning Out, but they are available in Lightning Components for Visualforce and other experiences.\n\nIf you're creating forms to interact with Salesforce records, consider using `lightning-record-form` or `lightning-record-edit-form`.\n\nWe don't support changing the label alignment on the button. To adjust the padding, inline spacing, or line height of the text label, use [SLDS styling hooks](https://www.lightningdesignsystem.com/components/buttons/#Styling-Hooks-Overview).\n\nTo address text wrapping in long labels when the browser viewport is reduced, customize the line height and block spacing of the button label using SLDS styling hooks.\n\n-   `--slds-c-button-line-height`\n-   `--slds-c-button-spacing-blockstart`\n-   `--slds-c-button-spacing-blockend`\n\nOn mobile screens, we recommend setting the button size to\n44x44 px. If you have more than one target on a screen that performs the same action, only one of the targets need to meet the target size of 44x44 px. For more information, see [Follow Accessible Mobile Design Guidelines\n](https://developer.salesforce.com/docs/platform/lwc/guide/mobile-a11y).\n\n#### Accessibility\n\nButtons must have an accessible name to enable assistive technology to describe the button's purpose. Provide this name using the `label` attribute and make it a clear call to action, for example, \"Edit record\".\n\nIf you create an icon-only button using `lightning-button`, provide an accessible name using the `aria-label` or `aria-labelledby` attribute. We recommend that you use one of the attributes but not both.\n\nTo provide a text label that's not visible on the screen, use `aria-label`.\n\n```html\n<lightning-button\n    aria-label=\"Download\"\n    icon-name=\"utility:download\"\n    variant=\"base\"></lightning-button>\n```\n\nTo associate the button with text from another element, use `aria-labelledby`.\n\n```html\n<h2 id=\"downloadLabel\">Download Files</h2>\n<h3 id=\"downloadDesc\">View and make changes to your files</h3>\n<lightning-button\n    aria-labelledby=\"downloadLabel downloadDesc\"\n    icon-name=\"utility:download\"\n    variant=\"base\"></lightning-button>\n```\n\nTo use `aria-label` with additional descriptive text, use `aria-describedby`.\n\n```html\n<lightning-button\n    aria-label=\"Close\"\n    aria-describedby=\"descriptionClose\"\n    icon-name=\"utility:close\"\n    variant=\"base\"></lightning-button>\n\n\n<div id=\"descriptionClose\">Closing this window resets the form and\nreturns you back to the main page.</div>\n```\n\n`lightning-button` provides many variants that add color to a button, which convey different meaning on a button. Use the variants together with clear text on the button to match the meaning you are trying to convey via color. For example, if you use the destructive button to point out a potential warning, make sure the text communicates the same message.\n\nTo inform screen readers that a button is disabled, include the `disabled` attribute.\n\nUse the following accessibility and `aria` attributes on `lightning-button`.\n\n| Attribute        | Type              | Description                                                                                                                                                                                                                                                                                                                                          |\n| ---------------- | ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| accesskey        | string            | A shortcut key to activate or place focus on the button.                                                                                                                                                                                                                                                                                             |\n| aria-atomic      | boolean           | Specifies whether the screen reader should always present the live region as a whole, even if only part of the region changes. The default is `false`.                                                                                                                                                                                               |\n| aria-controls    | ID reference list | An element ID or a space-separated list of element IDs whose presence or content is controlled by this button.                                                                                                                                                                                                                                       |\n| aria-describedby | ID reference list | An element ID or a space-separated list of element IDs that provide a descriptive label or description for the button.                                                                                                                                                                                                                               |\n| aria-expanded    | boolean           | Indicates whether a collapsible element that's controlled by the button is expanded or collapsed. To reference the controlled element, use `aria-controls`.                                                                                                                                                                                          |\n| aria-haspopup    | token             | Indicates that the button has an interactive popup element. Valid values are 'true', 'dialog', 'menu', 'listbox', 'tree', and 'grid'.                                                                                                                                                                                                                |\n| aria-label       | string            | Provides an assistive label where a visible label cannot be used.                                                                                                                                                                                                                                                                                    |\n| aria-labelledby  | ID reference list | Specifies the ID or list of IDs of the element or elements that contain visible descriptive text to describe the button.                                                                                                                                                                                                                             |\n| aria-live        | token             | Indicates the button can dynamically update without a page reload, and specifies how the change is announced by assistive technologies. Possible values include `off`, `polite`, and `assertive`. The default is `off`. For the screen reader to announce changes when the user is idle, use `polite`. For immediate notifications, use `assertive`. |\n| tabindex         | integer           | Specifies whether the button is focusable during tab navigation. Set tab index to -1 to prevent focus on the button during tab navigation. The default value is 0, which makes the button focusable during tab navigation. For more information see [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex).                      |\n\nFor more information, see the [WAI-ARIA Specification](https://www.w3.org/TR/wai-aria/).\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonAccesskey extends LightningElement {\n    clickedButtonLabel;\n\n    handleClick(event) {\n        this.clickedButtonLabel = event.target.label;\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_xx-small slds-m-bottom_xx-small\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_xx-small\">\n            Buttons with custom access keys.\n        </h2>\n        <div class=\"slds-m-bottom_medium slds-p-bottom_medium slds-border_bottom\">\n            To activate the buttons using the access key, press the following keys:\n            <ul class=\"slds-list_dotted\">\n                <li class=\"slds-m-vertical_x-small\">Mac: &nbsp;<kbd>Control</kbd>&nbsp;+&nbsp;<kbd>Alt</kbd>&nbsp;+&nbsp;<kbd><em>key</em></kbd></li>\n                <li class=\"slds-m-vertical_x-small\">Windows: &nbsp;<kbd>Alt</kbd>&nbsp;+&nbsp;<kbd><em>key</em></kbd></li>\n                <li class=\"slds-m-vertical_x-small\">Firefox on Windows: &nbsp;<kbd>Alt</kbd>&nbsp;+&nbsp;<kbd>Shift</kbd>&nbsp;+&nbsp;<kbd><em>key</em></kbd></li>\n            </ul>\n        </div>\n        <p>\n            The <code>accesskey</code> attribute has a value specified in the button's label text\n        </p>\n\n        <div class=\"slds-p-vertical_small\">\n            <!-- Basic button -->\n            <lightning-button label=\"With accesskey 'x'\" title=\"Download action\" accesskey=\"x\" onclick={handleClick} class=\"slds-m-left_x-small\"></lightning-button>\n\n            <!-- Button with icon before the label text -->\n            <lightning-button label=\"With accesskey 'y'\" title=\"Download action\" accesskey=\"y\" onclick={handleClick} icon-name=\"utility:download\" class=\"slds-m-left_x-small\"></lightning-button>\n\n            <!-- Button with icon after the label text -->\n            <lightning-button label=\"With accesskey 'z'\" title=\"Download action\" accesskey=\"z\" onclick={handleClick} icon-name=\"utility:download\" icon-position=\"right\" class=\"slds-m-left_x-small\"></lightning-button>\n        </div>\n\n        <div class=\"slds-m-vertical_medium slds-p-vertical_medium slds-border_bottom slds-border_top\">\n            <p>The label of the button that was activated is: <span class=\"slds-text-heading_small\">{clickedButtonLabel}</span></p>\n        </div>\n    </div>\n</template>\n",
        "css": "kbd {\n    background-color: #eee;\n    border-radius: 3px;\n    border: 1px solid #b4b4b4;\n    box-shadow: 0 1px 1px rgb(0 0 0 / 20%), 0 2px 0 0 rgb(255 255 255 / 70%) inset;\n    color: #333;\n    display: inline-block;\n    font-family: consolas,\"Liberation Mono\",courier,monospace;\n    font-size: .85em;\n    font-weight: 700;\n    line-height: 1;\n    padding: 2px 4px;\n    white-space: nowrap;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonBasic extends LightningElement {\n    clickedButtonLabel;\n\n    handleClick(event) {\n        this.clickedButtonLabel = event.target.label;\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_small slds-m-bottom_medium\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_small\">\n            Click the buttons to activate the <code>onclick</code> handler and view the label of the clicked button.\n        </h2>\n\n        <!-- Base variant: Makes a button look like a link -->\n        <lightning-button variant=\"base\" label=\"Base\" title=\"Looks like a link\" onclick={handleClick} class=\"slds-m-left_x-small\"></lightning-button>\n\n        <!-- Neutral variant (default) -->\n        <lightning-button label=\"Neutral\" title=\"Non-primary action\" onclick={handleClick} class=\"slds-m-left_x-small\"></lightning-button>\n\n        <!-- Brand variant: Identifies the primary action in a group of buttons -->\n        <lightning-button variant=\"brand\" label=\"Brand\" title=\"Primary action\" onclick={handleClick} class=\"slds-m-left_x-small\"></lightning-button>\n\n        <!-- Brand outline variant: Identifies the primary action in a group of buttons, but has a lighter look -->\n        <lightning-button variant=\"brand-outline\" label=\"Brand Outline\" title=\"Primary action with lighter look\" onclick={handleClick} class=\"slds-m-left_x-small\"></lightning-button>\n\n        <!-- Destructive variant: Identifies a potentially negative action -->\n        <lightning-button variant=\"destructive\" label=\"Destructive\" title=\"Destructive action\" onclick={handleClick} class=\"slds-m-left_x-small\"></lightning-button>\n\n        <!-- Destructive text variant: Identifies a potentially negative action, but has a lighter look -->\n        <lightning-button variant=\"destructive-text\" label=\"Destructive Text\" title=\"Destructive action with a lighter look\" onclick={handleClick} class=\"slds-m-left_x-small\"></lightning-button>\n\n        <!-- Success variant: Identifies a successful action -->\n        <lightning-button variant=\"success\" label=\"Success\" title=\"Successful action\" onclick={handleClick} class=\"slds-m-left_x-small\"></lightning-button>\n    </div>\n\n    <div class=\"slds-m-vertical_medium\">\n        <p>The label of the button that was clicked is: <span class=\"slds-text-heading_small\">{clickedButtonLabel}</span></p>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonDisabled extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_small slds-m-bottom_medium\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_small\">\n                These buttons don't respond when you click them.\n            </h2>\n\n            <!-- Base variant: Makes a button look like a link -->\n            <lightning-button variant=\"base\" label=\"Base\" title=\"Looks like a link\" disabled class=\"slds-m-left_x-small\"></lightning-button>\n\n            <!-- Neutral variant (default) -->\n            <lightning-button label=\"Neutral\" title=\"Non-primary action\" disabled class=\"slds-m-left_x-small\"></lightning-button>\n\n            <!-- Brand variant: Identifies the primary action in a group of buttons -->\n            <lightning-button variant=\"brand\" label=\"Brand\" title=\"Primary action\" disabled class=\"slds-m-left_x-small\"></lightning-button>\n\n            <!-- Brand outline variant -->\n            <lightning-button variant=\"brand-outline\" label=\"Brand Outline\" title=\"Primary action with lighter look\" disabled class=\"slds-m-left_x-small\"></lightning-button>\n\n            <!-- Destructive variant: Identifies a potentially negative action -->\n            <lightning-button variant=\"destructive\" label=\"Destructive\" title=\"Destructive action\" disabled class=\"slds-m-left_x-small\"></lightning-button>\n\n            <!-- Destructive text variant: This button is used to indicate a destructive action to the user, like permanently erasing data.  -->\n            <lightning-button variant=\"destructive-text\" label=\"Destructive Text\" title=\"Destructive action with a lighter look\" disabled class=\"slds-m-left_x-small\"></lightning-button>\n\n            <!-- Success variant: Identifies a successful action -->\n            <lightning-button variant=\"success\" label=\"Success\" title=\"Success\" disabled class=\"slds-m-left_x-small\"></lightning-button>\n        </div>\n    </template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonInverse extends LightningElement {}\n",
        "html": "<template>\n        <div class=\"slds-m-top_small slds-m-bottom_small\">\n                <h2 class=\"slds-text-heading_small slds-m-bottom_xx-small\">\n                    Inverse variant of buttons with varying attribute values.\n                </h2>\n                <p class=\"slds-m-bottom_medium\">\n                    <code>variant</code> attribute has a value of <code>inverse</code>\n                </p>\n\n            <div class=\"slds-p-around_medium lgc-bg-inverse\"\n            style=\"display: flex\">\n                <!-- Basic button -->\n                <lightning-button variant=\"inverse\" label=\"Download\" title=\"Download action\" class=\"slds-m-left_x-small\"></lightning-button>\n\n                <!-- Button with icon before the label text -->\n                <lightning-button variant=\"inverse\" label=\"Download\" title=\"Download action\" icon-name=\"utility:download\" class=\"slds-m-left_x-small\"></lightning-button>\n\n                <!-- Button with icon after the label text -->\n                <lightning-button variant=\"inverse\" label=\"Download\" title=\"Download action\" icon-name=\"utility:download\" icon-position=\"right\" class=\"slds-m-left_x-small\"></lightning-button>\n            </div>\n        </div>\n\n        <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n                <h2 class=\"slds-text-heading_small slds-m-bottom_xx-small\">\n                    Inverse variant of buttons that are disabled.\n                </h2>\n            <ul class=\"slds-list_dotted slds-m-bottom_medium\">\n                <li><code>variant</code> attribute has a value of <code>inverse</code></li>\n                <li><code>disabled</code> attribute is present</li>\n            </ul>\n\n            <div class=\"slds-p-around_medium lgc-bg-inverse\" style=\"display: flex\">\n                <!-- Button that is disabled -->\n                <lightning-button variant=\"inverse\" label=\"Delete\" title=\"Delete action\" disabled class=\"slds-m-left_x-small\"></lightning-button>\n\n                <!-- Button that is disabled and has an icon before the label text -->\n                <lightning-button variant=\"inverse\" label=\"Delete\" title=\"Delete action\" disabled icon-name=\"utility:delete\" class=\"slds-m-left_x-small\"></lightning-button>\n\n                <!-- Button that is disabled and has an icon after the label text -->\n                <lightning-button variant=\"inverse\" label=\"Delete\" title=\"Delete action\" disabled icon-name=\"utility:delete\" icon-position=\"right\" class=\"slds-m-left_x-small\"></lightning-button>\n            </div>\n        </div>\n    </template>\n",
        "css": ".lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n\n.slds-m-left_x-small {\n    margin-left: 0.5rem;\n}\n  \n.slds-p-around_medium {\n   padding: 1rem;\n}\n"
      },
      {
        "js": "import { LightningElement, track } from 'lwc';\n\nexport default class ButtonOnclick extends LightningElement {\n    toggleIconName = 'utility:preview';\n    toggleButtonLabel = 'Hide content';\n    @track greekLetter;\n\n    // when the component is first initialized assign an initial value to the `greekLetter` variable\n    connectedCallback() {\n        this.greekLetter = this.getRandomGreekLetter();\n    }\n\n    // Handles click on the 'Show/hide content' button\n    handleToggleClick() {\n        // retrieve the classList from the specific element\n        const contentBlockClasslist = this.template.querySelector(\n            '.lgc-id_content-toggle'\n        ).classList;\n        // toggle the hidden class\n        contentBlockClasslist.toggle('slds-hidden');\n\n        // if the current icon-name is `utility:preview` then change it to `utility:hide`\n        if (this.toggleIconName === 'utility:preview') {\n            this.toggleIconName = 'utility:hide';\n            this.toggleButtonLabel = 'Reveal content';\n        } else {\n            this.toggleIconName = 'utility:preview';\n            this.toggleButtonLabel = 'Hide content';\n        }\n    }\n\n    // Handles click on the 'Random greek letter' button\n    handleRandomClick() {\n        this.greekLetter = this.getRandomGreekLetter();\n    }\n\n    // internal only method of this example component\n    // :: this generates a random greek letter string that is inserted into the template\n    getRandomGreekLetter() {\n        // retrieve a random greek letter from the array\n        const letter =\n            this.greek[Math.floor(Math.random() * this.greek.length)];\n\n        // create a temporary <textarea> element using the DOMParser\n        // :: this allows for the pretty formatting using the HTML character entities such as `&alpha;`\n        // :: this allows the browser to automatically convert the string to proper HTML\n        const textarea = new DOMParser().parseFromString(\n            `<textarea>${letter} [ &${letter}; ]</textarea>`,\n            'text/html'\n        ).body.firstChild;\n\n        // return the final converted value for output in our component\n        return textarea.value;\n    }\n\n    // list of greek letter names\n    greek = [\n        'alpha',\n        'theta',\n        'tau',\n        'beta',\n        'vartheta',\n        'pi',\n        'upsilon',\n        'gamma',\n        'iota',\n        'varpi',\n        'phi',\n        'delta',\n        'kappa',\n        'rho',\n        'varphi',\n        'epsilon',\n        'lambda',\n        'varrho',\n        'chi',\n        'varepsilon',\n        'mu',\n        'sigma',\n        'psi',\n        'zeta',\n        'nu',\n        'varsigma',\n        'omega',\n        'eta',\n        'xi',\n        'Gamma',\n        'Lambda',\n        'Sigma',\n        'Psi',\n        'Delta',\n        'Xi',\n        'Upsilon',\n        'Omega',\n        'Theta',\n        'Pi',\n        'Phi',\n    ];\n}\n",
        "html": "<template>\n        <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n            <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n                Buttons with custom <code>onclick</code> handlers.\n            </h2>\n            <div class=\"slds-card\">\n                <div class=\"slds-m-around_medium\">\n                    <p class=\"slds-text-heading_x-small slds-m-bottom_medium\">\n                        This button's handler toggles the icon used on the button and visibility of a content block. </p>\n                    <!-- Toggle visibility of a content block when clicked -->\n                    <lightning-button label={toggleButtonLabel} title=\"Toggle content action\" icon-name={toggleIconName}\n                        onclick={handleToggleClick}>\n                    </lightning-button>\n                </div>\n                <div class=\"slds-m-vertical_large slds-m-around_medium lgc-id_content-toggle\">\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n                    dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip\n                    ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\n                    fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n                    deserunt mollit anim id est laborum.\n                </div>\n            </div>\n            <div class=\"slds-card\">\n                <div class=\"slds-m-around_medium\">\n                    <p class=\"slds-text-heading_x-small slds-m-top_medium slds-m-bottom_large\">\n                        This button's handler generates random content.</p>\n\n                    <!-- Generate random content when clicked -->\n                    <lightning-button label=\"Random greek letter\" title=\"Random greek letter action\"\n                        icon-name=\"utility:refresh\" onclick={handleRandomClick} class=\"slds-m-left_x-small\">\n                    </lightning-button>\n                    <div class=\"slds-m-vertical_large slds-p-vertical_medium slds-border_top slds-border_bottom\">\n                        Random greek letter: <span class=\"slds-text-heading_small\">{greekLetter}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonWithIcon extends LightningElement {}\n",
        "html": "<template>\n        <div class=\"slds-m-top_small slds-m-bottom_medium\">\n            <h2 class=\"slds-text-heading_small slds-m-bottom_small\">\n                Buttons with an icon before the label text, the default location.\n            </h2>\n                <p class=\"slds-m-bottom_medium\">\n                    <code>icon-position</code> attribute is omitted to use the default value of <code>left</code>.\n                </p>\n\n            <!-- Base variant: Makes a button look like a link -->\n            <lightning-button variant=\"base\" label=\"Download\" title=\"Download action with base variant\" icon-name=\"utility:download\" class=\"slds-m-left_x-small\"></lightning-button>\n\n            <!-- Neutral variant (default) -->\n            <lightning-button label=\"Download\" title=\"Download action\" icon-name=\"utility:download\" class=\"slds-m-left_x-small\"></lightning-button>\n\n            <!-- Brand variant: Identifies the primary action in a group of buttons -->\n            <lightning-button variant=\"brand\" label=\"Download\" title=\"Download action with brand variant\" icon-name=\"utility:download\" class=\"slds-m-left_x-small\"></lightning-button>\n\n            <!-- Destructive variant: Identifies a potentially negative action -->\n            <lightning-button variant=\"destructive\" label=\"Delete\" title=\"Delete action with destructive variant\" icon-name=\"utility:delete\" class=\"slds-m-left_x-small\"></lightning-button>\n        </div>\n\n        <div class=\"slds-m-top_x-large slds-m-bottom_small\">\n                <h2 class=\"slds-text-heading_small slds-m-bottom_small\">\n                  Buttons with an icon after the label text.\n                 </h2>\n                 <p class=\"slds-m-bottom_medium\">\n                     <code>icon-position</code> attribute has a value of <code>right</code>.\n                 </p>\n\n                <!-- Base variant: Makes a button look like a link -->\n                <lightning-button variant=\"base\" label=\"Download\" title=\"Download action\" icon-name=\"utility:download\" icon-position=\"right\" class=\"slds-m-left_x-small\"></lightning-button>\n\n                <!-- Neutral variant (default) -->\n                <lightning-button label=\"Download\" title=\"Download action\" icon-name=\"utility:download\" icon-position=\"right\" class=\"slds-m-left_x-small\"></lightning-button>\n\n                <!-- Brand variant: Identifies the primary action in a group of buttons -->\n                <lightning-button variant=\"brand\" label=\"Download\" title=\"Download action\" icon-name=\"utility:download\" icon-position=\"right\" class=\"slds-m-left_x-small\"></lightning-button>\n\n                <!-- Destructive variant: Identifies a potentially negative action -->\n                <lightning-button variant=\"destructive\" label=\"Delete\" title=\"Delete action\" icon-name=\"utility:delete\" icon-position=\"right\" class=\"slds-m-left_x-small\"></lightning-button>\n            </div>\n    </template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-button-group",
    "shortDescription": "This component is a set of buttons displayed together to create a navigational bar, providing an interactive user experience with options for simple buttons, buttons with icons, disabled buttons, inverse buttons, and dropdown menus.",
    "relatedComponents": {
      "lightning-button": "required",
      "lightning-button-icon": "optional",
      "lightning-button-icon-stateful": "optional",
      "lightning-button-menu": "optional",
      "lightning-button-stateful": "optional",
      "lightning-tabset": "optional",
      "lightning-navigation": "optional"
    },
    "publicApi": [
      {
        "name": "onclick",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-button-group onclick={handleClick}>"]
      }
    ],
    "useCases": [
      "In a music streaming application, a <lightning-button-group> could be used to create a set of buttons for user controls. For example, there could be buttons for 'Play', 'Pause', 'Next', and 'Previous'. Each button would perform a different action when clicked, allowing the user to control their music playback.",
      "In a web-based email client, a <lightning-button-group> could be used to create a set of buttons for email management. For instance, there could be buttons for 'Compose', 'Reply', 'Forward', 'Delete', and 'Mark as Read'. Each button would perform a different action when clicked, providing the user with a range of options for managing their emails.",
      "In an online shopping platform, a <lightning-button-group> could be used to create a set of buttons for product sorting. For example, there could be buttons for 'Sort by Price', 'Sort by Popularity', and 'Sort by Rating'. Each button would perform a different action when clicked, allowing the user to sort the products according to their preference.",
      "In a web-based document editor, a <lightning-button-group> could be used to create a set of buttons for text formatting. For instance, there could be buttons for 'Bold', 'Italic', 'Underline', and 'Strikethrough'. Each button would perform a different action when clicked, providing the user with a range of options for formatting their text.",
      "In a web-based photo editor, a <lightning-button-group> could be used to create a set of buttons for photo editing. For example, there could be buttons for 'Crop', 'Rotate', 'Adjust Brightness', and 'Adjust Contrast'. Each button would perform a different action when clicked, allowing the user to edit their photos according to their preference.",
      "In a web-based project management tool, a <lightning-button-group> could be used to create a set of buttons for task management. For instance, there could be buttons for 'Add Task', 'Edit Task', 'Delete Task', and 'Mark as Complete'. Each button would perform a different action when clicked, providing the user with a range of options for managing their tasks."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Button Groups\n      description: Several button groups demonstrating default simple buttons, buttons with icons and variants, and a diverse set of button types contained in a single button group.\n    - name: disabled\n      label: Button Groups with Disabled Buttons\n      description: Button groups containing disabled buttons, which are grayed out and can't be clicked. Buttons are disabled individually.\n    - name: inverse\n      label: Button Groups with Inverse Buttons\n      description: Group of buttons that set the inverse variant, which displays with a dark background. The variant is set on each button.\n    - name: withMenu\n      label: Button Group with a Dropdown Menu\n      description: This button group includes a lightning-button-menu as the last button, to provide a dropdown menu.\n    - name: withMenuDisabled\n      label: Button Group with a Disabled Dropdown Menu\n      description: This button group's dropdown menu is disabled and can't be clicked.\n---\n\nA `lightning-button-group` component represents a set of buttons that can be displayed together to create a navigational bar. The body of the component can contain one or more of the following components:\n\n-   `lightning-button`\n-   `lightning-button-icon`\n-   `lightning-button-icon-stateful`\n-   `lightning-button-menu`\n-   `lightning-button-stateful`.\n\nIf navigational tabs are needed, use `lightning-tabset` instead of `lightning-button-group`.\n\nSet `variant=\"border-filled\"` on `lightning-button-menu` for a white button background. Otherwise, the `lightning-button-menu` background is transparent by default.\n\nTo create buttons, use the `lightning-button` component as shown in this example.\n\n```html\n<template>\n    <lightning-button-group>\n        <lightning-button label=\"Alpha\"></lightning-button>\n        <lightning-button label=\"Beta\"></lightning-button>\n        <lightning-button label=\"Gamma\"></lightning-button>\n    </lightning-button-group>\n</template>\n```\n\nHandle clicks using the `onclick` handler.\n\n```html\n<lightning-button-group>\n    <lightning-button label=\"Edit\" onclick={handleClick}></lightning-button>\n    <lightning-button label=\"View\" onclick={handleClick}></lightning-button>\n</lightning-button-group>\n```\n\nIn your JavaScript code, use the `event.target` property to retrieve the clicked button.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class DemoApp extends LightningElement {\n    handleClick(event) {\n        const buttonLabel = event.target.label;\n        //  Handle clicks\n    }\n}\n```\n\nTo handle navigation within Lightning Experience and the Salesforce app, use the `lightning-navigation` component.\n\n#### Component Styling\n\n`lightning-button-group` implements the [button groups](https://www.lightningdesignsystem.com/components/button-groups/) blueprint in the Salesforce Lightning Design System (SLDS).\n\nTo apply additional styling, use SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nYou can customize the `lightning-button-*` base components you use within `lightning-button-group` using SLDS styling hooks. For more information, see the corresponding base component documentation.\n\n#### See Also\n\n[lightning-navigation](bundle/lightning-navigation/documentation)\n\n[Navigate to Pages](https://developer.salesforce.com/docs/platform/lwc/guide/use-navigate)\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonGroupBasic extends LightningElement {\n    buttonStatefulState = false;\n    buttonIconStatefulState = false;\n\n    handleButtonStatefulClick() {\n        this.buttonStatefulState = !this.buttonStatefulState;\n    }\n\n    handleButtonIconStatefulClick() {\n        this.buttonIconStatefulState = !this.buttonIconStatefulState;\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button group using simple buttons.\n        </h2>\n\n        <!-- Button group: simple buttons -->\n        <lightning-button-group>\n            <lightning-button label=\"Refresh\"></lightning-button>\n            <lightning-button label=\"Edit\"></lightning-button>\n            <lightning-button label=\"Save\"></lightning-button>\n        </lightning-button-group>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button group using several button variations.\n        </h2>\n\n        <!-- Button group: simple buttons -->\n        <lightning-button-group>\n            <lightning-button label=\"Refresh\"></lightning-button>\n            <lightning-button label=\"Edit\"></lightning-button>\n            <lightning-button label=\"Save\" icon-name=\"utility:save\"></lightning-button>\n            <lightning-button label=\"Delete\" variant=\"destructive\" icon-name=\"utility:delete\"></lightning-button>\n        </lightning-button-group>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button group using several button types (standard, icon, stateful, icon-stateful, menu).\n        </h2>\n\n        <!-- Button group: simple buttons -->\n        <lightning-button-group>\n            <lightning-button label=\"Refresh\"></lightning-button>\n            <lightning-button label=\"Edit\"></lightning-button>\n            <lightning-button label=\"Save\" icon-name=\"utility:save\"></lightning-button>\n            <lightning-button-icon icon-name=\"utility:delete\" variant=\"border-filled\" alternative-text=\"Delete\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:settings\" variant=\"border-filled\" alternative-text=\"Settings\"></lightning-button-icon>\n            <lightning-button-stateful\n                selected={buttonStatefulState}\n                label-when-off=\"Follow\"\n                label-when-on=\"Following\"\n                label-when-hover=\"Unfollow\"\n                icon-name-when-off=\"utility:add\"\n                icon-name-when-on=\"utility:check\"\n                icon-name-when-hover=\"utility:close\"\n                onclick={handleButtonStatefulClick}\n            ></lightning-button-stateful>\n            <lightning-button-icon-stateful\n                icon-name=\"utility:like\"\n                selected={buttonIconStatefulState}\n                alternative-text=\"Like\"\n                onclick={handleButtonIconStatefulClick}>\n            </lightning-button-icon-stateful>\n            <lightning-button-menu alternative-text=\"Show menu\">\n                <lightning-menu-item label=\"Menu Item One\" value=\"item1\"></lightning-menu-item>\n                <lightning-menu-item label=\"Menu Item Two\" value=\"item2\"></lightning-menu-item>\n                <lightning-menu-item label=\"Menu Item Three\" value=\"item3\"></lightning-menu-item>\n            </lightning-button-menu>\n        </lightning-button-group>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonGroupDisabled extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button group with simple disabled buttons.\n        </h2>\n\n        <!-- Button group: simple buttons -->\n        <lightning-button-group>\n            <lightning-button label=\"Refresh\" disabled></lightning-button>\n            <lightning-button label=\"Edit\" disabled></lightning-button>\n            <lightning-button label=\"Save\" disabled></lightning-button>\n        </lightning-button-group>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button group with several disabled button variations.\n        </h2>\n\n        <!-- Button group: simple buttons -->\n        <lightning-button-group>\n            <lightning-button label=\"Refresh\" disabled></lightning-button>\n            <lightning-button label=\"Edit\" disabled></lightning-button>\n            <lightning-button label=\"Save\" icon-name=\"utility:save\" disabled></lightning-button>\n            <lightning-button label=\"Delete\" variant=\"destructive\" icon-name=\"utility:delete\" disabled></lightning-button>\n        </lightning-button-group>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonGroupInverse extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button group inverse variant with simple buttons.\n        </h2>\n\n        <div class=\"slds-p-around_medium lgc-bg-inverse\">\n            <!-- Button group: simple buttons -->\n            <lightning-button-group>\n                <lightning-button label=\"Refresh\" variant=\"inverse\"></lightning-button>\n                <lightning-button label=\"Edit\" variant=\"inverse\"></lightning-button>\n                <lightning-button label=\"Save\" variant=\"inverse\"></lightning-button>\n            </lightning-button-group>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button group inverse variant with several button variations.\n        </h2>\n\n        <div class=\"slds-p-around_medium lgc-bg-inverse\">\n            <!-- Button group: button variations -->\n            <lightning-button-group>\n                <lightning-button label=\"Refresh\" variant=\"inverse\"></lightning-button>\n                <lightning-button label=\"Edit\" variant=\"inverse\"></lightning-button>\n                <lightning-button label=\"Save\" icon-name=\"utility:save\" variant=\"inverse\"></lightning-button>\n                <lightning-button label=\"Delete\" icon-name=\"utility:delete\" variant=\"inverse\"></lightning-button>\n            </lightning-button-group>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonGroupWithMenu extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button group using simple buttons and a <em>buttonMenu</em>.\n        </h2>\n\n        <!-- Button group: simple buttons and a button-menu -->\n        <lightning-button-group>\n            <lightning-button label=\"Refresh\"></lightning-button>\n            <lightning-button label=\"Edit\"></lightning-button>\n            <lightning-button label=\"Save\" icon-name=\"utility:save\"></lightning-button>\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\">\n                <lightning-menu-item label=\"Menu Item One\" value=\"item1\"></lightning-menu-item>\n                <lightning-menu-item label=\"Menu Item Two\" value=\"item2\"></lightning-menu-item>\n                <lightning-menu-item label=\"Menu Item Three\" value=\"item3\"></lightning-menu-item>\n            </lightning-button-menu>\n        </lightning-button-group>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonGroupWithMenuDisabled extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button group using simple buttons and a disabled <em>buttonMenu</em>.\n        </h2>\n\n        <!-- Button group: simple buttons and a button-menu -->\n        <lightning-button-group>\n            <lightning-button label=\"Refresh\"></lightning-button>\n            <lightning-button label=\"Edit\"></lightning-button>\n            <lightning-button label=\"Save\" icon-name=\"utility:save\"></lightning-button>\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" disabled>\n                <lightning-menu-item label=\"Menu Item One\" value=\"item1\"></lightning-menu-item>\n                <lightning-menu-item label=\"Menu Item Two\" value=\"item2\"></lightning-menu-item>\n                <lightning-menu-item label=\"Menu Item Three\" value=\"item3\"></lightning-menu-item>\n            </lightning-button-menu>\n        </lightning-button-group>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-button-icon",
    "shortDescription": "This component is an icon-only button that executes an action when clicked, providing a customizable user experience with options for different sizes, styles, and icons, and ensuring accessibility with features like hover text and assistive text.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "icon-name",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-icon icon-name='utility:close'>",
          "<lightning-button-icon icon-name='utility:settings'>",
          "<lightning-button-icon icon-name='utility:zoomin'>"
        ]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-icon variant='bare'>",
          "<lightning-button-icon variant='bare-inverse'>",
          "<lightning-button-icon variant='border'>"
        ]
      },
      {
        "name": "size",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-icon size='medium'>",
          "<lightning-button-icon size='small'>",
          "<lightning-button-icon size='x-small'>"
        ]
      },
      {
        "name": "icon-class",
        "typeSignature": "string",
        "examples": ["<lightning-button-icon icon-class='slds-m-around_medium'>"]
      },
      {
        "name": "alternative-text",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-icon alternative-text='Close window'>",
          "<lightning-button-icon alternative-text='Settings'>",
          "<lightning-button-icon alternative-text='Zoom in'>"
        ]
      },
      {
        "name": "onclick",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-button-icon onclick={handleClick}>"]
      },
      {
        "name": "title",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-icon title='Zoom in'>",
          "<lightning-button-icon title='Zoom out'>",
          "<lightning-button-icon title='Settings'>"
        ]
      },
      {
        "name": "tooltip",
        "typeSignature": "string",
        "examples": ["<lightning-button-icon tooltip='Display your account settings'>"]
      },
      {
        "name": "aria-label",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-icon aria-label='Zoom in'>",
          "<lightning-button-icon aria-label='Zoom out'>",
          "<lightning-button-icon aria-label='Settings'>"
        ]
      },
      {
        "name": "aria-expanded",
        "typeSignature": "boolean",
        "examples": ["<lightning-button-icon aria-expanded={isExpanded}>"]
      },
      {
        "name": "aria-haspopup",
        "typeSignature": "string",
        "examples": ["<lightning-button-icon aria-haspopup='true'>"]
      },
      {
        "name": "aria-live",
        "typeSignature": "string",
        "examples": ["<lightning-button-icon aria-live='polite'>", "<lightning-button-icon aria-live='assertive'>"]
      },
      {
        "name": "tabindex",
        "typeSignature": "integer",
        "examples": ["<lightning-button-icon tabindex={tabIndexValue}>"]
      }
    ],
    "useCases": [
      "Imagine you're using a web application to manage your emails. At the top of the screen, there's a toolbar with several small buttons. One of these buttons, represented by a trash can icon, allows you to delete the currently selected email when clicked. This button is an example of a <lightning-button-icon> component.",
      "Consider a music streaming application. On the screen displaying the currently playing song, there's a small button with a heart icon. When you click this button, the song is added to your list of favorites. This button, which performs an action when clicked and is represented by an icon, is a <lightning-button-icon> component.",
      "Imagine you're using a web application to edit a document. There's a toolbar at the top of the screen with several small buttons. One of these buttons, represented by a floppy disk icon, allows you to save your changes when clicked. This button is an example of a <lightning-button-icon> component.",
      "Consider a photo editing application. On the screen where you edit a photo, there's a small button with a magnifying glass icon. When you click this button, the photo is zoomed in. This button, which performs an action when clicked and is represented by an icon, is a <lightning-button-icon> component.",
      "Imagine you're using a web application to manage your calendar. At the top of the screen, there's a toolbar with several small buttons. One of these buttons, represented by a plus sign icon, allows you to add a new event when clicked. This button is an example of a <lightning-button-icon> component.",
      "Consider a social media application. On the screen displaying a post, there's a small button with a thumbs up icon. When you click this button, you 'like' the post. This button, which performs an action when clicked and is represented by an icon, is a <lightning-button-icon> component."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Button Icon Variants\n      description: Button icons with multiple variants.\n    - name: sizes\n      label: Button Icon Sizes\n      description: Button icons with multiple sizes.\n    - name: inverse\n      label: Button Icons with Inverse Variants\n      description: Button icons with two types of inverse variants to display on a dark background.\n---\n\nA `lightning-button-icon` component represents an icon-only button element that\nexecutes an action in a controller. Clicking the button triggers the JavaScript\nmethod set for `onclick`.\n\nHere is an example.\n\n```html\n<template>\n    <lightning-button-icon\n        icon-name=\"utility:close\"\n        variant=\"bare\"\n        onclick={handleClick}\n        alternative-text=\"Close window\"\n    >\n    </lightning-button-icon>\n</template>\n```\n\n#### Component Styling\n\n`lightning-button-icon` implements the\n[button icons](https://www.lightningdesignsystem.com/components/button-icons/) blueprint in the Salesforce Lightning Design System (SLDS).\n\nYou can use a combination of the `icon-class`, `size`, and `variant`\nattributes to customize the button and icon styles.\n\nTo customize styling on the icon element, use the\n`icon-class` attribute. This example creates an icon-only button with bare\nvariant and icon styling. Only SLDS utility classes are currently supported with `icon-class`.\n\n```html\n<lightning-button-icon\n    icon-name=\"utility:settings\"\n    variant=\"bare\"\n    alternative-text=\"Settings\"\n    icon-class=\"slds-m-around_medium\"\n>\n</lightning-button-icon>\n```\n\n##### Icons\n\nUse the `icon-name` attribute to add a utility icon to the button.\n\nThe SLDS utility icon category offers nearly 200 utility\nicons that can be used in `lightning-button-icon`. Although SLDS provides several categories of icons, only the utility category can be used in `lightning-button-icon`.\n\nVisit [utility icons](https://lightningdesignsystem.com/icons/#utility) to view the utility icons.\n\nWhen applying SLDS classes or icons, check that they are\navailable in the SLDS release tied to your org. The latest\nSLDS resources become available only when the new release\nis available in your org.\n\n##### Variants\n\nUse the `variant` attribute with one of these values to apply styling.\n\n-   `bare` displays an icon without a container or border\n-   `bare-inverse` displays an icon in white color without a container or border, useful for dark backgrounds\n-   `border` is the default variant, an icon in a transparent container with a border\n-   `border-filled` displays an icon in a filled container with a border\n-   `border-inverse` displays an icon in a transparent container with a border, useful for dark backgrounds\n-   `brand` displays an icon in white color in a blue container with a blue border\n-   `container` displays an icon in a transparent container without a border\n\nFor the `bare` and `bare-inverse` variants, the `size` class applies to the icon itself. For all other variants, the `size` class applies to the button.\n\n##### Sizes\n\nAdjust the button and icon sizes using the `size` attribute with one of these values.\n\nFor `bare` and `bare-inverse` variants:\n\n-   `medium` is the default size, which creates a 14px by 14px icon\n-   `small` creates a 12px by 12px icon\n-   `x-small` creates a 8px by 8px icon\n-   `large` creates a 24px by 24px icon\n\nFor other variants:\n\n-   `medium` is the default size, which creates a 32px by 32px button enclosing a 14px by 14px icon.\n-   `small` creates a 24px by 24px button enclosing a 14px by 14px icon\n-   `x-small` creates a 20px by 20px button enclosing a 12px by 12px icon\n-   `xx-small` creates a 16px by 16px button enclosing a 8px by 8px icon\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds a margin to the left of the second button using the `slds-m-left_xx-small` class.\n\n```html\n<lightning-button-icon\n    icon-name=\"utility:zoomin\"\n    alternative-text=\"Zoom in\"\n    title=\"Zoom in\"\n></lightning-button-icon>\n<lightning-button-icon\n    icon-name=\"utility:zoomout\"\n    alternative-text=\"Zoom out\"\n    title=\"Zoom out\"\n    class=\"slds-m-left_xx-small\"\n></lightning-button-icon>\n```\n\nTo apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n```html\n<lightning-button-icon\n    icon-name=\"utility:zoomin\"\n    alternative-text=\"Zoom in\"\n    title=\"Zoom in\"\n    class=\"my-round-button\"\n></lightning-button-icon>\n```\n\nUse SLDS styling hooks to customize the component's styles. For example, specify the border radius using the `--slds-c-button-radius-border` custom property.\n\n```css\n.my-round-button {\n    --slds-c-button-radius-border: 20px;\n}\n```\n\n`lightning-button-icon` contains the same customizable elements as `lightning-button`, which supports `--slds-c-button-*` custom properties.\n\nCustom properties for button icons work only with particular `lightning-button` variants.\n\n| CSS Custom Property               | `lightning-button-icon` Variants                             |\n| --------------------------------- | ------------------------------------------------------------ |\n| `--slds-c-button-color-background` | `border` (default), `bare`, `bare-inverse`, and `container`  |\n| `--slds-c-button-color-border`     | `bare`, `bare-inverse`, and `container`                      |\n| `--slds-c-button-text-color`       | N/A                                                          |\n| `--slds-c-button-text-color-*`     | `border` (default), `bare`, `container`, and `border-filled` |\n| `--slds-c-button-radius-border`    | all                                                          |\n| `--slds-c-button-sizing-border`    | `bare`, `bare-inverse`, `border-inverse` and `container`     |\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/buttons/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\nTo understand how we implemented SLDS in `lightning-button-icon`, see the **Source Code** section.\n\n#### Usage Considerations\n\nIcons are not available in Lightning Out, but they are available in Lightning Components for Visualforce and other experiences.\n\n#### Accessibility\n\n`lightning-button-icon` contains an informational icon, which conveys information that surrounding text doesn't.\nFor each icon, provide assistive text that describes the button's action.\n\nUse the `alternative-text` attribute to describe the icon. The description should indicate what happens when you click the button, for example 'Upload File', not what the icon looks like, 'Paperclip'.\n\nThe description you provide to `alternative-text` is available to users in two ways.\n\n-   As hover text when you hover over the button\n-   As hidden text for assistive technologies\n\nTo override the hover text provided by `alternative-text`, use the `title` attribute, which corresponds to the native browser tooltip.\nThe description you provide to `title` displays when you hover over the button. To support touch-only devices, keyboard navigation, and assistive technologies, use `title` together with `label` or `alternative-text`.\n\nTo display a contextual popup on the button, use the `tooltip` attribute.\nThe popup becomes visible when you hover over the button, or after the button receives keyboard focus. Showing the popup on hover or on keyboard focus ensures that all users can access it, even if they aren’t using a mouse. The button is rendered with `aria-describedby`, linking it to the ID of the popup, which helps assistive technology read the popup content.\n\nIf you use both `title` and `tooltip` attributes, they are both visible when you hover over the button. Some screen readers don’t support the `title` attribute and many of them don’t read the `title` attribute by default.\n\n```html\n<lightning-button-icon\n    icon-name=\"utility:settings\"\n    title=\"Settings\"\n    tooltip=\"Display your account settings\"\n    alternative-text=\"Hidden text for assistive technology\"\n>\n</lightning-button-icon>\n```\n\nFor sighted users, make sure your description on `title` and `tooltip` are not repetitive. We recommend providing detailed information to `tooltip` and make `title` more concise if you use both.\n\nButtons that display an icon instead of text do not have an accessible name. To provide an accessible name in `lightning-button-icon`, use the `aria-label` attribute. If there is visible text labeling the element, use `aria-labelled-by` instead.\n\nUse the following accessibility and `aria` attributes on `lightning-button-icon`.\n\n| Attribute        | Type              | Description                                                                                                                                                                                                                                                                                                                                          |\n| ---------------- | ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| accesskey        | string            | A shortcut key to activate or place focus on the button.                                                                                                                                                                                                                                                                                             |\n| aria-atomic      | boolean           | Specifies whether the screen reader should always present the live region as a whole, even if only part of the region changes. The default is `false`.                                                                                                                                                                                               |\n| aria-controls    | ID reference list | An element ID or a space-separated list of element IDs whose presence or content is controlled by this button.                                                                                                                                                                                                                                       |\n| aria-describedby | ID reference list | An element ID or a space-separated list of element IDs that provide descriptive labels for the button.                                                                                                                                                                                                                                               |\n| aria-expanded    | boolean           | Indicates whether a collapsible element that's controlled by the button is expanded or collapsed. To reference the controlled element, use `aria-controls`.                                                                                                                                                                                          |\n| aria-haspopup    | token             | Indicates that the button has an interactive popup element. Valid values are 'true', 'dialog', 'menu', 'listbox', 'tree', and 'grid'. To create a button that displays a list of menu items when clicked, use `lightning-button-menu` instead.                                                                                                       |\n| aria-label       | string            | Provides an assistive label where a visible label cannot be used.                                                                                                                                                                                                                                                                                    |\n| aria-live        | token             | Indicates the button can dynamically update without a page reload, and specifies how the change is announced by assistive technologies. Possible values include `off`, `polite`, and `assertive`. The default is `off`. For the screen reader to announce changes when the user is idle, use `polite`. For immediate notifications, use `assertive`. |\n| tabindex         | integer           | Specifies whether the button is focusable during tab navigation. Set tab index to -1 to prevent focus on the button during tab navigation. The default value is 0, which makes the button focusable during tab navigation. For more information, see [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex).       |\n\nFor more information, see the [WAI-ARIA Specification](https://www.w3.org/TR/wai-aria/).\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonIconBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button-icons with the <code>variant</code> attribute omitted or set to the default value of <code>border</code>.\n        </h2>\n        <!-- with border / by default -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-icon icon-name=\"utility:settings\"  alternative-text=\"Settings\" title=\"Settings\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:adduser\"   alternative-text=\"Add user\" class=\"slds-m-left_xx-small\" title=\"Add user\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:delete\"    alternative-text=\"Delete\"   class=\"slds-m-left_xx-small\" title=\"Delete\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:save\"      alternative-text=\"Save\"     class=\"slds-m-left_xx-small\" title=\"Save\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:bookmark\"  alternative-text=\"Bookmark\" class=\"slds-m-left_xx-small\" title=\"Bookmark\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:zoomin\"    alternative-text=\"Zoom in\"  class=\"slds-m-left_xx-small\" title=\"Zoom in\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:zoomout\"   alternative-text=\"Zoom out\" class=\"slds-m-left_xx-small\" title=\"Zoom out\"></lightning-button-icon>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button-icons with the <code>variant</code> attribute set to <code>bare</code>.\n        </h2>\n\n        <!-- bare -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-icon icon-name=\"utility:settings\"  variant=\"bare\" alternative-text=\"Settings\" title=\"Settings\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:adduser\"   variant=\"bare\" alternative-text=\"Add user\" class=\"slds-m-left_xx-small\" title=\"Add user\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:delete\"    variant=\"bare\" alternative-text=\"Delete\"   class=\"slds-m-left_xx-small\" title=\"Delete\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:save\"      variant=\"bare\" alternative-text=\"Save\"     class=\"slds-m-left_xx-small\" title=\"Save\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:bookmark\"  variant=\"bare\" alternative-text=\"Bookmark\" class=\"slds-m-left_xx-small\" title=\"Bookmark\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:zoomin\"    variant=\"bare\" alternative-text=\"Zoom in\"  class=\"slds-m-left_xx-small\" title=\"Zoom in\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:zoomout\"   variant=\"bare\" alternative-text=\"Zoom out\" class=\"slds-m-left_xx-small\" title=\"Zoom out\"></lightning-button-icon>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n            <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n                Button-icons with the <code>variant</code> attribute set to <code>brand</code>.\n            </h2>\n    \n            <!-- bare -->\n            <div class=\"slds-p-around_medium lgc-bg\">\n                <lightning-button-icon icon-name=\"utility:settings\"  variant=\"brand\" alternative-text=\"Settings\"></lightning-button-icon>\n                <lightning-button-icon icon-name=\"utility:adduser\"   variant=\"brand\" alternative-text=\"Add user\" class=\"slds-m-left_xx-small\" title=\"Add user\"></lightning-button-icon>\n                <lightning-button-icon icon-name=\"utility:delete\"    variant=\"brand\" alternative-text=\"Delete\"   class=\"slds-m-left_xx-small\" title=\"Delete\"></lightning-button-icon>\n                <lightning-button-icon icon-name=\"utility:save\"      variant=\"brand\" alternative-text=\"Save\"     class=\"slds-m-left_xx-small\" title=\"Save\"></lightning-button-icon>\n                <lightning-button-icon icon-name=\"utility:bookmark\"  variant=\"brand\" alternative-text=\"Bookmark\" class=\"slds-m-left_xx-small\" title=\"Bookmark\"></lightning-button-icon>\n                <lightning-button-icon icon-name=\"utility:zoomin\"    variant=\"brand\" alternative-text=\"Zoom in\"  class=\"slds-m-left_xx-small\" title=\"Zoom in\"></lightning-button-icon>\n                <lightning-button-icon icon-name=\"utility:zoomout\"   variant=\"brand\" alternative-text=\"Zoom out\" class=\"slds-m-left_xx-small\" title=\"Zoom out\"></lightning-button-icon>\n            </div>\n        </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button-icons with the <code>variant</code> attribute set to <code>container</code>.\n        </h2>\n\n        <!-- with container -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-icon icon-name=\"utility:settings\"  variant=\"container\" alternative-text=\"Settings\" title=\"Settings\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:adduser\"   variant=\"container\" alternative-text=\"Add user\" class=\"slds-m-left_xx-small\" title=\"Add user\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:delete\"    variant=\"container\" alternative-text=\"Delete\"   class=\"slds-m-left_xx-small\" title=\"Delete\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:save\"      variant=\"container\" alternative-text=\"Save\"     class=\"slds-m-left_xx-small\" title=\"Save\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:bookmark\"  variant=\"container\" alternative-text=\"Bookmark\" class=\"slds-m-left_xx-small\" title=\"Bookmark\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:zoomin\"    variant=\"container\" alternative-text=\"Zoom in\"  class=\"slds-m-left_xx-small\" title=\"Zoom in\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:zoomout\"   variant=\"container\" alternative-text=\"Zoom out\" class=\"slds-m-left_xx-small\" title=\"Zoom out\"></lightning-button-icon>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button-icons with the <code>variant</code> attribute set to <code>border-filled</code>.\n        </h2>\n\n        <!-- with border filled -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-icon icon-name=\"utility:settings\"  variant=\"border-filled\" alternative-text=\"Settings\" title=\"Settings\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:adduser\"   variant=\"border-filled\" alternative-text=\"Add user\" class=\"slds-m-left_xx-small\" title=\"Add user\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:delete\"    variant=\"border-filled\" alternative-text=\"Delete\"   class=\"slds-m-left_xx-small\" title=\"Delete\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:save\"      variant=\"border-filled\" alternative-text=\"Save\"     class=\"slds-m-left_xx-small\" title=\"Save\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:bookmark\"  variant=\"border-filled\" alternative-text=\"Bookmark\" class=\"slds-m-left_xx-small\" title=\"Bookmark\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:zoomin\"    variant=\"border-filled\" alternative-text=\"Zoom in\"  class=\"slds-m-left_xx-small\" title=\"Zoom in\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:zoomout\"   variant=\"border-filled\" alternative-text=\"Zoom out\" class=\"slds-m-left_xx-small\" title=\"Zoom out\"></lightning-button-icon>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonIconInverse extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button-icons with the <code>variant</code> attribute set to <code>border-inverse</code>.\n        </h2>\n        <!-- with border / by default -->\n        <div class=\"slds-p-around_medium lgc-bg-inverse\">\n            <lightning-button-icon icon-name=\"utility:settings\"  alternative-text=\"Settings\" variant=\"border-inverse\" title=\"Settings\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:adduser\"   alternative-text=\"Add user\" variant=\"border-inverse\" class=\"slds-m-left_xx-small\" title=\"Add user\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:delete\"    alternative-text=\"Delete\"   variant=\"border-inverse\" class=\"slds-m-left_xx-small\" title=\"Delete\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:save\"      alternative-text=\"Save\"     variant=\"border-inverse\" class=\"slds-m-left_xx-small\" title=\"Save\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:bookmark\"  alternative-text=\"Bookmark\" variant=\"border-inverse\" class=\"slds-m-left_xx-small\" title=\"Bookmark\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:zoomin\"    alternative-text=\"Zoom in\"  variant=\"border-inverse\" class=\"slds-m-left_xx-small\" title=\"Zoom in\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:zoomout\"   alternative-text=\"Zoom out\" variant=\"border-inverse\" class=\"slds-m-left_xx-small\" title=\"Zoom out\"></lightning-button-icon>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button-icons with the <code>variant</code> attribute set to <code>bare-inverse</code>.\n        </h2>\n        <!-- with border / by default -->\n        <div class=\"slds-p-around_medium lgc-bg-inverse\">\n            <lightning-button-icon icon-name=\"utility:settings\"  alternative-text=\"Settings\" variant=\"bare-inverse\" title=\"Settings\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:adduser\"   alternative-text=\"Add user\" variant=\"bare-inverse\" class=\"slds-m-left_xx-small\" title=\"Add user\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:delete\"    alternative-text=\"Delete\"   variant=\"bare-inverse\" class=\"slds-m-left_xx-small\" title=\"Delete\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:save\"      alternative-text=\"Save\"     variant=\"bare-inverse\" class=\"slds-m-left_xx-small\" title=\"Save\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:bookmark\"  alternative-text=\"Bookmark\" variant=\"bare-inverse\" class=\"slds-m-left_xx-small\" title=\"Bookmark\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:zoomin\"    alternative-text=\"Zoom in\"  variant=\"bare-inverse\" class=\"slds-m-left_xx-small\" title=\"Zoom in\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:zoomout\"   alternative-text=\"Zoom out\" variant=\"bare-inverse\" class=\"slds-m-left_xx-small\" title=\"Zoom out\"></lightning-button-icon>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonIconSizes extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button-icons with the <code>size</code> attribute set to a valid value (<code>xx-small, x-small, small, medium</code>).\n        </h2>\n\n        <!--Sizes -->\n        <div class=\"slds-p-around_medium\">\n            <lightning-button-icon icon-name=\"utility:down\"  size=\"xx-small\" alternative-text=\"View More\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:down\"  size=\"x-small\"  alternative-text=\"View More\" class=\"slds-m-left_xx-small\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:down\"  size=\"small\"    alternative-text=\"View More\" class=\"slds-m-left_xx-small\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:down\"  size=\"medium\"   alternative-text=\"View More\" class=\"slds-m-left_xx-small\"></lightning-button-icon>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button-icons with the <code>variant</code> attribute set to <code>bare</code> and the <code>size</code> attribute set to a valid value (<code>x-small, small, medium, large</code>).\n        </h2>\n\n        <div class=\"slds-p-around_medium\">\n            <lightning-button-icon icon-name=\"utility:down\"  size=\"x-small\"   variant=\"bare\" alternative-text=\"View More\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:down\"  size=\"small\"     variant=\"bare\" alternative-text=\"View More\" class=\"slds-m-left_xx-small\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:down\"  size=\"medium\"    variant=\"bare\" alternative-text=\"View More\" class=\"slds-m-left_xx-small\"></lightning-button-icon>\n            <lightning-button-icon icon-name=\"utility:down\"  size=\"large\"     variant=\"bare\" alternative-text=\"View More\" class=\"slds-m-left_xx-small\"></lightning-button-icon>\n        </div>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-button-icon-stateful",
    "shortDescription": "This component is an icon-only button that toggles between two states, providing an interactive user experience for tasks such as capturing customer feedback or toggling settings.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "icon-name",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-icon-stateful icon-name='utility:like'>",
          "<lightning-button-icon-stateful icon-name={iconName}>"
        ]
      },
      {
        "name": "selected",
        "typeSignature": "boolean",
        "examples": [
          "<lightning-button-icon-stateful selected={liked}>",
          "<lightning-button-icon-stateful selected={selectedState}>"
        ]
      },
      {
        "name": "alternative-text",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-icon-stateful alternative-text='Like'>",
          "<lightning-button-icon-stateful alternative-text={alternativeText}>"
        ]
      },
      {
        "name": "onclick",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": [
          "<lightning-button-icon-stateful onclick={handleToggle}>",
          "<lightning-button-icon-stateful onclick={handleClick}>"
        ]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-icon-stateful variant='border'>",
          "<lightning-button-icon-stateful variant='border-filled'>",
          "<lightning-button-icon-stateful variant='border-inverse'>"
        ]
      },
      {
        "name": "size",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-icon-stateful size='medium'>",
          "<lightning-button-icon-stateful size='small'>",
          "<lightning-button-icon-stateful size='x-small'>"
        ]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-icon-stateful class='slds-m-left_xx-small'>",
          "<lightning-button-icon-stateful class='my-brand'>"
        ]
      },
      {
        "name": "accesskey",
        "typeSignature": "string",
        "examples": ["<lightning-button-icon-stateful accesskey='a'>"]
      },
      {
        "name": "aria-atomic",
        "typeSignature": "boolean",
        "examples": ["<lightning-button-icon-stateful aria-atomic={true}>"]
      },
      {
        "name": "aria-controls",
        "typeSignature": "string",
        "examples": ["<lightning-button-icon-stateful aria-controls='elementId'>"]
      },
      {
        "name": "aria-describedby",
        "typeSignature": "string",
        "examples": ["<lightning-button-icon-stateful aria-describedby='descriptionId'>"]
      },
      {
        "name": "aria-expanded",
        "typeSignature": "boolean",
        "examples": ["<lightning-button-icon-stateful aria-expanded={true}>"]
      },
      {
        "name": "aria-label",
        "typeSignature": "string",
        "examples": ["<lightning-button-icon-stateful aria-label='Assistive Label'>"]
      },
      {
        "name": "aria-live",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-icon-stateful aria-live='off'>",
          "<lightning-button-icon-stateful aria-live='polite'>",
          "<lightning-button-icon-stateful aria-live='assertive'>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're browsing an online store and you see a product you like. There's a small heart icon next to the product. When you click on the heart, it fills in, indicating that you've added the product to your favorites. This is a scenario where the <lightning-button-icon-stateful> component might be used.",
      "Consider a music streaming app where you can like or dislike songs to customize your listening experience. Each song has a thumbs up and thumbs down icon. When you click the thumbs up, it turns green, indicating you've liked the song. This is another example of where the <lightning-button-icon-stateful> component could be used.",
      "Think about a social media platform where you can react to posts. Each post has a small icon of a hand making a thumbs up sign. When you click on the icon, it changes color, indicating that you've liked the post. This is a scenario where the <lightning-button-icon-stateful> component might be used.",
      "Imagine you're using a task management app. Each task has a small checkmark icon next to it. When you click on the checkmark, it fills in, indicating that you've completed the task. This is another example of where the <lightning-button-icon-stateful> component could be used.",
      "Consider an email platform where you can flag important emails. Each email has a small flag icon next to it. When you click on the flag, it turns red, indicating that you've flagged the email. This is a scenario where the <lightning-button-icon-stateful> component might be used.",
      "Think about a photo editing app where you can favorite certain filters. Each filter has a small star icon next to it. When you click on the star, it fills in, indicating that you've favorited the filter. This is another example of where the <lightning-button-icon-stateful> component could be used."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Stateful Button Icons\n      description: Stateful button icons can be toggled between states. They support multiple sizes and can be disabled.\n    - name: variants\n      label: Stateful Button Icons with Border Variants\n      description: Button icons using the two types of border variants.\n---\n\nA `lightning-button-icon-stateful` component represents an icon-only button\nelement that toggles between two states. For example, you can use this\ncomponent for capturing a customer's feedback on a blog post (like or\ndislike). Clicking the button triggers the handler set for `onclick` and changes the state of the icon using the `selected` attribute.\n\nThis example creates a Like button that toggles between two states. The Like button is selected by default. The button's state is stored in the `selected` attribute.\n\nSelecting the Dislike button also toggles the state on the Like button and deselects it.\n\n```html\n<template>\n    <lightning-button-icon-stateful\n        icon-name=\"utility:like\"\n        selected={liked}\n        alternative-text=\"Like\"\n        onclick={handleToggle}\n    >\n    </lightning-button-icon-stateful>\n</template>\n```\n\nHandle the `click` event in your JavaScript code.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class MyComponentName extends LightningElement {\n    liked = true;\n\n    handleToggle() {\n        this.liked = !this.liked;\n    }\n}\n```\n\n#### Component Styling\n\n`lightning-button-icon-stateful` implements the\n[button icons](https://www.lightningdesignsystem.com/components/button-icons/) blueprint in the Salesforce Lightning Design System (SLDS).\n\nYou can use a combination of the `variant` and `size` attributes to\ncustomize the button and icon styles.\n\n##### Icons\n\nUse the `icon-name` attribute to add a utility icon to the button.\n\nThe SLDS utility icon category offers nearly 200 utility\nicons that can be used in `lightning-button-icon-stateful`. Although the\nSLDS provides several categories of icons, only the utility\ncategory can be used with this component.\n\nVisit [utility icons](https://lightningdesignsystem.com/icons/#utility) in\nthe SLDS to view the utility icons.\n\nWhen applying SLDS classes or icons, check that they are\navailable in the SLDS release tied to your org. The latest\nSLDS resources become available only when the new release is available in your org.\n\n##### Variants\n\nUse the `variant` attribute with one of these values to apply styling.\n\n-   `border` is the default variant, an icon in a transparent container with a border\n-   `border-filled` displays an icon in a filled container with a border\n-   `border-inverse` displays an icon in a transparent container with a border, useful for dark backgrounds\n\n##### Sizes\n\nAdjust the button and icon sizes using the `size` attribute with one of these values.\n\n-   `medium` is the default size, which creates a 32px by 32px button enclosing a 14px by 14px icon.\n-   `small` creates a 24px by 24px button enclosing a 14px by 14px icon\n-   `x-small` creates a 20px by 20px button enclosing a 12px by 12px icon\n-   `xx-small` creates a 16px by 16px button enclosing a 8px by 8px icon\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds a margin to the left of the second button using an SLDS class.\n\n```html\n<lightning-button-icon-stateful\n    icon-name=\"utility:like\"\n    selected={likeState}\n    onclick={handleLikeButtonClick}\n    alternative-text=\"Like\"\n></lightning-button-icon-stateful>\n<lightning-button-icon-stateful\n    icon-name=\"utility:answer\"\n    selected={answerState}\n    onclick={handleAnswerButtonClick}\n    alternative-text=\"Answer\"\n    class=\"slds-m-left_xx-small\"\n></lightning-button-icon-stateful>\n```\n\nTo apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n```html\n<lightning-button-icon-stateful\n    icon-name=\"utility:like\"\n    selected={likeState}\n    onclick={handleLikeButtonClick}\n    alternative-text=\"Like\"\n    variant=\"border-inverse\"\n    class=\"my-brand\"\n></lightning-button-icon-stateful>\n```\n\nUse SLDS styling hooks to customize the component's styles. For example, specify the background color on the button using the `--slds-c-button-color-background` custom property.\n\n```css\n.my-brand {\n    --slds-c-button-color-background: purple;\n}\n```\n\n`lightning-button-icon-stateful` contains the same customizable elements as `lightning-button`, which supports `--slds-c-button-*` custom properties.\n\nCustom properties for stateful button icons work only with particular `lightning-button-icon-stateful` variants.\n\n| CSS Custom Property               | `lightning-button-icon-stateful` Variants |\n| --------------------------------- | ----------------------------------------- |\n| `--slds-c-button-color-background` | `border` (default) and `border-inverse`   |\n| `--slds-c-button-color-border`     | N/A                                       |\n| `--slds-c-button-text-color`       | N/A                                       |\n| `--slds-c-button-text-color-*`     | `border` (default) and `border-filled`    |\n| `--slds-c-button-radius-border`    | all                                       |\n| `--slds-c-button-sizing-border`    | N/A                                       |\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/buttons/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\nTo understand how we implemented SLDS in `lightning-button-icon-stateful`, see the **Source Code** section.\n\n#### Usage Considerations\n\nIcons are not available in Lightning Out, but they are available in Lightning Components for Visualforce and other experiences.\n\n#### Accessibility\n\n`lightning-button-icon-stateful` contains an informational icon, which conveys information that surrounding text doesn't. Each icon should be accompanied by either assistive text.\nWhen selected, the button renders with `aria-pressed=\"true\"`. When not selected, the button renders with `aria-pressed=\"false\"`.\nThe `aria-pressed` attribute enables screen readers to announce whether a button is pressed or not.\n\nUse the `alternative-text` attribute to describe the icon.\nThe description should indicate what happens when you click the button, for example 'Upload File', not what the icon looks like, 'Paperclip'.\n\nThe text is available to users in two ways.\n\n-   On the tooltip when you hover over the button\n-   As text for assistive technologies\n\nButtons that only show an icon to represent do not have an accessible name. For `lightning-button-icon-stateful`, provide the accessible name using the `aria-label` attribute.\n\nUse the following accessibility and `aria` attributes on `lightning-button-icon-stateful`.\n\n| Attribute        | Type              | Description                                                                                                                                                                                                                                                                                                                     |\n| ---------------- | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| accesskey        | string            | A shortcut key to activate or place focus on the button                                                                                                                                                                                                                                                                         |\n| aria-atomic      | boolean           | Specifies whether the screen reader should always present the live region as a whole, even if only part of the region changes. The default is `false`.                                                                                                                                                                          |\n| aria-controls    | ID reference list | An element ID or a space-separated list of element IDs whose presence or content is controlled by this button.                                                                                                                                                                                                                  |\n| aria-describedby | ID reference list | An element ID or a space-separated list of element IDs that provide a descriptive label or description for the button.                                                                                                                                                                                                          |\n| aria-expanded    | boolean           | Indicates whether the state of an element, controlled by the button, is expanded or collapsed. To reference the controlled element, use `aria-controls`.                                                                                                                                                                        |\n| aria-label       | string            | Provides an assistive label where a visible label cannot be used.                                                                                                                                                                                                                                                               |\n| aria-live        | string            | Indicates whether the button will be updated, and describes the types of updates assistive technologies will make. Possible values include `off`, `polite`, and `assertive`. The default is `off`. For the screen reader to announce changes when the user is idle, use `polite`. For immediate notifications, use `assertive`. |\n\nFor more information, see the [WAI-ARIA Specification](https://www.w3.org/TR/wai-aria/).\n",
    "examples": [
      {
        "js": "import { LightningElement, track } from 'lwc';\n\nexport default class ButtonIconStatefulBasic extends LightningElement {\n    @track likeState = false;\n    @track answerState = false;\n    @track likeStateSize01 = false;\n    @track likeStateSize02 = false;\n    @track likeStateSize03 = false;\n    @track likeStateSize04 = false;\n    @track likeStateDisabled = false;\n    @track answerStateDisabled = false;\n\n    handleLikeButtonClick() {\n        this.likeState = !this.likeState;\n    }\n\n    handleAnswerButtonClick() {\n        this.answerState = !this.answerState;\n    }\n\n    handleLikeButtonSizeClick(event) {\n        const buttonNumber = event.target.dataset.buttonNumber;\n\n        this[`likeStateSize${buttonNumber}`] =\n            !this[`likeStateSize${buttonNumber}`];\n    }\n\n    handleLikeButtonDisabledClick() {\n        this.likeStateDisabled = !this.likeStateDisabled;\n    }\n\n    handleAnswerButtonDisabledClick() {\n        this.answerStateDisabled = !this.answerStateDisabled;\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Click one of the example buttons below to activate the `onclick` handler and toggle the state of each button.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-icon-stateful icon-name=\"utility:like\" selected={likeState} onclick={handleLikeButtonClick} alternative-text=\"Like\"></lightning-button-icon-stateful>\n            <lightning-button-icon-stateful icon-name=\"utility:answer\" selected={answerState} onclick={handleAnswerButtonClick} alternative-text=\"Answer\" class=\"slds-m-left_xx-small\"></lightning-button-icon-stateful>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button-icon-statefuls with the <code>size</code> attribute set to a valid value (<code>xx-small, x-small, small, medium</code>).\n        </h2>\n\n        <!-- Sizes -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-icon-stateful icon-name=\"utility:like\" size=\"xx-small\" selected={likeStateSize01} onclick={handleLikeButtonSizeClick} alternative-text=\"Like\" data-button-number=\"01\"></lightning-button-icon-stateful>\n            <lightning-button-icon-stateful icon-name=\"utility:like\" size=\"x-small\" selected={likeStateSize02} onclick={handleLikeButtonSizeClick} alternative-text=\"Like\" class=\"slds-m-left_xx-small\" data-button-number=\"02\"></lightning-button-icon-stateful>\n            <lightning-button-icon-stateful icon-name=\"utility:like\" size=\"small\" selected={likeStateSize03} onclick={handleLikeButtonSizeClick} alternative-text=\"Like\" class=\"slds-m-left_xx-small\" data-button-number=\"03\"></lightning-button-icon-stateful>\n            <lightning-button-icon-stateful icon-name=\"utility:like\" size=\"medium\" selected={likeStateSize04} onclick={handleLikeButtonSizeClick} alternative-text=\"Like\" class=\"slds-m-left_xx-small\" data-button-number=\"04\"></lightning-button-icon-stateful>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button-icon-statefuls with the <code>disabled</code> attribute set.\n        </h2>\n\n        <!-- Disabled -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-icon-stateful icon-name=\"utility:like\" disabled selected={likeStateDisabled} onclick={handleLikeButtonDisabledClick} alternative-text=\"Like\"></lightning-button-icon-stateful>\n            <lightning-button-icon-stateful icon-name=\"utility:answer\" disabled selected={answerStateDisabled} onclick={handleAnswerButtonDisabledClick} alternative-text=\"Answer\" class=\"slds-m-left_xx-small\"></lightning-button-icon-stateful>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonIconStatefulVariants extends LightningElement {\n    likeStateInverse = false;\n    answerStateInverse = false;\n    likeStateFilled = false;\n    answerStateFilled = false;\n\n    handleLikeButtonInverseClick() {\n        this.likeStateInverse = !this.likeStateInverse;\n    }\n\n    handleAnswerButtonInverseClick() {\n        this.answerStateInverse = !this.answerStateInverse;\n    }\n\n    handleLikeButtonFilledClick() {\n        this.likeStateFilled = !this.likeStateFilled;\n    }\n\n    handleAnswerButtonFilledClick() {\n        this.answerStateFilled = !this.answerStateFilled;\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Button-icon-statefuls with the <code>variant</code> attribute set to <code>border-inverse</code>.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg-inverse\">\n            <lightning-button-icon-stateful icon-name=\"utility:like\" variant=\"border-inverse\" selected={likeStateInverse} onclick={handleLikeButtonInverseClick} alternative-text=\"Like\"></lightning-button-icon-stateful>\n            <lightning-button-icon-stateful icon-name=\"utility:answer\" variant=\"border-inverse\" selected={answerStateInverse} onclick={handleAnswerButtonInverseClick} alternative-text=\"Answer\" class=\"slds-m-left_xx-small\"></lightning-button-icon-stateful>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n                Button-icon-statefuls with the <code>variant</code> attribute set to <code>border-filled</code>.\n        </h2>\n\n        <!-- Disabled -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-icon-stateful icon-name=\"utility:like\" variant=\"border-filled\" selected={likeStateFilled} onclick={handleLikeButtonFilledClick} alternative-text=\"Like\"></lightning-button-icon-stateful>\n            <lightning-button-icon-stateful icon-name=\"utility:answer\" variant=\"border-filled\" selected={answerStateFilled} onclick={handleAnswerButtonFilledClick} alternative-text=\"Answer\" class=\"slds-m-left_xx-small\"></lightning-button-icon-stateful>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-button-menu",
    "shortDescription": "This component is a button that displays a dropdown menu of actions or functions when clicked, providing an interactive user experience with customizable styles, loading states, and accessibility features.",
    "relatedComponents": {
      "lightning-menu-item": "required",
      "lightning-menu-divider": "optional",
      "lightning-menu-subheader": "optional"
    },
    "publicApi": [
      {
        "name": "alternative-text",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-menu alternative-text='Settings'>",
          "<lightning-button-menu alternative-text={alternativeTextValue}>"
        ]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-button-menu label='Menu'>", "<lightning-button-menu label={labelValue}>"]
      },
      {
        "name": "icon-name",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-menu icon-name='utility:settings'>",
          "<lightning-button-menu icon-name={iconNameValue}>"
        ]
      },
      {
        "name": "icon-size",
        "typeSignature": "string",
        "examples": ["<lightning-button-menu icon-size='small'>", "<lightning-button-menu icon-size={iconSizeValue}>"]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": ["<lightning-button-menu variant='border'>", "<lightning-button-menu variant={variantValue}>"]
      },
      {
        "name": "is-loading",
        "typeSignature": "boolean",
        "examples": ["<lightning-button-menu is-loading>", "<lightning-button-menu is-loading={isLoadingValue}>"]
      },
      {
        "name": "loading-state-alternative-text",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-menu loading-state-alternative-text='Loading menu...'>",
          "<lightning-button-menu loading-state-alternative-text={loadingStateAltTextValue}>"
        ]
      },
      {
        "name": "is-draft",
        "typeSignature": "boolean",
        "examples": ["<lightning-button-menu is-draft>", "<lightning-button-menu is-draft={isDraftValue}>"]
      },
      {
        "name": "draft-alternative-text",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-menu draft-alternative-text='Unsaved changes'>",
          "<lightning-button-menu draft-alternative-text={draftAltTextValue}>"
        ]
      },
      {
        "name": "menu-alignment",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-menu menu-alignment='auto'>",
          "<lightning-button-menu menu-alignment={menuAlignmentValue}>"
        ]
      },
      {
        "name": "tooltip",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-menu tooltip='Choose a settings category'>",
          "<lightning-button-menu tooltip={tooltipValue}>"
        ]
      },
      {
        "name": "onselect",
        "typeSignature": "(ev: CustomEvent & { detail: { value: string } }) => void",
        "examples": ["<lightning-button-menu onselect={handleMenuSelect}>"]
      },
      {
        "name": "onopen",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-button-menu onopen={handleMenuOpen}>"]
      },
      {
        "name": "onclose",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-button-menu onclose={handleMenuClose}>"]
      }
    ],
    "useCases": [
      "Imagine you're using a word processing software and you want to change the font, size, or format of your text. You could click on a button that opens a dropdown menu with these options, each represented by a <lightning-button-menu> component. Once you select an option, the menu closes and your text changes according to your selection.",
      "Consider a scenario where you're using a project management tool. There could be a <lightning-button-menu> component next to each task in your task list. When you click on the button, a dropdown menu appears with options to edit the task, mark it as complete, or delete it. Once you make a selection, the menu closes and the task list updates based on your action.",
      "Imagine you're using a music streaming app. There could be a <lightning-button-menu> component next to each song in your playlist. When you click on the button, a dropdown menu appears with options to play the song, add it to your favorites, or remove it from the playlist. Once you make a selection, the menu closes and your playlist updates based on your action."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Simple Button Menus\n      description: Button menu items can be disabled.\n    - name: withIcon\n      label: Button Menus Using Icons and Menu Alignment\n      description: Button menus can display a utility icon next to the dropdown and change the menu alignment.\n    - name: variants\n      label: Button Menu Variants\n      description: Button menus variants change the border style and size, or display with a dark background.\n    - name: onselect\n      label: Button Menu with Custom onselect Behavior\n      description: Button menu with custom onselect handler.\n---\n\nA `lightning-button-menu` component represents a button that displays a\ndropdown menu of actions or functions when you click it.\n\nThe menu closes when you click away from it, and it also closes and puts the\nfocus back on the button when you select a menu item.\n\nUse [`lightning-menu-item`](bundle/lightning-menu-item/documentation) components nested in `lightning-button-menu` to specify the menu items for the button menu.\n\nThis example shows how to create a dropdown button menu with three items.\n\n```html\n<template>\n    <lightning-button-menu alternative-text=\"Settings\">\n        <lightning-menu-item label=\"Font\" value=\"font\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Size\" value=\"size\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Format\" value=\"format\">\n        </lightning-menu-item>\n    </lightning-button-menu>\n</template>\n```\n\nTo add a text label to the button before the icon, use the `label` attribute.\n\nThe `lightning-button-menu` component supports several variants that change the look of the button. You can use a combination of the `variant`, `icon-name`, and `icon-size` attributes to customize the button and icon styles.\n\nFor more information, see the **Component Styling** section.\n\n#### Checked Menu Items\n\nYou can create menu items that can be checked or unchecked using the `checked`\nattribute in the `lightning-menu-item` component, toggling it as needed. To\nenable toggling of a menu item, you must set an initial value on the `checked`\nattribute, specifying either `true` or `false`.\n\n#### Create Dividers and Subheadings\n\nUse the [`lightning-menu-divider`](bundle/lightning-menu-divider/documentation) component to create a dividing line after a menu item.\n\nUse the [`lightning-menu-subheader`](bundle/lightning-menu-subheader/documentation) component to create subheadings in the list of menu items.\n\n#### Generate Menu Items\n\nThis example creates a button menu with several items during initialization. The `items` array definition uses the `@track` decorator to track mutations in the array. If the value of `items` changes, the component's template rerenders.\n\n```html\n<template>\n    <lightning-button-menu\n        alternative-text=\"Action\"\n        onselect={handleMenuSelect}\n    >\n        <template for:each={items} for:item=\"action\">\n            <lightning-menu-item\n                id=\"action-id\"\n                label={action.label}\n                value={action.value}\n                key={action.label}\n            >\n            </lightning-menu-item>\n        </template>\n    </lightning-button-menu>\n</template>\n```\n\nDefine `items` and handle the `select` event in your JavaScript code.\n\n```javascript\nimport { LightningElement, track } from 'lwc';\n\nexport default class DemoButtonMenu extends LightningElement {\n    @track\n    items = [\n        {\n            id: 'menu-item-1',\n            label: 'Alpha',\n            value: 'alpha',\n        },\n        {\n            id: 'menu-item-2',\n            label: 'Beta',\n            value: 'beta',\n        },\n        {\n            id: 'menu-item-3',\n            label: 'Gamma',\n            value: 'gamma',\n        },\n    ];\n\n    handleMenuSelect(event) {\n        // retrieve the selected item's value\n        const selectedItemValue = event.detail.value;\n\n        // INSERT YOUR CODE HERE\n    }\n}\n```\n\n#### Show the Loading State of a Menu\n\nThe `is-loading` attribute enables you to show an activity indicator while the menu is loading. You can\nuse this attribute, for example, to inform users that the menu is working while generating a large list of menu items.\nWhen `is-loading` is `true`, the menu shows a spinner.\n\nUse `loading-state-alternative-text` along with `is-loading` to specify explanatory text such as \"Loading menu...\" or\n\"Please wait while items load\".\n\n#### Draft Indicators\n\nUse the `is-draft` and `draft-alternative-text` attributes together to indicate that the button menu is in an unsaved state.\nThe draft indicator, an asterisk, is shown for the button menu when `is-draft` is `true`. The `draft-alternative-text` attribute\nis required to provide text describing the reason the menu is considered in a draft state. The button menu draft state can\nbe used to show there is unsaved state or data that could be lost, for example if there's a user change in a customizable menu.\n\n#### Component Styling\n\n`lightning-button-menu` implements the [menus](https://www.lightningdesignsystem.com/components/menus/) blueprint in the Salesforce Lightning Design System (SLDS).\n\nUse a combination of the `icon-name`, `icon-size`, and `variant` attributes to customize the button and icon styles.\n\n##### Icons\n\nBy default, the button displays a utility:down icon to indicate the dropdown function.\nUse the `icon-name` attribute to specify an optional [utility icon](https://www.lightningdesignsystem.com/icons/#utility)\nto display in front of the utility:down icon. Use the `icon-size` attribute to change the icon size from the default size of `medium`.\n\nWhen applying SLDS classes or icons, check that they are\navailable in the SLDS release tied to your org. The Lightning\nDesign System site shows the latest SLDS resources, which\nbecome available only when the new release is available in your org.\n\n##### Variants\n\nUse the `variant` attribute with one of these values to apply styling.\n\n-   `border` - Shows a gray border around the button's down arrow symbol. The area inside the border is transparent and clickable. This is the default variant and doesn't need to be specified.\n-   `border-inverse` - Same as the `border` variant except the down arrow is white so it's visible on dark backgrounds.\n-   `border-filled` - Same as the `border` variant, except the area inside the border is filled with white.\n-   `container` - Shows only the down arrow, without a visible border. The clickable area surrounding the down arrow is the same size as the default `border` variant and is transparent.\n-   `bare` - Same as the `container` variant, except the clickable area surrounding the down arrow is smaller than the default.\n-   `bare-inverse` - Same as the `bare` variant except the down arrow is white so it's visible on dark backgrounds.\n\n##### Sizes\n\nAdjust the button and icon sizes using the `size` attribute with one of these values.\n\nFor `bare` and `bare-inverse` variants:\n\n-   `medium` is the default size, which creates a 14px by 14px icon\n-   `small` creates a 12px by 12px icon\n-   `x-small` creates a 8px by 8px icon\n-   `large` creates a 24px by 24px icon\n\nFor other variants:\n\n-   `medium` is the default size, which creates a 32px by 32px button enclosing a 14px by 14px icon.\n-   `small` creates a 24px by 24px button enclosing a 14px by 14px icon\n-   `x-small` creates a 20px by 20px button enclosing a 12px by 12px icon\n-   `xx-small` creates a 16px by 16px button enclosing a 8px by 8px icon\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds padding around the button menu using an SLDS class.\n\n```html\n<lightning-button-menu\n    class=\"slds-p-around_medium\"\n    alternative-text=\"Show menu\"\n>\n    <lightning-menu-item value=\"Edit\" label=\"Edit\"></lightning-menu-item>\n    <lightning-menu-item value=\"Save\" label=\"Save\"></lightning-menu-item>\n</lightning-button-menu>\n```\n\nTo apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n```html\n<lightning-button-menu class=\"my-button-menu\" alternative-text=\"Show menu\">\n    <lightning-menu-item value=\"Edit\" label=\"Edit\"></lightning-menu-item>\n    <lightning-menu-item value=\"Save\" label=\"Save\"></lightning-menu-item>\n</lightning-button-menu>\n```\n\nUse SLDS styling hooks to customize the component's styles. For example, specify the background color on the button using the `sds-c-button-color-background` custom property.\n\n```css\n.my-button-menu {\n    --slds-c-button-color-background: orange;\n}\n```\n\n`lightning-button-menu` contains the same customizable elements as `lightning-button`, which supports `--slds-c-button-*` custom properties.\n\nCustom properties for button menus work only with particular `lightning-button-menu` variants.\n\n| CSS Custom Property               | `lightning-button-menu` Variants                                                                            |\n| --------------------------------- | ----------------------------------------------------------------------------------------------------------- |\n| `--slds-c-button-color-background` | `border` (default), `bare`, `bare-inverse`, and `container`                                                 |\n| `--slds-c-button-color-border`     | `bare`, `bare-inverse`, and `container`                                                                     |\n| `--slds-c-button-text-color`       | `border` (default), `bare`, `bare-inverse`,`container`, and `border-filled`; use with the `label` attribute |\n| `--slds-c-button-text-color-*`     | `border` (default), `bare`, `container`, and `border-filled`                                                |\n| `--slds-c-button-radius-border`    | all                                                                                                         |\n| `--slds-c-button-sizing-border`    | `bare`, `bare-inverse`, `border-inverse` and `container`                                                    |\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/buttons/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\nTo understand how we implemented SLDS in `lightning-button-menu`, see the **Source Code** section.\n\n#### Usage Considerations\n\nIcons are not available in Lightning Out, but they are available in Lightning Components for Visualforce and other experiences.\n\nThis component's menu items are created only if the button is\ntriggered. You can't reference the menu items during initialization\nor if the button isn't triggered yet.\n\nBy default, the button menu renders above all modals and the main Salesforce header.\n\nYou can customize the alignment of the dropdown menu relative to the button using `menu-alignment`.\nIf you are using `lightning-button-menu` in a container that specifies the `overflow:hidden` CSS property,\nsetting `menu-alignment=\"auto\"` ensures that the dropdown menu is not hidden from view when the menu is toggled. For mobile devices, set `menu-alignment=\"auto\"` to ensure proper display of the menu.\n\nWhen using this component within `lightning-button-group`, set `variant=\"border-filled\"` on `lightning-button-menu` for a white button background. Otherwise, the `lightning-button-menu` background is transparent by default.\n\n#### Accessibility\n\nTo inform screen readers that a button menu is disabled, set the `disabled`\nattribute to `true`.\n\nButtons must have an accessible name to enable assistive technology to describe the button's purpose. Provide this name using the `alternative-text` or `label` attribute. Make it a clear action, such as \"Show menu\". To make the name available to assistive technology but hidden from view, use `alternative-text`.\n\n`lightning-button-menu` is rendered with `aria-haspopup=\"true\"` to indicate that the button opens a menu. The component also indicates whether the menu is currently expanded or collapsed using `aria-expanded=\"true\"` or `aria-expanded=\"false\"`.\n\nFor more information, see the [WAI-ARIA Specification](https://www.w3.org/TR/wai-aria/).\n\nTo display a contextual popup over the button menu, use the `tooltip` attribute.\nThe popup becomes visible when you hover over the button, or after the button receives keyboard focus. Showing the popup on hover or on keyboard focus ensures that all users can access it, even if they aren’t using a mouse.\n\nIf you use both `title` and `tooltip` attributes, they are both visible when you hover over the button. Some screen readers don’t support the `title` attribute and many of them don’t read the `title` attribute by default.\n\n```html\n<lightning-button-menu\n    icon-name=\"utility:settings\"\n    title=\"Settings\"\n    tooltip=\"Choose a settings category\"\n    alternative-text=\"Hidden text for assistive technology\"\n>\n</lightning-button-menu>\n```\n\nFor sighted users, make sure your descriptions for `title` and `tooltip` are not repetitive. We recommend providing detailed information to `tooltip` and making `title` more concise if you use both.\n\nIf you use the `is-loading` indicator, use `loading-state-alternative-text` to provide a description for users of assistive devices.\n\nIf you use the `is-draft` indicator, use `draft-alternative-text` to provide a description for users of assistive devices.\n\n#### Custom Events\n\n**`select`**\n\nThe event fired when the menu is selected.\n\nThe `select` event returns the following parameter.\n\n| Parameter | Type   | Description                       |\n| --------- | ------ | --------------------------------- |\n| value     | string | The value of the selected option. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                    |\n| ---------- | ----- | ------------------------------------------------------------------------------ |\n| bubbles    | false | This event does not bubble.                                                    |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event.     |\n| composed   | false | This event does not propagate outside the template in which it was dispatched. |\n\n**`open`**\n\nThe event fired when you open the dropdown menu in one of the following ways.\n\n-   Tab to the button and press the Enter key\n-   Click the button that toggles the dropdown menu\n\nThe `open` event does not return any parameters.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                                |\n| ---------- | ----- | ---------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                                |\n| cancelable | false | This event has no default behavior that can be canceled. You cannot call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside of the component in which it was dispatched.                         |\n\n**`close`**\n\nThe event fired when you close the dropdown menu in one of the following ways.\n\n-   Select or unselect a dropdown menu item\n-   Click the button that toggles the dropdown menu\n-   Remove focus from the dropdown menu, such as by clicking outside of the dropdown menu or tabbing to another element on the page\n\nThe `close` event does not return any parameters.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                                |\n| ---------- | ----- | ---------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                                |\n| cancelable | false | This event has no default behavior that can be canceled. You cannot call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside of the component in which it was dispatched.                         |\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonMenuBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with only <code>lightning-menu-item</code> elements.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with some <code>lightning-menu-item</code> elements disabled.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\" disabled></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\" disabled></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonMenuOnselect extends LightningElement {\n    selectedItemValue;\n\n    handleOnselect(event) {\n        this.selectedItemValue = event.detail.value;\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with a custom <code>onselect</code> event handler. The value of the item selected is shown below the menu.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" onselect={handleOnselect}>\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n\n        <div class=\"slds-m-vertical_medium\">\n            <p>The value of the menu item you selected is: <span class=\"slds-text-heading_small\">{selectedItemValue}</span></p>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonMenuVariants extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with the <code>variant</code> attribute set to <code>border</code>,\n            which is the default if omitted.\n        </h2>\n\n        <!-- Default/border -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with <code>bare</code> variant has a smaller clickable area.\n        </h2>\n\n        <!-- Bare -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"bare\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with <code>container</code> variant is borderless with default size clickable area.\n        </h2>\n\n        <!-- Container/borderless -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"container\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with <code>border-filled</code> variant.\n        </h2>\n\n        <!-- Border-filled -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button-menu with the <code>bare-inverse</code> variant.\n        </h2>\n\n        <!-- Bare-inverse -->\n        <div class=\"slds-p-around_medium lgc-bg-inverse\">\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"bare-inverse\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with <code>border-inverse</code> variant.\n        </h2>\n\n        <!-- Border-inverse -->\n        <div class=\"slds-p-around_medium lgc-bg-inverse\">\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-inverse\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonMenuWithIcon extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menus that use the <code>icon-name</code> attribute.\n        </h2>\n\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" icon-name=\"utility:settings\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" icon-name=\"utility:add\" class=\"slds-m-left_large\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" icon-name=\"utility:automate\" class=\"slds-m-left_large\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" icon-name=\"utility:connected_apps\" class=\"slds-m-left_large\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" icon-name=\"utility:record_create\" class=\"slds-m-left_large\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menus that use the <code>icon-size</code> attribute. <code>xx-small</code>, <code>x-small</code>, <code>small</code>, <code>medium</code> (default), and <code>large</code>.\n        </h2>\n\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" icon-size=\"xx-small\" icon-name=\"utility:animal_and_nature\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" icon-size=\"x-small\" icon-name=\"utility:animal_and_nature\" class=\"slds-m-left_large\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" icon-size=\"small\" icon-name=\"utility:animal_and_nature\" class=\"slds-m-left_large\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" icon-name=\"utility:animal_and_nature\" class=\"slds-m-left_large\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" icon-size=\"large\" icon-name=\"utility:animal_and_nature\" class=\"slds-m-left_large\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menus that use the <code>menu-alignment</code> attribute to specify how the menu aligns with the button.\n        </h2>\n\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" tooltip=\"Left alignment (default)\" icon-name=\"utility:settings\"  class=\"slds-m-left_xx-large\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu alternative-text=\"Show menu\" tooltip=\"Right alignment\"  menu-alignment=\"right\" icon-name=\"utility:add\" class=\"slds-m-left_xx-large\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu alternative-text=\"Show menu\" tooltip=\"Center alignment\" menu-alignment=\"center\" icon-name=\"utility:automate\"  class=\"slds-m-left_xx-large\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu alternative-text=\"Show menu\" icon-name=\"utility:connected_apps\" tooltip=\"Auto alignment\"  menu-alignment=\"auto\" class=\"slds-m-left_xx-large\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-button-stateful",
    "shortDescription": "This component is a stateful button that toggles between different states, displaying different labels and icons based on its selected state, providing an interactive user experience similar to a social media Like button.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "label-when-off",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-stateful label-when-off='Follow'>",
          "<lightning-button-stateful label-when-off={labelWhenOff}>"
        ]
      },
      {
        "name": "label-when-on",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-stateful label-when-on='Following'>",
          "<lightning-button-stateful label-when-on={labelWhenOn}>"
        ]
      },
      {
        "name": "label-when-hover",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-stateful label-when-hover='Unfollow'>",
          "<lightning-button-stateful label-when-hover={labelWhenHover}>"
        ]
      },
      {
        "name": "icon-name-when-off",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-stateful icon-name-when-off='utility:add'>",
          "<lightning-button-stateful icon-name-when-off={iconNameWhenOff}>"
        ]
      },
      {
        "name": "icon-name-when-on",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-stateful icon-name-when-on='utility:check'>",
          "<lightning-button-stateful icon-name-when-on={iconNameWhenOn}>"
        ]
      },
      {
        "name": "icon-name-when-hover",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-stateful icon-name-when-hover='utility:close'>",
          "<lightning-button-stateful icon-name-when-hover={iconNameWhenHover}>"
        ]
      },
      {
        "name": "selected",
        "typeSignature": "boolean",
        "examples": ["<lightning-button-stateful selected={isSelected}>"]
      },
      {
        "name": "onclick",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-button-stateful onclick={handleClick}>"]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-stateful variant='brand'>",
          "<lightning-button-stateful variant={buttonVariant}>"
        ]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": [
          "<lightning-button-stateful class='slds-p-around_medium'>",
          "<lightning-button-stateful class={buttonClass}>"
        ]
      },
      {
        "name": "disabled",
        "typeSignature": "boolean",
        "examples": ["<lightning-button-stateful disabled={isDisabled}>"]
      }
    ],
    "useCases": [
      "Imagine you're using a social media platform and you come across a post you really like. You could use the <lightning-button-stateful> to 'like' the post. When you click the button, it changes to show that you've liked the post. If you decide to 'unlike' the post, you can click the button again and it will change back to its original state.",
      "Consider a situation where you're using an online shopping platform. You find a product you're interested in and want to save it for later. The <lightning-button-stateful> could be used as a 'save for later' button. When you click on it, the button changes to show that the product has been saved. If you decide you're no longer interested in the product, you can click the button again to 'unsave' it.",
      "Imagine you're using a music streaming platform and you come across a song you really enjoy. The <lightning-button-stateful> could be used as a 'favorite' button. When you click on it, the button changes to show that the song has been added to your favorites. If you decide you no longer want the song in your favorites, you can click the button again to remove it."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Stateful Button\n      description: This stateful button changes its text and icon when you select it. The button changes its text and icon again when you hover over it. This uses the default variant.\n    - name: inverseVariant\n      label: Stateful Button with Inverse Variant\n      description: This stateful button changes its text and icon when you select it. The button changes its text and icon again when you hover over it. This uses the inverse variant.\n    - name: noIcon\n      label: Stateful Button with No Icon\n      description: This stateful button uses the brand variant and does not specify icons for any states.\n    - name: textVariant\n      label: Stateful Button with Text and Icon\n      description: This stateful button uses the text variant and specifies icons for selected and not-selected states, but not the hover state.\n---\n\nA `lightning-button-stateful` component represents a button that toggles\nbetween states, similar to a Like button on social media. Stateful buttons can\nshow a different label and icon based on their `selected` states.\n\nTo handle the state change when the button is clicked, use the `onclick` event\nhandler. This example enables you to toggle the button between states,\ndisplaying the \"Follow\" label by default, and replacing it with \"Following\"\nwhen the button is selected. Selecting the button toggles the `selected` state to true,\nand deselecting it toggles `selected` state to false. When the `selected` state is true, the\nbutton displays \"Unfollow\" when you mouse over it or when it receives focus.\n\n```html\n<template>\n    <lightning-button-stateful\n        label-when-off=\"Follow\"\n        label-when-on=\"Following\"\n        label-when-hover=\"Unfollow\"\n        icon-name-when-off=\"utility:add\"\n        icon-name-when-on=\"utility:check\"\n        icon-name-when-hover=\"utility:close\"\n        selected={isSelected}\n        onclick={handleClick}\n    >\n    </lightning-button-stateful>\n</template>\n```\n\nThe `handleClick()` function toggles the state via the `isSelected` attribute.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class MyComponentName extends LightningElement {\n    isSelected = false;\n\n    handleClick() {\n        this.isSelected = !this.isSelected;\n    }\n}\n```\n\n#### Component Styling\n\n`lightning-button-stateful` implements the\n[stateful buttons](https://www.lightningdesignsystem.com/components/buttons/#flavor-stateful) blueprint in the Salesforce Lightning Design System (SLDS).\n\n##### Icons\n\nUse the `icon-name` attribute to add a utility icon to the button.\n\nThe SLDS utility icon category provides nearly 200 utility\nicons that can be used in `lightning-button-stateful` along with a text label. Although SLDS provides several categories of icons, only the utility category can be used with this component.\n\nVisit [utility icons](https://lightningdesignsystem.com/icons/#utility) to view the utility icons.\n\nWhen applying SLDS classes or icons, check that they are\navailable in the SLDS release tied to your org. The latest\nSLDS resources become available only when the new release\nis available in your org.\n\n##### Variants\n\nUse the `variant` attribute with one of these values to apply styling.\n\n-   `neutral` is the default variant, a plain uncolored button.\n-   `brand` is a blue button, used to draw attention to the primary action on a page.\n-   `destructive` is a red button used to warn users that its action has a negative effect.\n-   `inverse` uses the background color and light text, useful for dark backgrounds.\n-   `success` is a green button used to indicate a successful action.\n-   `text` is a button without a border, which gives it the look of a plain text link.\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds padding on the button using an SLDS class.\n\n```html\n<lightning-button-stateful\n    label-when-off=\"Follow\"\n    label-when-on=\"Following\"\n    label-when-hover=\"Unfollow\"\n    icon-name-when-off=\"utility:add\"\n    icon-name-when-on=\"utility:check\"\n    icon-name-when-hover=\"utility:close\"\n    selected={isSelected}\n    onclick={handleClick}\n    class=\"slds-p-around_medium\"\n>\n</lightning-button-stateful>\n```\n\nTo apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n```html\n<lightning-button-stateful\n    label-when-off=\"Follow\"\n    label-when-on=\"Following\"\n    label-when-hover=\"Unfollow\"\n    icon-name-when-off=\"utility:add\"\n    icon-name-when-on=\"utility:check\"\n    icon-name-when-hover=\"utility:close\"\n    selected={isSelected}\n    onclick={handleClick}\n    class=\"my-button\"\n>\n</lightning-button-stateful>\n```\n\nUse SLDS styling hooks to customize the component's styles. For example, specify the background and text color on the button using the `--slds-c-button-*` custom properties.\n\n```css\n.my-button {\n    --slds-c-button-neutral-color-background: orange;\n    --slds-c-button-text-color: white;\n}\n```\n\n`lightning-button-stateful` contains the same customizable elements as `lightning-button`, which supports `--slds-c-button-*` custom properties.\n\nCustom properties for stateful buttons work only with particular `lightning-button-stateful` variants.\n\n| CSS Custom Property            | `lightning-button-stateful` Variants |\n| ------------------------------ | ------------------------------------ |\n| `--slds-c-button-*`             | all                                  |\n| `--slds-c-button-color-*`       | `base`                               |\n| `--slds-c-button-text-color-*`  | `neutral` (default) and `text`       |\n| `--slds-c-button-neutral-*`     | `neutral` (default)                  |\n| `--slds-c-button-brand-*`       | `brand`                              |\n| `--slds-c-button-destructive-*` | `destructive`                        |\n| `--slds-c-button-inverse-*`     | `inverse`                            |\n| `--slds-c-button-success-*`     | `success`                            |\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/buttons/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\nTo understand how we implemented SLDS in `lightning-button-stateful`, see the **Source Code** section.\n\n#### Usage Considerations\n\nThis component has usage differences from its Aura counterpart. See [Base Components: Aura Vs Lightning Web Components](https://developer.salesforce.com/docs/platform/lwc/guide/migrate-map-aura-lwc-components) in the Lightning Web Components Developer Guide.\n\n#### Accessibility\n\nThis component uses `aria-live=\"polite\"`, which means the button label is read after the current user task or content.\n\nTo inform screen readers that a button is disabled, set the `disabled` attribute to true.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Basic extends LightningElement {\n    isSelected = false;\n\n    handleClick() {\n        this.isSelected = !this.isSelected;\n    }\n}\n",
        "html": "<template>\n    <lightning-button-stateful\n        label-when-off=\"Follow\"\n        label-when-on=\"Following\"\n        label-when-hover=\"Unfollow\"\n        icon-name-when-off=\"utility:add\"\n        icon-name-when-on=\"utility:check\"\n        icon-name-when-hover=\"utility:close\"\n        selected={isSelected}\n        onclick={handleClick}>\n    </lightning-button-stateful>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Basic extends LightningElement {\n    isSelected = false;\n\n    handleClick() {\n        this.isSelected = !this.isSelected;\n    }\n}\n",
        "html": "<template>\n    <div class=\"backgroundInverse\">\n        <lightning-button-stateful\n            label-when-off=\"Follow\"\n            label-when-on=\"Following\"\n            label-when-hover=\"Unfollow\"\n            icon-name-when-off=\"utility:add\"\n            icon-name-when-on=\"utility:check\"\n            icon-name-when-hover=\"utility:close\"\n            variant=\"inverse\"\n            selected={isSelected}\n            onclick={handleClick}>\n        </lightning-button-stateful>\n    </div>\n</template>\n\n\n\n",
        "css": ".backgroundInverse {\n    background-color: #16325c;\n    padding: 12px;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Basic extends LightningElement {\n    isSelected = false;\n\n    handleClick() {\n        this.isSelected = !this.isSelected;\n    }\n}\n",
        "html": "<template>\n    <lightning-button-stateful\n        label-when-off=\"Follow\"\n        label-when-on=\"Following\"\n        label-when-hover=\"Unfollow\"\n        variant=\"brand\"\n        selected={isSelected}\n        onclick={handleClick}>\n    </lightning-button-stateful>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Basic extends LightningElement {\n    isSelected = false;\n\n    handleClick() {\n        this.isSelected = !this.isSelected;\n    }\n}\n",
        "html": "<template>\n    <div class=\"backgroundInverse\">\n        <lightning-button-stateful\n            label-when-off=\"Like\"\n            label-when-on=\"Liked\"\n            icon-name-when-off=\"utility:like\"\n            icon-name-when-on=\"utility:like\"\n            variant=\"text\"\n            selected={isSelected}\n            onclick={handleClick}>\n        </lightning-button-stateful>\n    </div>\n</template>\n\n\n"
      }
    ]
  },
  {
    "tagName": "lightning-card",
    "shortDescription": "This component is a stylized container that groups information, optionally including a title, body, actions, and a footer, providing an interactive user experience with clickable actions and links.",
    "relatedComponents": {
      "lightning-button-icon": "optional",
      "lightning-button": "optional",
      "lightning-icon": "optional",
      "lightning-navigation": "optional"
    },
    "publicApi": [
      {
        "name": "title",
        "typeSignature": "string",
        "examples": ["<lightning-card title='Card Title'>", "<lightning-card title={cardTitle}>"]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": ["<lightning-card variant='narrow'>", "<lightning-card variant={cardVariant}>"]
      },
      {
        "name": "icon-name",
        "typeSignature": "string",
        "examples": ["<lightning-card icon-name='standard:opportunity'>", "<lightning-card icon-name={iconName}>"]
      }
    ],
    "useCases": [
      "Imagine you're browsing an online store and you see a section on the homepage titled 'Recommended for You'. Each product in this section is displayed within its own box, with the product image, name, price, and a 'Add to Cart' button. Each of these boxes is a <lightning-card> component, used to group related information together in a visually appealing way.",
      "Consider a business dashboard where you can see a summary of different metrics, like sales, customer satisfaction, and employee performance. Each metric is displayed in its own box with a title, the metric value, and a 'View More' button. These boxes are <lightning-card> components, used to present related pieces of information in a clear, organized manner.",
      "Think about a news website where each article is displayed with a headline, a brief summary, and a 'Read More' button. Each of these article previews is a <lightning-card> component, used to encapsulate related pieces of information and provide a consistent look and feel across the website."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Card\n      description: A basic card that provides a title attribute. The card uses a button in the actions slot, and plain text in the footer slot.\n    - name: narrow\n      label: Card with Narrow Variant\n      description: This card uses the narrow variant and specifies an icon to include with the title. The card uses a button icon in the actions slot and plain text in the footer slot.\n    - name: custom\n      label: Card with Custom Title and Footer\n      description: This card creates a custom title by using a title slot that contains a header tag and lightning-icon. The footer slot contains lightning-badge components, and the actions slot is empty.\n---\n\nA `lightning-card` is used to apply a stylized container around a grouping of information. The information could be a single item or a group of items such as a related list.\n\nA `lightning-card` can contain a title, body, actions, and a footer. The title, actions, and footer are optional. You can also provide an icon in the header in front of the title.\n\nUse the `actions` slot to pass content such as `lightning-button-icon` or `lightning-button` to perform an action when clicked. Actions are displayed on the top corner of the card opposite the title.\n\nHere's an example that passes in the title, actions, and footer as slots, and includes an icon.\n\n```html\n<template>\n    <lightning-card variant=\"narrow\" icon-name=\"standard:opportunity\">\n        <h1 slot=\"title\">This is a title</h1>\n        <h1>This is the body</h1>\n        <div slot=\"actions\">\n            <lightning-button-icon\n                icon-name=\"utility:down\"\n            ></lightning-button-icon>\n        </div>\n        <div slot=\"footer\">\n            <h6>This is the footer</h6>\n        </div>\n    </lightning-card>\n</template>\n```\n\n`title` is available as an attribute or a slot. Pass in the title as a slot if you want to pass in markup, such as making the title bold.\n\nUse the `title` attribute if your title doesn't need extra formatting. Setting the `title` attribute overwrites the `title` slot. For more information, see [Use Slots as Placeholders](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-slots).\n\n#### Add an Action to the Footer Slot\n\nThe card footer is optional and can contain an action to link to another page.\nIf using the card footer, we recommend using a View All link that takes a user to the object list view.\n\nThis example adds the View All link to the footer slot,\nspecifying the `slds-card__footer-action` class on the <a> tag. This class makes the footer's click\ntarget span the entire width of the card so you can click anywhere in the footer. The class isn't required.\n\nFor a View All link, set the href value of the tag to a URL to take the user to the object list view.\n\n```html\n<template>\n    <lightning-card title=\"Hello\">\n        <lightning-button label=\"New\" slot=\"actions\"></lightning-button>\n        <lightning-button label=\"Old\" slot=\"actions\"></lightning-button>\n        <p class=\"slds-p-horizontal_small\">Card Body (custom component)</p>\n        <div slot=\"footer\">\n            <a class=\"slds-card__footer-action\" href=\"#\"\n                >View All\n                <span class=\"slds-assistive-text\">Accounts</span>\n            </a>\n        </div>\n    </lightning-card>\n</template>\n```\n\nTo navigate to records, list views, and objects in Lightning Experience, Experience Builder sites, and the Salesforce mobile app, use the navigation service, [`lightning/navigation`](docs/component-library/bundle/lightning-navigation). For more information, see [Basic Navigation](https://developer.salesforce.com/docs/platform/lwc/guide/use-navigate-basic).\n\n#### Component Styling\n\n`lightning-card` implements the\n[cards](https://www.lightningdesignsystem.com/components/cards/) blueprint in the Salesforce Lightning Design System (SLDS).\n\n##### Icons\n\n`lightning-card` displays an SLDS icon if you pass an icon name with the `icon-name` attribute. The icon is rendered using `lightning-icon`.\n\nWhen applying SLDS classes or icons, check that they are available in the SLDS release tied to your org. The latest SLDS resources become available only when the new release is available in your org.\n\nVisit [icons](https://lightningdesignsystem.com/icons/) to view available icons.\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute, as shown in the **Add an Action to the Footer Slot** section.\n\nTo apply custom styling, use the `:host` selector. Use SLDS styling hooks to customize the component's style. For example, specify the header font weight and body spacing.\n\n```css\n:host {\n    --slds-c-card-heading-font-weight: 500px;\n    --slds-c-card-body-spacing-inlinestart: 20px;\n}\n```\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/cards/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\n`lightning-card` also includes [`lightning-icon`](bundle/lightning-icon/documentation) and [`lightning-button`](bundle/lightning-button/documentation) components that you can customize using SLDS styling hooks.\n\nTo understand how we implemented SLDS in `lightning-card`, see the **Source Code** section.\n\n#### Usage Considerations\n\nIcons are not available in Lightning Out, but they are available in Lightning Components for Visualforce and other experiences.\n\nThis component has usage differences from its Aura counterpart. See [Base Components: Aura Vs Lightning Web Components](https://developer.salesforce.com/docs/platform/lwc/guide/migrate-map-aura-lwc-components) in the Lightning Web Components Developer Guide.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Basic extends LightningElement {}\n",
        "html": "<template>\n        <lightning-card  title=\"Hello\">\n            <lightning-button label=\"New\" slot=\"actions\"></lightning-button>\n            <p class=\"slds-p-horizontal_small\">Card Body (custom component)</p>\n            <p slot=\"footer\">Card Footer</p>\n        </lightning-card>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Custom extends LightningElement {}\n",
        "html": "<template>\n    <lightning-card>\n        <h3 slot=\"title\">\n            <lightning-icon icon-name=\"utility:connected_apps\" size=\"small\"></lightning-icon>\n            Card Title\n        </h3>\n        <div slot=\"footer\">\n                <lightning-badge label=\"Tag1\"></lightning-badge>\n                <lightning-badge label=\"Tag2\"></lightning-badge>\n                <lightning-badge label=\"Tag3\"></lightning-badge>\n        </div>\n        <p class=\"slds-p-horizontal_small\">Card Body (custom component)</p>\n    </lightning-card>\n</template>\n",
        "css": ":host {\n    min-width:430px;\n    max-width:620px;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Narrow extends LightningElement {}\n",
        "html": "<template>\n        <lightning-card  variant=\"Narrow\"  title=\"Hello\" icon-name=\"standard:account\">\n            <lightning-button-icon  icon-name=\"utility:down\" variant=\"border-filled\" alternative-text=\"Show More\" slot=\"actions\"></lightning-button-icon>\n            <p class=\"slds-p-horizontal_small\">Card Body Narrow (custom component)</p>\n            <p slot=\"footer\">Card Footer</p>\n        </lightning-card>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-carousel",
    "shortDescription": "This component is a customizable image carousel that displays a series of images one at a time, with user controls for scrolling and optional auto-scrolling, providing an interactive and visually engaging user experience.",
    "relatedComponents": {
      "lightning-carousel-image": "required"
    },
    "publicApi": [
      {
        "name": "disable-auto-scroll",
        "typeSignature": "boolean",
        "examples": [
          "<lightning-carousel disable-auto-scroll>",
          "<lightning-carousel disable-auto-scroll={isAutoScrollDisabled}>"
        ]
      },
      {
        "name": "disable-auto-refresh",
        "typeSignature": "boolean",
        "examples": [
          "<lightning-carousel disable-auto-refresh>",
          "<lightning-carousel disable-auto-refresh={isAutoRefreshDisabled}>"
        ]
      },
      {
        "name": "scroll-duration",
        "typeSignature": "number",
        "examples": ["<lightning-carousel scroll-duration=3>", "<lightning-carousel scroll-duration={scrollDuration}>"]
      }
    ],
    "useCases": [
      "Imagine you're browsing an online clothing store and you're looking at a product page for a dress. The <lightning-carousel> component could be used to display multiple images of the dress from different angles. You could click on the indicators below the image to view each image one by one.",
      "Consider a news website that has a section on its homepage for top stories. The <lightning-carousel> component could be used to display the top stories, each with an image and a headline. The stories would automatically scroll every few seconds, but you could pause the scrolling to read a headline more closely.",
      "Think about a travel website that offers vacation packages. On the homepage, the <lightning-carousel> component could be used to showcase images of various destinations. Each image could have a header and a brief description, and you could click on the image to learn more about that destination.",
      "Suppose you're on a real estate website looking at a listing for a house. The <lightning-carousel> component could be used to display various images of the house, such as the exterior, the living room, the kitchen, and so on. You could manually scroll through the images to view the house from different perspectives.",
      "Imagine a museum website that has a virtual tour feature. The <lightning-carousel> component could be used to display images of different exhibits in the museum. You could click on the indicators to move from one exhibit to another, and the images would loop back to the beginning once you've seen all of them.",
      "Consider a university website that has a section for its campus. The <lightning-carousel> component could be used to display images of different parts of the campus, such as the library, the student union, the dormitories, and so on. The images would automatically scroll, giving you a virtual tour of the campus."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Carousel\n      description: A basic carousel with three images.\n    - name: autoScroll\n      label: Carousel Without Auto Scroll\n      description: A carousel with three images, with auto scrolling disabled.\n---\n\nA `lightning-carousel` component displays a series of images in a single\ncontainer, with image indicators and a control button\nbelow the image panel. Only images passed in `lightning-carousel-image`\ncomponents are supported.\n\nUse [`lightning-carousel-image`](bundle/lightning-carousel-image/documentation)\ncomponents nested in `lightning-carousel` to specify\nup to five images. For each image, optionally provide header and descriptive text\nthat the carousel displays below the image. You can also hyperlink the images.\n\nThe images are displayed in the order you list them in the `lightning-carousel` component.\n\nThe carousel displays one image at a time, and you can select particular\nimages by clicking the indicators. On mobile devices, you can\nalso swipe an image to scroll to the next image.\n\nBy default, the carousel auto scrolls and loops through the images repeatedly.\nEach image displays for 5 seconds before the carousel scrolls to the next image.\nThe control button enables you to pause and restart the automatic scrolling.\n\n#### Changing Carousel Behavior\n\nDisable auto scrolling and remove the control button by including the\n`disable-auto-scroll` attribute in the `lightning-carousel` tag. The user\nmust then use the indicator buttons to display each image.\n\nDisable continuous looping by including the `disable-auto-refresh` attribute. The\nimages scroll one time through and stop at the last image if you include `disable-auto-refresh`\nbut not `disable-auto-scroll`.\n\nChange the number of seconds each image displays using the `scroll-duration` attribute.\n\n#### Styling\n\nThis component inherits styling from\n[carousel](https://www.lightningdesignsystem.com/components/carousel) in the\nLightning Design System.\n\nTo implement additional styling for the `lightning-carousel` component, use the Lightning Design\nSystem [utility classes](https://www.lightningdesignsystem.com/utilities/alignment/).\n\n#### Example\n\nThis example creates a basic carousel with three images and disables automatic scrolling.\n\n```html\n<template>\n    <lightning-carousel disable-auto-scroll>\n        <lightning-carousel-image\n            src=\"path/to/carousel-01.jpg\"\n            header=\"First card\"\n            description=\"First card description\"\n            alternative-text=\"This is a card\"\n            href=\"https://www.example.com\"\n        >\n        </lightning-carousel-image>\n        <lightning-carousel-image\n            src=\"path/to/carousel-02.jpg\"\n            header=\"Second card\"\n            description=\"Second card description\"\n            alternative-text=\"This is a card\"\n            href=\"https://www.example.com\"\n        >\n        </lightning-carousel-image>\n        <lightning-carousel-image\n            src=\"path/to/carousel-03.jpg\"\n            header=\"Third card\"\n            description=\"Third card description\"\n            alternative-text=\"This is a card\"\n            href=\"https://www.example.com\"\n        >\n        </lightning-carousel-image>\n    </lightning-carousel>\n</template>\n```\n\n#### Accessibility\n\nUse the Tab key to move focus to the carousel, then tab again to focus on the indicator buttons.\nUse right and left arrow keys to scroll to the next or previous image.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class AutoScroll extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-size_3-of-4\">\n        <div class=\"slds-box slds-box_x-small slds-text-align_center slds-m-around_x-small\">Carousel With disable-auto-scroll Attribute\n        <lightning-carousel disable-auto-scroll>\n            <lightning-carousel-image\n                src = \"https://www.lightningdesignsystem.com/assets/images/carousel/carousel-01.jpg\"\n                header = \"First Card\"\n                description = \"First card description.\"\n                alternative-text = \"First card accessible description.\"\n                href = \"https://www.example.com\">\n            </lightning-carousel-image>\n            <lightning-carousel-image\n                src = \"https://www.lightningdesignsystem.com/assets/images/carousel/carousel-02.jpg\"\n                header = \"Second Card\"\n                description = \"Second card description.\"\n                alternative-text = \"Second card accessible description.\"\n                href = \"https://www.example.com\">\n            </lightning-carousel-image>\n            <lightning-carousel-image\n                src = \"https://www.lightningdesignsystem.com/assets/images/carousel/carousel-03.jpg\"\n                header = \"Third Card\"\n                description = \"Third card description.\"\n                alternative-text = \"Third card accessible description.\"\n                href = \"https://www.example.com\">\n            </lightning-carousel-image>\n        </lightning-carousel>\n        </div>\n  </div>\n</template>\n\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Basic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-size_3-of-4\">\n        <div class=\"slds-box slds-box_x-small slds-text-align_center slds-m-around_x-small\">Basic Carousel\n            <lightning-carousel>\n                <lightning-carousel-image\n                    src = \"https://www.lightningdesignsystem.com/assets/images/carousel/carousel-01.jpg\"\n                    header = \"First Card\"\n                    description = \"First card description.\"\n                    alternative-text = \"First card accessible description.\"\n                    href = \"javascript:void(0);\">\n                </lightning-carousel-image>\n                <lightning-carousel-image\n                    src = \"https://www.lightningdesignsystem.com/assets/images/carousel/carousel-02.jpg\"\n                    header = \"Second Card\"\n                    description = \"Second card description.\"\n                    alternative-text = \"Second card accessible description.\"\n                    href = \"javascript:void(0);\">\n                </lightning-carousel-image>\n                <lightning-carousel-image\n                    src = \"https://www.lightningdesignsystem.com/assets/images/carousel/carousel-03.jpg\"\n                    header = \"Third Card\"\n                    description = \"Third card description.\"\n                    alternative-text = \"Third card accessible description.\"\n                    href = \"javascript:void(0);\">\n                </lightning-carousel-image>\n            </lightning-carousel>\n        </div>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-carousel-image",
    "shortDescription": "This component allows for the display of up to five images in a carousel format, complete with optional headers, descriptions, and hyperlinks, providing an interactive and visually engaging user experience.",
    "relatedComponents": {
      "lightning-carousel": "required"
    },
    "publicApi": [
      {
        "name": "src",
        "typeSignature": "string",
        "examples": ["<lightning-carousel-image src='path/to/image.jpg'>", "<lightning-carousel-image src={imageUrl}>"]
      },
      {
        "name": "header",
        "typeSignature": "string",
        "examples": [
          "<lightning-carousel-image header='Image Header'>",
          "<lightning-carousel-image header={imageHeader}>"
        ]
      },
      {
        "name": "description",
        "typeSignature": "string",
        "examples": [
          "<lightning-carousel-image description='Image Description'>",
          "<lightning-carousel-image description={imageDescription}>"
        ]
      },
      {
        "name": "alternative-text",
        "typeSignature": "string",
        "examples": [
          "<lightning-carousel-image alternative-text='Alternative Text'>",
          "<lightning-carousel-image alternative-text={altText}>"
        ]
      },
      {
        "name": "href",
        "typeSignature": "string",
        "examples": [
          "<lightning-carousel-image href='https://www.example.com'>",
          "<lightning-carousel-image href={linkUrl}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're browsing an online clothing store. On the homepage, there's a rotating carousel of images showcasing the latest fashion trends. Each image in the <lightning-carousel-image> component has a title and a brief description of the trend, and when you click on an image, it takes you to a page where you can shop for items related to that trend.",
      "On a university's website, there's a <lightning-carousel-image> component on the homepage that displays images of the campus, student life, and academic programs. Each image has a title and a brief description, providing a snapshot of what the university has to offer. If you're interested in learning more about a particular aspect of the university, you can click on the image to be taken to a relevant page.",
      "Consider a non-profit organization's website. On the homepage, there's a <lightning-carousel-image> component that cycles through images of the organization's recent projects and initiatives. Each image has a title and a brief description, and when you click on an image, it takes you to a page where you can learn more about that project and make a donation.",
      "On a travel agency's website, there's a <lightning-carousel-image> component on the homepage that displays images of popular travel destinations. Each image has a title and a brief description, providing a glimpse of what each destination has to offer. If you're interested in a particular destination, you can click on the image to be taken to a page with more information and booking options.",
      "On a food blog, there's a <lightning-carousel-image> component that showcases images of featured recipes. Each image has a title and a brief description of the dish, and when you click on an image, it takes you to a page with the full recipe."
    ],
    "docs": "Use the `lightning-carousel-image` component to specify images to display in the\n[`lightning-carousel`](bundle/lightning-carousel/documentation) component.\nYou can specify up to five images. The images are displayed in the order you\nlist them in the `lightning-carousel` component.\n\nFor each image, use the `src` attribute to specify the path to the image.\nOptionally use `header` and `description` attributes to provide a header\nand descriptive text that the carousel displays below the image.\nYou can also hyperlink the images with the `href` attribute.\n\nUse the `alternative-text` attribute to supply assistive text for each image.\n\nThis component inherits styling from\n[carousel](https://www.lightningdesignsystem.com/components/carousel) in the\nLightning Design System.\n\nThis example creates a basic carousel with three images.\n\n```html\n<template>\n    <lightning-carousel>\n        <lightning-carousel-image\n            src=\"path/to/carousel-01.jpg\"\n            header=\"First card\"\n            description=\"First card description\"\n            alternative-text=\"This is a card\"\n            href=\"https://www.example.com\"\n        >\n        </lightning-carousel-image>\n        <lightning-carousel-image\n            src=\"path/to/carousel-02.jpg\"\n            header=\"Second card\"\n            description=\"Second card description\"\n            alternative-text=\"This is a card\"\n            href=\"https://www.example.com\"\n        >\n        </lightning-carousel-image>\n        <lightning-carousel-image\n            src=\"path/to/carousel-03.jpg\"\n            header=\"Third card\"\n            description=\"Third card description\"\n            alternative-text=\"This is a card\"\n            href=\"https://www.example.com\"\n        >\n        </lightning-carousel-image>\n    </lightning-carousel>\n</template>\n```\n\n#### Using Images in Your Org\n\nTo use images in your org, upload them as static resources in the Static Resources\npage in Setup. To reference a resource in `lightning-carousel-image`, use `{property}`\nsyntax in your `src` attribute.\n\nIf the image path is invalid or the image does not load because the user is\noffline or another reason, the description and alternative text are shown in\nplace of the image.\n\nThis example uses static resources uploaded as a single image, and images uploaded in a zip file.\n\n```html\n<template>\n    <div class=\"slds-size_1-of-4\">\n        <lightning-carousel>\n            <lightning-carousel-image\n                src={companyLogoUrl}\n                header=\"Company logo\"\n                description=\"Company logo uploaded to a static resource\"\n                alternative-text=\"Company logo\"\n            >\n            </lightning-carousel-image>\n            <lightning-carousel-image\n                src={product1Url}\n                header=\"Fantastic product 1\"\n                description=\"Fantastic product image in a zip file\"\n                alternative-text=\"Fantastic product 1\"\n            >\n            </lightning-carousel-image>\n            <lightning-carousel-image\n                src={product2Url}\n                header=\"Fantastic product 2\"\n                description=\"Fantastic product image in a zip file\"\n                alternative-text=\"Fantastic product 2\"\n            >\n            </lightning-carousel-image>\n        </lightning-carousel>\n    </div>\n</template>\n```\n\nThe company logo was uploaded as a single image to a static resource named `company_logo` and imported as `companyLogo`. The Product1 and Product2 images were uploaded in a zip file to a static resource named `company_products` and imported as `companyProducts`.\n\n```js\nimport { LightningElement } from 'lwc';\nimport companyLogo from '@salesforce/resourceUrl/company_logo';\nimport companyProducts from '@salesforce/resourceUrl/company_products';\n\nexport default class CarouselStaticResources extends LightningElement {\n    // Expose the static resource URL for use in the template\n    companyLogoUrl = companyLogo;\n\n    // Expose URL of assets included inside an archive file\n    product1Url = companyProducts + '/product1.png';\n    product2Url = companyProducts + '/product2.png';\n}\n```\n\n#### Accessibility\n\nUse the `alternative-text` attribute to specify assistive text for each image.\n",
    "examples": []
  },
  {
    "tagName": "lightning-checkbox-group",
    "shortDescription": "This component is a group of checkboxes that allows users to select single or multiple options, with features for required selection, disabled selection, input validation, and customizable styling, providing an interactive and accessible user experience.",
    "relatedComponents": {
      "lightning-input": "optional",
      "lightning-button": "optional"
    },
    "publicApi": [
      {
        "name": "name",
        "typeSignature": "string",
        "examples": ["<lightning-checkbox-group name=\"checkboxGroup\">"]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": [
          "<lightning-checkbox-group label=\"Checkbox Group\">",
          "<lightning-checkbox-group label=\"Select a color\">"
        ]
      },
      {
        "name": "options",
        "typeSignature": "{ label: string, value: string }[]",
        "examples": ["<lightning-checkbox-group options={options}>"]
      },
      {
        "name": "value",
        "typeSignature": "string[]",
        "examples": ["<lightning-checkbox-group value={value}>"]
      },
      {
        "name": "onchange",
        "typeSignature": "(ev: CustomEvent & { detail: { value: string[] } }) => void",
        "examples": ["<lightning-checkbox-group onchange={handleChange}>"]
      },
      {
        "name": "required",
        "typeSignature": "boolean",
        "examples": ["<lightning-checkbox-group required>"]
      },
      {
        "name": "message-when-value-missing",
        "typeSignature": "string",
        "examples": ["<lightning-checkbox-group message-when-value-missing=\"Custom error message\">"]
      },
      {
        "name": "disabled",
        "typeSignature": "boolean",
        "examples": ["<lightning-checkbox-group disabled>"]
      },
      {
        "name": "variant",
        "typeSignature": "'label-hidden' | 'label-inline' | 'label-stacked' | 'standard'",
        "examples": [
          "<lightning-checkbox-group variant=\"label-hidden\">",
          "<lightning-checkbox-group variant=\"label-inline\">",
          "<lightning-checkbox-group variant=\"label-stacked\">",
          "<lightning-checkbox-group variant=\"standard\">"
        ]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": ["<lightning-checkbox-group class=\"slds-box\">"]
      }
    ],
    "useCases": [
      "Imagine you're filling out a survey about your favorite TV shows, and you're asked to select all the genres you enjoy. A <lightning-checkbox-group> could be used here to list all the genres as checkboxes, allowing you to select multiple options.",
      "You're signing up for a new social media platform and during the registration process, you're asked to select your interests from a list. This list could be implemented using a <lightning-checkbox-group>, allowing you to select multiple interests.",
      "You're ordering a pizza online and you're asked to select all the toppings you want. A <lightning-checkbox-group> could be used here to list all the toppings as checkboxes, allowing you to select multiple options.",
      "You're booking a flight and you're asked to select all the amenities you would like to add to your booking. A <lightning-checkbox-group> could be used here to list all the amenities as checkboxes, allowing you to select multiple options.",
      "You're filling out a job application and you're asked to select all the skills you have from a list. This list could be implemented using a <lightning-checkbox-group>, allowing you to select multiple skills.",
      "You're customizing a product online and you're asked to select all the features you want to add to your product. A <lightning-checkbox-group> could be used here to list all the features as checkboxes, allowing you to select multiple options."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Checkbox Group\n      description: A checkbox group contains at least two checkboxes. This example presets the selected value to the first option.\n    - name: required\n      label: Checkbox Group with Required Selection\n      description: This checkbox group requires a selection by specifying the required attribute. If you do not select an option after first interaction, an error is displayed.\n    - name: disabled\n      label: Disabled Checkbox Group\n      description: This checkbox group specifies the disabled attribute. The disabled options are grayed out and you can't change the selection.\n---\n\nA `lightning-checkbox-group` component represents a checkbox group that enables\nselection of single or multiple options.\n\nIf the `required` attribute is set, at least one checkbox must be\nselected. When a user interacts with the checkbox group and doesn't make a\nselection, an error message is displayed. You can provide a custom error\nmessage using the `message-when-value-missing` attribute.\n\nIf the `disabled` attribute is set, checkbox selections can't be\nchanged.\n\nThis example creates a checkbox group with two options and `option1` is\nselected by default. At least one checkbox must be selected because the `required`\nattribute is specified.\n\n```html\n<template>\n    <lightning-checkbox-group\n        name=\"checkboxGroup\"\n        label=\"Checkbox Group\"\n        options={options}\n        value={value}\n        onchange={handleChange}\n        required\n    >\n    </lightning-checkbox-group>\n</template>\n```\n\nThe `value` attribute contains an array of checkboxes. To select a checkbox, pass in its value to the `value` attribute.\nIn this example, only `option1` is selected.\n\n```javascript\n//mycomponentname.js\n\nimport { LightningElement } from 'lwc';\nexport default class MyComponentName extends LightningElement {\n    options = [\n        { label: 'Ross', value: 'option1' },\n        { label: 'Rachel', value: 'option2' },\n    ];\n\n    // Select option1 by default\n    value = ['option1'];\n\n    handleChange(event) {\n        const changeValue = event.detail.value;\n        alert(changeValue);\n    }\n}\n```\n\nTo retrieve the values when a checkbox\nis selected or deselected, use `event.detail.value` in the `change` event handler.\n\n#### Creating Checkboxes\n\nTo create checkboxes, pass in the following properties to the `options` attribute.\n\n| Property | Type   | Description                                                    |\n| -------- | ------ | -------------------------------------------------------------- |\n| label    | string | The text that displays next to a checkbox.                     |\n| value    | string | The string that's used to identify which checkbox is selected. |\n\n#### Input Validation\n\nClient-side input validation is available for this component. For example, an error message is displayed when the checkbox group is marked required and no option is selected. Note that a disabled checkbox group is always valid.\n\nThe validation occurs for the checkbox group, not for an individual checkbox. To override the default message \"Complete this field\" displayed when a selection on a checkbox group is required and no option is selected, use the `message-when-value-missing` attribute. This message is displayed when you remove focus from the checkbox group.\n\nThe `validity` attribute returns the ValidityState object, with the following supported properties.\n\n-   `valid`: Returns true if the checkbox group meets all its validation constraints.\n-   `valueMissing`: Returns true if a selection in the checkbox group is required but no checkbox is selected.\n\nOther properties such as `badInput` are not supported.\n\nThis example creates a checkbox group that requires a selection and a button that checks validity when clicked.\n\n```html\n<template>\n    <lightning-checkbox-group\n        label=\"Select a color\"\n        options={options}\n        value={value}\n        required\n    ></lightning-checkbox-group>\n    <lightning-button\n        label=\"Check validity\"\n        onclick={handleValidity}\n    ></lightning-button>\n</template>\n```\n\nFor checkbox groups that are required, the `checkValidity()` method returns true if at least one checkbox is selected, or false if none is selected. Calling `checkValidity()` is equivalent to returning `validity.valid` on the checkbox group.\n\nTo programmatically display error messages on an invalid checkbox group, use the `reportValidity()` method.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class CheckboxGroupRequiredValidity extends LightningElement {\n    value = [];\n    message = '';\n\n    get options() {\n        return [\n            { label: 'Red', value: 'red' },\n            { label: 'Green', value: 'green' },\n            { label: 'Blue', value: 'blue' },\n        ];\n    }\n    handleValidity(e) {\n        var checkboxGroup = this.template.querySelector(\n            'lightning-checkbox-group'\n        );\n        if (checkboxGroup.checkValidity()) {\n            this.message = \"That's a great selection!\";\n        } else {\n            // Shows the error immediately without user interaction\n            checkboxGroup.reportValidity();\n            this.message = 'Select your favorite color and try again.';\n        }\n    }\n}\n```\n\nFor custom validity error messages, display the message using `setCustomValidity()` and `reportValidity()`. `setCustomValidity()` overrides the error message you provide using the `message-when-value-missing` attribute. For more information, see the [lightning-input](/docs/component-library/bundle/lightning-input/documentation) documentation.\n\n#### Component Styling\n\n`lightning-checkbox-group` implements the [checkbox](https://www.lightningdesignsystem.com/components/checkbox/) blueprint in the Salesforce Lightning Design System (SLDS).\n\nYou can use a combination of the `variant` and `class` attributes to customize the checkbox group.\n\n##### Variants\n\nUse the `variant` attribute with one of these values to apply different label positioning.\n\n-   `label-hidden` hides the checkbox group label but make it available to assistive technology. This variant does not hide the option labels.\n-   `label-inline` horizontally aligns the checkbox group label and options.\n-   `label-stacked` places the checkbox group label above the options.\n-   `standard` is the default value, which displays the checkbox group label above the options.\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds a box theme around the checkbox group using an SLDS class.\n\n```html\n<lightning-checkbox-group\n    class=\"slds-box\"\n    label=\"Select a color\"\n    options={options}\n    value={value}\n>\n</lightning-checkbox-group>\n```\n\nTo apply custom styling, use the `:host` selector. Use SLDS styling hooks to customize the component's styles. For example, change the checkmark color and background color when an option is selected.\n\n```css\n:host {\n    --slds-c-checkbox-color-background-checked: green;\n    --slds-c-checkbox-mark-color-foreground: yellow;\n}\n```\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/checkbox/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\n#### Usage Considerations\n\n`lightning-checkbox-group` is useful for grouping a set of checkboxes. If you\nhave a single checkbox, use `lightning-input type=\"checkbox\"` instead.\n\n#### Accessibility\n\nThe checkbox group is nested in a `fieldset` element that contains a `legend`\nelement. The legend contains the `label` value. The `fieldset` element enables\ngrouping of related checkboxes to facilitate tabbing navigation and speech\nnavigation for accessibility purposes. Similarly, the `legend` element\nimproves accessibility by enabling a caption to be assigned to the `fieldset`.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class CheckboxGroupBasic extends LightningElement {\n    value = ['option1'];\n\n    get options() {\n        return [\n            { label: 'Ross', value: 'option1' },\n            { label: 'Rachel', value: 'option2' },\n        ];\n    }\n\n    get selectedValues() {\n        return this.value.join(',');\n    }\n\n    handleChange(e) {\n        this.value = e.detail.value;\n    }\n}\n",
        "html": "<template>\n    <lightning-checkbox-group name=\"Checkbox Group\"\n                              label=\"Checkbox Group\"\n                              options={options}\n                              value={value}\n                              onchange={handleChange}></lightning-checkbox-group>\n    <p>Selected Values are: {selectedValues}</p>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class CheckboxGroupDisabled extends LightningElement {\n    value = ['option1'];\n\n    get options() {\n        return [\n            { label: 'Ross', value: 'option1' },\n            { label: 'Rachel', value: 'option2' },\n        ];\n    }\n}\n",
        "html": "<template>\n    <lightning-checkbox-group name=\"Checkbox Group\"\n                              label=\"Checkbox Group\"\n                              options={options}\n                              value={value}\n                              disabled></lightning-checkbox-group>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class CheckboxGroupRequired extends LightningElement {\n    value = [];\n\n    get options() {\n        return [\n            { label: 'Ross', value: 'option1' },\n            { label: 'Rachel', value: 'option2' },\n        ];\n    }\n}\n",
        "html": "<template>\n    <lightning-checkbox-group name=\"Checkbox Group\"\n                              label=\"Checkbox Group\"\n                              options={options}\n                              value={value}\n                              required></lightning-checkbox-group>\n</template>"
      }
    ]
  },
  {
    "tagName": "lightning-combobox",
    "shortDescription": "This component is an input element that allows users to make a single selection from a dropdown list of options, providing an interactive and accessible user experience.",
    "relatedComponents": {
      "lightning-dual-listbox": "optional",
      "lightning-input": "optional"
    },
    "publicApi": [
      {
        "name": "name",
        "typeSignature": "string",
        "examples": ["<lightning-combobox name=\"status\">"]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-combobox label=\"Status\">"]
      },
      {
        "name": "placeholder",
        "typeSignature": "string",
        "examples": ["<lightning-combobox placeholder=\"Choose Status\">"]
      },
      {
        "name": "value",
        "typeSignature": "string",
        "examples": ["<lightning-combobox value={value}>"]
      },
      {
        "name": "onchange",
        "typeSignature": "(ev: CustomEvent & { detail: { value: string } }) => void",
        "examples": ["<lightning-combobox onchange={handleChange}>"]
      },
      {
        "name": "options",
        "typeSignature": "{ value: string, label: string, description?: string }[]",
        "examples": ["<lightning-combobox options={statusOptions}>"]
      },
      {
        "name": "required",
        "typeSignature": "boolean",
        "examples": ["<lightning-combobox required>"]
      },
      {
        "name": "validity",
        "typeSignature": "ValidityState",
        "examples": []
      },
      {
        "name": "message-when-value-missing",
        "typeSignature": "string",
        "examples": ["<lightning-combobox message-when-value-missing=\"Please select a value\">"]
      },
      {
        "name": "onopen",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-combobox onopen={handleOpen}>"]
      }
    ],
    "useCases": [
      "In an online survey, a <lightning-combobox> could be used to allow users to select their country of residence from a dropdown list. The user would click on the box, see a list of countries, and select their country. The selected country would then be displayed in the box.",
      "In a web-based project management tool, a <lightning-combobox> could be used to allow users to select the status of a task. The user would click on the box, see a list of statuses such as 'New', 'In Progress', and 'Finished', and select the appropriate status. The selected status would then be displayed in the box.",
      "In an online form, a <lightning-combobox> could be used to allow users to select their preferred contact method. The user would click on the box, see a list of contact methods such as 'Email', 'Phone', and 'Mail', and select their preferred method. The selected method would then be displayed in the box."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Combobox\n      description: A combobox enables you to select only one option. Use the onchange event handler to capture what's selected.\n    - name: required\n      label: Combobox with Selection Required\n      description: This combobox requires a selection by specifying the required attribute. If you do not select an option after first interaction, an error is displayed.\n    - name: disabled\n      label: Disabled Combobox\n      description: A disabled combobox is grayed out and can't be clicked.\n---\n\n`lightning-combobox` is an input element that enables single selection from a\nlist of options. The result of the selection is stored as the value of the\ninput. Multiple selection is currently not supported. To support multiple selection, use `lightning-dual-listbox` instead.\n\nThis component implements the\n[combobox](https://www.lightningdesignsystem.com/components/combobox/) blueprint in the Salesforce Lightning Design System.\n\nThis example creates a list of options with a default selection that's specified with the `value` attribute.\nThe `options` attribute specifies the name of an array of items for the dropdown list.\n\n```html\n<template>\n    <lightning-combobox\n        name=\"status\"\n        label=\"Status\"\n        placeholder=\"Choose Status\"\n        value={value}\n        onchange={handleChange}\n        options={statusOptions}\n    >\n    </lightning-combobox>\n    <p>Selected option: {value}</p>\n</template>\n```\n\nIn your JavaScript, define an array of options. Each option corresponds to a list item on the\ndropdown list. Define the content of each option by specifying a `value` property and\na `label` property. The `label` value is displayed for the item in the rendered dropdown list, while\nthe `value` property's value is stored when the item is selected.\n\nDefine an optional `description` property to add a line of descriptive text for each option. The\ndescriptive text displays below the label of the list item.\nWhen adding descriptions, specify a description for each item in a list.\nIf some items are missing descriptions, the text of the items can be misaligned.\n\n```javascript\nimport { LightningElement } from 'lwc';\nexport default class ComboboxExample extends LightningElement {\n    statusOptions = [\n        { value: 'new', label: 'New', description: 'A new item' },\n        {\n            value: 'in-progress',\n            label: 'In Progress',\n            description: 'Currently working on this item',\n        },\n        {\n            value: 'finished',\n            label: 'Finished',\n            description: 'Done working on this item',\n        },\n    ];\n\n    value = 'new';\n\n    handleChange(event) {\n        // Get the string of the \"value\" attribute on the selected option\n        this.value = event.detail.value;\n    }\n}\n```\n\nSelecting an option triggers the `change` event, which calls the\n`handleChange` function. To check which option has been clicked,\nuse `event.detail.value`.\n\n#### Input Validation\n\nClient-side input validation is available for this component. You can make\nthe selection required by adding the `required` attribute. An error message is\nautomatically displayed when an item is not selected and the element is required.\n\nTo check the validity states of an input, use the `validity` attribute, which\nis based on the `ValidityState` object. You can access the validity states in\nyour Javascript. This `validity` attribute returns an object with\n`boolean` attributes. See [lightning-input](/docs/component-library/bundle/lightning-input/documentation) for more information.\n\nYou can override the default message by providing your own value for\n`message-when-value-missing`.\n\n#### Usage Considerations\n\nSpecial characters like `\"` must be escaped. For example, you want to display\n`\"New\"`.\n\n```javascript\nconst options = [\n    { value: '\"new\"', label: '\"New\"' },\n    { value: 'expired', label: 'Expired' },\n];\n```\n\nWhen using single quotes in your value, escape the quote with a double slash\ninstead of a single slash.\n\n`lightning-combobox` doesn't currently support autocomplete or typeahead. The `autocomplete` attribute is reserved for internal use.\n\n`lightning-combobox` appears above all modals and the Salesforce global header.\n\nOn mobile devices, `lightning-combobox` has the following limitations.\n\n-   The dropdown menu doesn't scroll correctly when there isn't enough room to display the complete list of options.\n-   The mobile viewport doesn't display the dropdown menu correctly especially if the component is placed near the bottom of the page.\n\nWe recommend using the HTML `<select>` element on mobile instead.\n\n#### Accessibility\n\nYou must provide a text label for accessibility to make the information\navailable to assistive technology. The `label` attribute creates an HTML label\nelement for your component. To hide a label from view and make it\navailable to assistive technology, use the `label-hidden` variant.\n\nThis component uses `button` elements for select-only comboboxes to comply with the [Lightning Design System combobox blueprint](https://www.lightningdesignsystem.com/components/combobox/#%22Input%22-markup).\n\n#### Custom Events\n\n**`change`**\n\nThe event fired when an item is selected in the combobox.\n\nThe `change` event returns the following parameter.\n\n| Parameter     | Type   | Description                       |\n| ------------- | ------ | --------------------------------- |\n| selectedValue | string | The value of the selected option. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                                                    |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | true  | This event propagates outside of the component in which it was dispatched.                                |\n\n**`open`**\n\nThe event fired when the dropdown is opened.\n\nThe `open` event does not return any parameters.\n\n| Property   | Value | Description                                                                                                |\n| ---------- | ----- | ---------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                                |\n| cancelable | false | This event has no default behavior that can be canceled. You cannot call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside of the component in which it was dispatched.                         |\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ComboboxBasic extends LightningElement {\n    value = 'inProgress';\n\n    get options() {\n        return [\n            { label: 'New', value: 'new' },\n            { label: 'In Progress', value: 'inProgress' },\n            { label: 'Finished', value: 'finished' },\n        ];\n    }\n\n    handleChange(event) {\n        this.value = event.detail.value;\n    }\n}\n",
        "html": "<template>\n    <lightning-combobox\n            name=\"progress\"\n            label=\"Status\"\n            value={value}\n            placeholder=\"Select Progress\"\n            options={options}\n            onchange={handleChange} ></lightning-combobox>\n\n    <p>Selected value is: {value}</p>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ComboboxDisabled extends LightningElement {\n    value = 'inProgress';\n\n    get options() {\n        return [\n            { label: 'New', value: 'new' },\n            { label: 'In Progress', value: 'inProgress' },\n            { label: 'Finished', value: 'finished' },\n        ];\n    }\n}\n",
        "html": "<template>\n    <lightning-combobox\n            name=\"progress\"\n            label=\"Status\"\n            value=\"\"\n            placeholder=\"Select Progress\"\n            options={options}\n            onchange={handleChange}\n            disabled\n    ></lightning-combobox>\n    <p>Selected value is: {value}</p>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ComboboxRequired extends LightningElement {\n    value = 'inProgress';\n\n    get options() {\n        return [\n            { label: 'New', value: 'new' },\n            { label: 'In Progress', value: 'inProgress' },\n            { label: 'Finished', value: 'finished' },\n        ];\n    }\n\n    handleChange(event) {\n        this.value = event.detail.value;\n    }\n}\n",
        "html": "<template>\n    <lightning-combobox\n            name=\"progress\"\n            label=\"Status\"\n            value=\"\"\n            placeholder=\"Select Progress\"\n            options={options}\n            onchange={handleChange}\n            required\n    ></lightning-combobox>\n    <p>Selected value is: {value}</p>\n</template>"
      }
    ]
  },
  {
    "tagName": "lightning-confirm",
    "shortDescription": "This component allows the creation of a confirm modal within your application, providing a consistent user experience by asking for user confirmation before proceeding, with the modal's appearance and behavior customizable through various attributes.",
    "relatedComponents": {
      "lightning-button": "optional"
    },
    "publicApi": [
      {
        "name": "message",
        "typeSignature": "string",
        "examples": [
          "<lightning-confirm message='this is the prompt message'>",
          "<lightning-confirm message={myMessage}>"
        ]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-confirm label='this is the aria-label value'>", "<lightning-confirm label={myLabel}>"]
      },
      {
        "name": "variant",
        "typeSignature": "'header' | 'headerless'",
        "examples": [
          "<lightning-confirm variant='header'>",
          "<lightning-confirm variant='headerless'>",
          "<lightning-confirm variant={myVariant}>"
        ]
      },
      {
        "name": "theme",
        "typeSignature": "'default' | 'shade' | 'inverse' | 'alt-inverse' | 'success' | 'info' | 'warning' | 'error' | 'offline'",
        "examples": [
          "<lightning-confirm theme='default'>",
          "<lightning-confirm theme='success'>",
          "<lightning-confirm theme={myTheme}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're using an online shopping platform and you've added a few items to your cart. When you click on the 'Checkout' button, a <lightning-confirm> modal pops up asking you to confirm your purchase. This is to ensure that you've reviewed your cart and are ready to proceed with the purchase.",
      "Consider a scenario where you're using a project management tool. You've just completed a task and you click on the 'Mark as Complete' button. A <lightning-confirm> modal appears asking you to confirm if you've really completed the task. This is to prevent accidental clicks and ensure that the task is indeed complete.",
      "Suppose you're using a social media platform and you decide to delete a post. When you click on the 'Delete' button, a <lightning-confirm> modal pops up asking you to confirm the deletion. This is to prevent accidental deletions and give you a chance to change your mind.",
      "Imagine you're using an email client and you've composed an email. When you click on the 'Send' button, a <lightning-confirm> modal appears asking you to confirm if you want to send the email. This is to ensure that you've reviewed the email and are ready to send it.",
      "Consider a scenario where you're using a banking app and you want to transfer money. When you click on the 'Transfer' button, a <lightning-confirm> modal pops up asking you to confirm the transfer. This is to ensure that you've entered the correct details and are ready to proceed with the transfer.",
      "Suppose you're using a content management system and you want to publish a post. When you click on the 'Publish' button, a <lightning-confirm> modal appears asking you to confirm the publication. This is to ensure that you've reviewed the post and are ready to publish it."
    ],
    "docs": "The `lightning/confirm` module lets you create a confirm modal within your component. Use `LightningConfirm` on your component to ask the user to respond before they continue.\n\nUse `LightningConfirm.open()` instead of the native `window.confirm()` for a more consistent user experience. They have similar functions, but `LightningConfirm.open()` works in cross-origin iframes, where the `.confirm()` method is no longer supported in Chrome and Safari. Unlike `window.confirm()`, `LightningConfirm.open()` doesn't halt execution on the page, it returns a Promise. Use `async`/`await` or `.then()` for any code you want to execute after the confirm has closed.\n\nImport `LightningConfirm` from the `lightning/confirm` module in the component that will launch the confirm modal, and call `LightningConfirm.open()` with your desired attributes.\n\nThis example creates a headerless confirm modal with two buttons, **OK** and **Cancel**. The `.open()` function returns a promise that resolves to true when you click **OK** and false when you  click **Cancel**.\n\n```html\n<!-- c/myApp.html -->\n<template>\n    <lightning-button onclick={handleConfirmClick} label=\"Open Confirm Modal\">\n    </lightning-button>\n</template>\n```\n\n```javascript\nimport { LightningElement } from 'lwc';\nimport LightningConfirm from 'lightning/confirm';\n\nexport default class MyApp extends LightningElement {\n    async handleConfirmClick() {\n        const result = await LightningConfirm.open({\n            message: 'this is the prompt message',\n            variant: 'headerless',\n            label: 'this is the aria-label value',\n            // setting theme would have no effect\n        });\n        //Confirm has been closed\n        //result is true if OK was clicked\n        //and false if cancel was clicked\n    }\n}\n```\n\n#### Component Styling\n\nThis component uses the Salesforce Lightning Design System (SLDS) [`prompt` blueprint](https://www.lightningdesignsystem.com/components/prompt/#site-main-content).\n\n`LightningConfirm` supports the following attributes:\n\n-   `message`: Message text that displays in the confirm.\n-   `label`: Header text, also used as the `aria-label`. Default string is `Confirm`.\n-   `variant`: Two values, `header` and `headerless`. Default value is `header`.\n-   `theme`: Color theme for the header. The `theme` attribute supports the following [options](https://www.lightningdesignsystem.com/utilities/themes/#site-main-content) from SLDS:\n    -   `default`: white\n    -   `shade`: gray\n    -   `inverse`: dark blue\n    -   `alt-inverse`: darker blue\n    -   `success`: green\n    -   `info`: gray-ish blue\n    -   `warning`: yellow\n    -   `error`: red\n    -   `offline`: ​black​\n\nIf an invalid value is provided, `LightningConfirm` uses the `default` theme. `LightningConfirm` ignores the `style` attribute.\n\n#### Testing Your Component's Confirm\n\nCode using `LightningConfirm` can be tested by mocking the `LightningConfirm.open()` method.\n\nThe example below uses a button to open a confirm dialog and sets the result in a template.\n\n```html\n<button data-button onclick={handleClick}>Open Confirm</button>\n<div data-result>{result}</div>\n```\n\n```js\nimport LightningConfirm from 'lightning/confirm';\njest.mock('lightning/confirm');\n​\ntest(() => {\n    // Create and appendChild(element)\n​\n    const buttonEle = element.shadowRoot.querySelector('[data-button]');\n    const resultEle = element.shadowRoot.querySelector('[data-result]');\n​\n    // Mock .open()\n    // Pass true if testing when user clicks \"OK\"\n    // Pass false if testing when user clicks \"Cancel\"\n    LightningConfirm.open = jest.fn().mockResolvedValue(true);\n    // Initial value\n    expect(resultEle.textContent).toBe('unknown');\n    // Click modal open button\n    buttonEle.click();\n​\n    // Click handler render cycle\n    await Promise.resolve();\n    // Render cycle triggered by tracked value {result}\n    await Promise.resolve();\n​\n    // Verify result is set in the template\n    expect(resultEle.textContent).toBe('true');\n    // Open triggered once\n    expect(LightningConfirm.open.mock.calls).toHaveLength(1);\n})\n```\n",
    "examples": []
  },
  {
    "tagName": "lightning-context",
    "shortDescription": "This component provides a method for passing data through the component tree, allowing child components to consume context data without manual prop passing, enhancing the user experience by enabling theme consistency across components.",
    "relatedComponents": {},
    "publicApi": [],
    "useCases": [
      "Imagine you're using a website for a clothing store, and you've selected 'dark mode' as your preferred theme. The <lightning-context> component could be used to ensure that every page you visit on the site, from the homepage to individual product pages, maintains your 'dark mode' setting without you having to select it again each time.",
      "Consider a language learning app where you've selected Spanish as your language of choice. The <lightning-context> component could be used to ensure that all the lessons, quizzes, and other resources you access are presented in Spanish, without you having to select your language preference each time you start a new activity.",
      "Think about a news website where you've chosen to filter articles by a specific topic, such as 'technology'. The <lightning-context> component could be used to ensure that as you navigate through different sections of the site, the articles displayed continue to be filtered by your chosen topic.",
      "Imagine a music streaming platform where you've selected a specific genre as your favorite. The <lightning-context> component could be used to ensure that all the music recommendations you receive, across different sections of the platform, are based on your selected genre.",
      "Consider a weather app where you've set your location to New York City. The <lightning-context> component could be used to ensure that all the weather forecasts and alerts you see, no matter which part of the app you're in, are relevant to New York City."
    ],
    "docs": "# Context\n\n`lightning/context` provides a way to pass data through the component tree without having to pass props down manually at every level.\n\nExtend this module to provide arbitrary context that can be consumed via wire by any child Lightning web component.\n\n`lightning/context` follows https://github.com/salesforce/lwc-rfcs/blob/master/text/0000-context-service.md.\n\n### Usage\n\nCreate a new class that extends from `LightningContext` to provide a contextual `theme` value to all its children:\n\n```js\n// x/themeContext/themeContext.js\n\n// Provider Definition\nimport LightningContext from 'lightning/context';\n\n// LightningContext is abstract, is intended to be extended\nexport default class ThemeContext extends LightningContext {\n    @api get theme() {\n        return this.getContextValue();\n    }\n\n    set theme(v) {\n        this.setContextValue(v);\n    }\n}\n```\n\nAny component with access to `<x-theme-context>` element can consume the `theme` value.\n\n```js\n// x/bar/bar.js\n\nimport ThemeContext from 'x/themeContext';\n\n// Consumer\nexport default class XBar extends LightningElement {\n    @wire(ThemeContext.Provider) x;\n}\n```\n\nThis means, any structure that involves `<x-theme-context>` and `<x-bar>` can share the `theme` value, e.g.:\n\n```html\n<template>\n    <x-theme-context theme=\"dark\">\n        <x-bar></x-bar>\n    </x-theme-context>\n</template>\n```\n\nIt means that `x-bar` or any of the descendants of `x-theme-context` can wire to `ThemeContext.Provider` to obtain the `theme value.\n\n### Specification\n\n-   By default, the provider accepts content in the form of the default slot.\n-   A provider can redefine the default template.\n-   When a provider that provides the context on connect, the consumer will have the context available during the first render.\n-   When a provider does not provide the context on connect, the consumer will get null as context during first rendering\n-   When a provider changes the context value, all consumers wired to it will receive an updated context.\n-   The provider should be able to produce a context as `{ error }` to indicate that there was an error resolving the context data under certain circumstances.\n\n-   The consumer can wire to a method in order to access the context data.\n-   The consumer wired to a context provider that is not descendant of it in the DOM, will get the default context from provider (getDefaultContext()).\n-   The consumer will receive the same context object reference regardless of how may times is connected/disconnected.\n-   Two consumers wired to the same provider and descendant of it in the DOM, should receive the same context reference. Example:\n\n```html\n<x-provider>\n    <x-consumer></x-consumer>\n    <x-another-consumer></x-another-consumer>\n</x-provider>\n```\n\n-   When there is two instances of the same provider in the same DOM hierarchy, a descendant consumer wired to the same provider class will use the context value of the closest provider instance up in the hierarchy. Example:\n\n```html\n<x-provider>\n    <x-provider>\n        <x-consumer></x-consumer>\n    </x-provider>\n</x-provider>\n```\n\n-   A consumer cannot modify the provided context.\n",
    "examples": [
      {
        "js": "import { LightningElement, track } from 'lwc';\n\nconst themesToggleMap = { light: 'dark', dark: 'light' };\n\nexport default class Basic extends LightningElement {\n    @track _theme = 'dark';\n\n    toggleTheme() {\n        this._theme = themesToggleMap[this._theme];\n    }\n}\n",
        "html": "<template>\n    <context-provider theme={_theme}>\n        <context-consumer></context-consumer>\n    </context-provider>\n\n    <lightning-button label=\"Toggle theme (light/dark)\" onclick={toggleTheme}></lightning-button>\n</template>\n"
      },
      {
        "js": "import { LightningElement, wire } from 'lwc';\nimport ContextProvider from 'context/provider';\n\nexport default class Consumer extends LightningElement {\n    // eslint-disable-next-line @lwc/lwc/valid-wire\n    @wire(ContextProvider.Provider) context;\n\n    get theme() {\n        return this.context.theme;\n    }\n\n    get themeClass() {\n        return `${this.theme}-theme`;\n    }\n}\n",
        "html": "<template>\n    <div class={themeClass}>\n        <h1 class={theme}>Consumer with theme: {theme}</h1>\n    </div>\n</template>\n",
        "css": ".dark-theme {\n    background-color: black;\n    color: white;\n}\n\n.light-theme {\n    background-color: bisque;\n    color: saddlebrown;\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-datatable",
    "shortDescription": "This component is a versatile table element that supports a variety of data types and allows for customization, providing users with a dynamic and interactive data viewing experience.",
    "relatedComponents": {
      "lightning-formatted-lookup": "optional"
    },
    "publicApi": [],
    "useCases": [
      "Imagine you're a sales manager using a CRM system to track your team's sales opportunities. You have a list of opportunities, each with a unique ID and a name. The <lightning-datatable> component could be used to display this list in a table format, where each row represents an opportunity and the columns display the opportunity's ID and name.",
      "As a customer service representative, you might use a system to manage customer complaints. Each complaint has a unique ID and a description. The <lightning-datatable> component could be used to display these complaints in a table, where each row represents a complaint and the columns display the complaint's ID and description.",
      "Suppose you're a project manager using a project management tool to track tasks. Each task has a unique ID, a name, and a status. The <lightning-datatable> component could be used to display these tasks in a table, where each row represents a task and the columns display the task's ID, name, and status.",
      "As a human resources manager, you might use a system to manage employee records. Each employee has a unique ID, a name, and a job title. The <lightning-datatable> component could be used to display these records in a table, where each row represents an employee and the columns display the employee's ID, name, and job title.",
      "Imagine you're a librarian using a library management system to track books. Each book has a unique ID and a title. The <lightning-datatable> component could be used to display these books in a table, where each row represents a book and the columns display the book's ID and title.",
      "As a warehouse manager, you might use a system to manage inventory. Each item has a unique ID and a description. The <lightning-datatable> component could be used to display these items in a table, where each row represents an item and the columns display the item's ID and description."
    ],
    "docs": "# lightning-datatable\n\n> This document is for internal use only. It supplements the [lightning-datatable documentation](https://developer.salesforce.com/docs/component-library/bundle/lightning-datatable) in the Component Library.\n\n## Working with Internal Data Types\n\n> This section supplements the [Formatting with Data Types](https://developer.salesforce.com/docs/component-library/bundle/lightning-datatable/documentation) section in the Component Library.\n\n`lightning-datatable` supports many data types. See the getters for all data types in [`primitiveCellFactory.js`](../primitiveCellFactory/primitiveCellFactory.js).\n\nThe undocumented `reference` type is an internal-only type for lookup fields. Currently, inline editing is not supported for lookup fields in `lightning-datatable`.\n\nTo configure a column using the `reference` type, update the `columns` definition.\n\n```js\n{\n    label: 'Records',\n    fieldName: 'record',\n    type: 'reference',\n    typeAttributes: { displayValue: {fieldName: 'recordDisplay'}}\n},\n```\n\nThe `fieldName` corresponds to the record Id. To display a different label on each row, pass the `displayValue` to `typeAttributes`\nand pass the value to the `data` definition.\n\n```js\n[\n    {\n        recordDisplay: 'Opportunity 1',\n        record: '006R0000002yecsIAA',\n    },\n    {\n        recordDisplay: 'Opportunity 2',\n        record: '006R0000002yecsIAB',\n    },\n];\n```\n\nFor supported type attributes, see the `lightning-formatted-lookup` implementation in [`cellWithStandardLayout.html`](../primitiveCellFactory/cellWithStandardLayout.html).\n\n## Working with Custom Data Types\n\n> This section supplements the [Creating Custom Data Types](https://developer.salesforce.com/docs/component-library/bundle/lightning-datatable/documentation) section in the Component Library.\n\nWe document for external customers that custom data types have known limitations due to Locker.\nHowever, Locker permits these features in internal implementations.\n\n-   Dispatching custom events on custom data types\n-   Accessibility and keyboard navigation on custom data types\n\n\nFor more information, see [Extend lightning-datatable with Custom Data](https://gus.lightning.force.com/lightning/r/0D5EE00001TA1uZ0AT/view).\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\nimport generateData from './generateData';\n\nconst columns = [\n    { label: 'Label', fieldName: 'name' },\n    { label: 'Website', fieldName: 'website', type: 'url' },\n    { label: 'Phone', fieldName: 'phone', type: 'phone' },\n    { label: 'Balance', fieldName: 'amount', type: 'currency' },\n    { label: 'CloseAt', fieldName: 'closeAt', type: 'date' },\n];\n\nexport default class BasicDatatable extends LightningElement {\n    data = [];\n    columns = columns;\n\n    connectedCallback() {\n        const data = generateData({ amountOfRecords: 100 });\n        this.data = data;\n    }\n}\n",
        "html": "<template>\n    <div style=\"height: 300px;\">\n        <lightning-datatable\n                key-field=\"id\"\n                data={data}\n                columns={columns}>\n        </lightning-datatable>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nconst data = [\n    { id: 1, name: 'Billy Simonns', age: 40, email: 'billy@test.com' },\n    { id: 2, name: 'Kelsey Denesik', age: 35, email: 'kelsey@test.com' },\n    { id: 3, name: 'Kyle Ruecker', age: 50, email: 'kyle@test.com' },\n    {\n        id: 4,\n        name: 'Krystina Kerluke',\n        age: 37,\n        email: 'krystina@test.com',\n    },\n];\n\nconst columns = [\n    { label: 'Name', fieldName: 'name' },\n    {\n        label: 'Age',\n        fieldName: 'age',\n        type: 'number',\n        sortable: true,\n        cellAttributes: { alignment: 'left' },\n    },\n    { label: 'Email', fieldName: 'email', type: 'email' },\n];\n\nexport default class DemoApp extends LightningElement {\n    data = data;\n    columns = columns;\n    defaultSortDirection = 'asc';\n    sortDirection = 'asc';\n    sortedBy;\n\n    // Used to sort the 'Age' column\n    sortBy(field, reverse, primer) {\n        const key = primer\n            ? function (x) {\n                  return primer(x[field]);\n              }\n            : function (x) {\n                  return x[field];\n              };\n\n        return function (a, b) {\n            a = key(a);\n            b = key(b);\n            return reverse * ((a > b) - (b > a));\n        };\n    }\n\n    onHandleSort(event) {\n        const { fieldName: sortedBy, sortDirection } = event.detail;\n        const cloneData = [...this.data];\n\n        cloneData.sort(this.sortBy(sortedBy, sortDirection === 'asc' ? 1 : -1));\n        this.data = cloneData;\n        this.sortDirection = sortDirection;\n        this.sortedBy = sortedBy;\n    }\n}\n",
        "html": "<template>\n    <lightning-datatable\n            key-field=\"id\"\n            columns={columns}\n            data={data}\n            hide-checkbox-column\n            default-sort-direction={defaultSortDirection}\n            sorted-direction={sortDirection}\n            sorted-by={sortedBy}\n            onsort={onHandleSort}>\n    </lightning-datatable>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport generateData from './generateData';\n\n// Add <datatable-with-all-column-types></datatable-with-all-column-types> to the lwr-playground to see the table\n\nconst columns = [\n    { label: 'Name', fieldName: 'name' },\n    { label: 'Boolean', fieldName: 'boolean', type: 'boolean' },\n    { label: 'Url', fieldName: 'url', type: 'url' },\n    { label: 'Phone', fieldName: 'phone', type: 'phone' },\n    {\n        label: 'Currency',\n        fieldName: 'currency',\n        type: 'currency',\n        typeAttributes: {\n            currencyCode: 'EUR',\n        },\n    },\n    { label: 'Date', fieldName: 'date', type: 'date' },\n    {\n        label: 'Date-local',\n        fieldName: 'dateLocal',\n        type: 'date-local',\n        typeAttributes: {\n            month: '2-digit',\n            day: '2-digit',\n        },\n    },\n    { label: 'Email', fieldName: 'email', type: 'email' },\n    { label: 'Location', fieldName: 'location', type: 'location' },\n    { label: 'Number', fieldName: 'number', type: 'number' },\n    { label: 'Percent', fieldName: 'percent', type: 'percent' },\n    {\n        label: 'Action',\n        type: 'action',\n        typeAttributes: {\n            rowActions: [\n                { label: 'action 1', name: 'action1' },\n                { label: 'action 2', name: 'action2' },\n            ],\n        },\n    },\n    {\n        label: 'Button',\n        type: 'button',\n        typeAttributes: {\n            label: 'Submit',\n            name: 'submitAction',\n            iconName: { fieldName: 'iconName' },\n        },\n    },\n    {\n        label: 'Button-icon',\n        type: 'button-icon',\n        typeAttributes: {\n            label: 'Submit',\n            name: 'submitAction',\n            iconName: { fieldName: 'iconName' },\n        },\n    },\n];\n\nexport default class DatatableWithAllColumnTypes extends LightningElement {\n    data = [];\n    columns = columns;\n\n    connectedCallback() {\n        const data = generateData({ amountOfRecords: 100 });\n        this.data = data;\n    }\n}\n",
        "html": "<template>\n    <div style=\"height: 300px;\">\n        <lightning-datatable\n            key-field=\"id\"\n            hide-checkbox-column\n            data={data}\n            columns={columns}\n            column-widths-mode=\"auto\">\n        </lightning-datatable>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport generateData from './generateData';\n\n// Add <datatable-with-col-resizing></datatable-with-col-resizing> to the lwr-playground to see table\n\nconst columns = [\n    { label: 'Label', fieldName: 'name' },\n    { label: 'Website', fieldName: 'website', type: 'url' },\n    { label: 'Phone', fieldName: 'phone', type: 'phone' },\n    { label: 'Balance', fieldName: 'amount', type: 'currency' },\n    { label: 'CloseAt', fieldName: 'closeAt', type: 'date' },\n];\n\nexport default class DatatableWithResize extends LightningElement {\n    data = [];\n    columns = columns;\n    mode = 'fixed';\n    resizeStep = 10;\n\n    connectedCallback() {\n        this.data = generateData({ amountOfRecords: 25 });\n    }\n\n    changeWidthsMode() {\n        this.mode = this.mode === 'fixed' ? 'auto' : 'fixed';\n    }\n\n    increaseResizeStep() {\n        this.resizeStep += 10;\n    }\n\n    decreaseResizeStep() {\n        this.resizeStep =\n            this.resizeStep > 10 ? (this.resizeStep -= 10) : this.resizeStep;\n    }\n\n    addColumn() {\n        const cols = Array.from(this.columns);\n        cols.push({ label: 'ID', fieldName: 'id' });\n        this.columns = cols;\n    }\n}\n",
        "html": "<template>\n    <p>Datatable with resize-column disabled</p>\n    <lightning-datatable\n        key-field=\"id\"\n        data={data}\n        columns={columns}\n        resize-column-disabled>\n    </lightning-datatable>\n\n    <p>Datatable with min and max column widths. Resize step: {resizeStep} </p>\n    <lightning-button\n        label=\"Increase resize step\"\n        class=\"increaseResizeStep\"\n        onclick={increaseResizeStep}>\n    </lightning-button>\n    <lightning-button\n        label=\"Decrease resize step\"\n        class=\"decreaseResizeStep\"\n        onclick={decreaseResizeStep}>\n    </lightning-button>\n    <lightning-datatable\n        key-field=\"id\"\n        data={data}\n        columns={columns}\n        min-column-width=\"100\"\n        max-column-width=\"300\"\n        resize-step={resizeStep}>\n    </lightning-datatable>\n\n    <p>Datatable with column-widths-mode='{mode}'</p>\n    <lightning-button\n        label=\"Change Widths Mode\"\n        class=\"changeWidthsMode\"\n        onclick={changeWidthsMode}>\n    </lightning-button>\n    <lightning-button\n        label=\"Add Column\"\n        column=\"addColumn\"\n        onclick={addColumn}>\n    </lightning-button>\n    <lightning-datatable\n        key-field=\"id\"\n        data={data}\n        columns={columns}\n        column-widths-mode={mode}>\n    </lightning-datatable>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport generateData from './generateData';\n\n// Add <datatable-with-errors></datatable-with-errors> to the lwr-playground to see the table\n\nconst columns = [\n    { label: 'Label', fieldName: 'name', editable: true },\n    { label: 'Website', fieldName: 'website', type: 'url', editable: true },\n    { label: 'Phone', fieldName: 'phone', type: 'phone', editable: true },\n    { label: 'Balance', fieldName: 'amount', type: 'currency' },\n    { label: 'CloseAt', fieldName: 'closeAt', type: 'date', editable: true },\n];\n\nexport default class DatatableWithError extends LightningElement {\n    data = [];\n    columns = columns;\n    errors = {};\n\n    connectedCallback() {\n        this.data = generateData({ amountOfRecords: 100 });\n    }\n\n    triggerError() {\n        this.errors = {\n            rows: {\n                1: {\n                    title: 'We found 2 errors.',\n                    messages: [\n                        'Enter a valid name',\n                        'Verify the phone number and try again.',\n                    ],\n                    fieldNames: ['name', 'phone'],\n                },\n            },\n            table: {\n                title: 'Your entry cannot be saved. Fix the errors and try again.',\n                messages: [\n                    'Row 1 name must be valid text',\n                    'Row 1 phone number is invalid',\n                ],\n            },\n        };\n    }\n}\n",
        "html": "<template>\n    <lightning-button\n        label=\"Trigger error\"\n        class=\"triggerError\"\n        onclick={triggerError}>\n    </lightning-button>\n    <lightning-datatable\n        key-field=\"id\"\n        data={data}\n        columns={columns}\n        errors={errors}>\n    </lightning-datatable>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport generateDataWithDelay from './generateDataWithDelay';\n\nconst columns = [\n    { label: 'Label', fieldName: 'name' },\n    { label: 'Website', fieldName: 'website', type: 'url' },\n    { label: 'Phone', fieldName: 'phone', type: 'phone' },\n    { label: 'Balance', fieldName: 'amount', type: 'currency' },\n    { label: 'CloseAt', fieldName: 'closeAt', type: 'date' },\n];\n\nexport default class DatatableWithInfiniteLoading extends LightningElement {\n    data = [];\n    columns = columns;\n    loadMoreStatus;\n    totalNumberOfRows = 250;\n    loadMoreOffset = 20;\n\n    // eslint-disable-next-line @lwc/lwc/no-async-await\n    async connectedCallback() {\n        const data = await generateDataWithDelay({ amountOfRecords: 100 });\n        this.data = data;\n    }\n\n    // eslint-disable-next-line @lwc/lwc/no-async-await\n    async handleLoadMore(event) {\n        const datatable = event.target;\n        //Displays a spinner to signal that data is being loaded\n        datatable.isLoading = true;\n        //Displays \"Loading\" text when more data is being loaded\n        this.loadMoreStatus = 'Loading';\n\n        const newData = await generateDataWithDelay({ amountOfRecords: 50 });\n        if (this.data.length >= this.totalNumberOfRows) {\n            datatable.enableInfiniteLoading = false;\n            this.loadMoreStatus = 'No more data to load';\n        } else {\n            this.data = this.data.concat(newData);\n            this.loadMoreStatus = '';\n        }\n        datatable.isLoading = false;\n    }\n}\n",
        "html": "<template>\n    <p>Total Rows: {data.length}</p>\n    <div style=\"height: 300px;\">\n        <lightning-datatable\n            key-field=\"id\"\n            data={data}\n            columns={columns}\n            enable-infinite-loading\n            onloadmore={handleLoadMore}\n            load-more-offset={loadMoreOffset}>\n        </lightning-datatable>\n    </div>\n    <p>{loadMoreStatus}</p>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport generateData from './generateData';\n\nconst columns = [\n    { label: 'Label', fieldName: 'name', editable: true },\n    { label: 'Website', fieldName: 'website', type: 'url', editable: true },\n    { label: 'Phone', fieldName: 'phone', type: 'phone', editable: true },\n    { label: 'CloseAt', fieldName: 'closeAt', type: 'date', editable: true },\n    { label: 'Balance', fieldName: 'amount', type: 'currency', editable: true },\n];\n\nexport default class DatatableWithInlineEdit extends LightningElement {\n    data = [];\n    columns = columns;\n    rowOffset = 0;\n    draftValues = [];\n\n    connectedCallback() {\n        this.data = generateData({ amountOfRecords: 100 });\n    }\n}\n",
        "html": "<template>\n    <div style=\"height: 300px;\">\n        <lightning-datatable\n                key-field=\"id\"\n                data={data}\n                show-row-number-column\n                row-number-offset={rowOffset}\n                suppress-bottom-bar\n                draft-values={draftValues}\n                columns={columns}>\n        </lightning-datatable>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport generateData from './generateData';\n\nconst actions = [\n    { label: 'Show details', name: 'show_details' },\n    { label: 'Delete', name: 'delete' },\n];\n\nconst columns = [\n    { label: 'Name', fieldName: 'name' },\n    { label: 'Website', fieldName: 'website', type: 'url' },\n    { label: 'Phone', fieldName: 'phone', type: 'phone' },\n    { label: 'Balance', fieldName: 'amount', type: 'currency' },\n    { label: 'Close At', fieldName: 'closeAt', type: 'date' },\n    {\n        type: 'action',\n        typeAttributes: { rowActions: actions },\n    },\n];\n\nexport default class DatatableWithRowActions extends LightningElement {\n    data = [];\n    columns = columns;\n    record = {};\n\n    connectedCallback() {\n        this.data = generateData({ amountOfRecords: 100 });\n    }\n\n    handleRowAction(event) {\n        const actionName = event.detail.action.name;\n        const row = event.detail.row;\n        switch (actionName) {\n            case 'delete':\n                this.deleteRow(row);\n                break;\n            case 'show_details':\n                this.showRowDetails(row);\n                break;\n            default:\n        }\n    }\n\n    deleteRow(row) {\n        const { id } = row;\n        const index = this.findRowIndexById(id);\n        if (index !== -1) {\n            this.data = this.data\n                .slice(0, index)\n                .concat(this.data.slice(index + 1));\n        }\n    }\n\n    findRowIndexById(id) {\n        let ret = -1;\n        this.data.some((row, index) => {\n            if (row.id === id) {\n                ret = index;\n                return true;\n            }\n            return false;\n        });\n        return ret;\n    }\n\n    showRowDetails(row) {\n        this.record = row;\n    }\n}\n",
        "html": "<template>\n    <div style=\"height: 300px;\">\n        <lightning-datatable\n                key-field=\"id\"\n                data={data}\n                columns={columns}\n                onrowaction={handleRowAction}>\n        </lightning-datatable>\n    </div>\n    <div class=\"slds-m-around--medium\" style=\"width: 30rem;\">\n        <article class=\"slds-tile\">\n            <h3 class=\"slds-tile__title slds-truncate\" title=\"Record details\"><a href=\"javascript:void(0);\">Record details</a></h3>\n            <div class=\"slds-tile__detail\">\n                <dl class=\"slds-list_horizontal slds-wrap\">\n                    <dt class=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"Name\">Name:</dt>\n                    <dd class=\"slds-item_detail slds-truncate\">{record.name}</dd>\n                    <dt class=\"slds-item_label slds-text-color_weak slds-truncate\" title=\"Balance\">Balance:</dt>\n                    <dd class=\"slds-item_detail slds-truncate\">\n                        <lightning-formatted-number value={record.amount} format-style=\"currency\"></lightning-formatted-number>\n                    </dd>\n                </dl>\n            </div>\n        </article>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport generateData from './generateData';\n\nconst columns = [\n    { label: 'Label', fieldName: 'name' },\n    { label: 'Website', fieldName: 'website', type: 'url' },\n    { label: 'Phone', fieldName: 'phone', type: 'phone' },\n    { label: 'Balance', fieldName: 'amount', type: 'currency' },\n    { label: 'CloseAt', fieldName: 'closeAt', type: 'date' },\n];\n\nexport default class BasicDatatable extends LightningElement {\n    data = [];\n    columns = columns;\n    rowOffset = 0;\n\n    connectedCallback() {\n        this.data = generateData({ amountOfRecords: 100 });\n    }\n\n    increaseRowOffset() {\n        this.rowOffset += 100;\n    }\n}\n",
        "html": "<template>\n    <div style=\"height: 300px;\">\n        <lightning-datatable\n                key-field=\"id\"\n                data={data}\n                show-row-number-column\n                row-number-offset={rowOffset}\n                hide-checkbox-column\n                columns={columns}>\n        </lightning-datatable>\n    </div>\n    <div class=\"slds-m-around--medium\">\n        <lightning-button\n                label=\"Increase row offset\"\n                onclick={increaseRowOffset}>\n        </lightning-button>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport generateData from './generateData';\n\n// Add <datatable-with-row-selection></datatable-with-row-selection> to the lwr-playground to see the table\n\nconst columns = [\n    { label: 'Label', fieldName: 'name' },\n    { label: 'Website', fieldName: 'website', type: 'url' },\n    { label: 'Phone', fieldName: 'phone', type: 'phone' },\n    { label: 'Balance', fieldName: 'amount', type: 'currency' },\n    { label: 'CloseAt', fieldName: 'closeAt', type: 'date' },\n];\n\nexport default class DatatableWithRowSelection extends LightningElement {\n    data = [];\n    columns = columns;\n    selectedRows = ['1', '2', '4'];\n    maxRowSelection = 4;\n\n    connectedCallback() {\n        this.data = generateData({ amountOfRecords: 100 });\n    }\n\n    increaseMaxRowSelection() {\n        this.maxRowSelection += 1;\n    }\n\n    decreaseMaxRowSelection() {\n        this.maxRowSelection =\n            this.maxRowSelection > 0\n                ? (this.maxRowSelection -= 1)\n                : this.maxRowSelection;\n    }\n}\n",
        "html": "<template>\n    <p>Max row selection value: {maxRowSelection}</p>\n    <lightning-button\n        label=\"Increase max row selection\"\n        class=\"increaseMaxRowSelection\"\n        onclick={increaseMaxRowSelection}>\n    </lightning-button>\n    <lightning-button\n        label=\"Decrease max row selection\"\n        class=\"decreaseMaxRowSelection\"\n        onclick={decreaseMaxRowSelection}>\n    </lightning-button>\n    <lightning-datatable\n        key-field=\"id\"\n        columns={columns}\n        data={data}\n        selected-rows={selectedRows}\n        row-number-offset=\"0\"\n        max-row-selection={maxRowSelection}>\n    </lightning-datatable>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport generateData from './generateData';\n\n// Add <datatable-with-text-wrapping></datatable-with-text-wrapping> to the lwr-playground to see the table\n\nconst columns = [\n    { label: 'Label', fieldName: 'name' },\n    {\n        label: 'Description',\n        fieldName: 'description',\n        wrapText: true,\n    },\n    { label: 'Website', fieldName: 'website', type: 'url' },\n    { label: 'Phone', fieldName: 'phone', type: 'phone' },\n    { label: 'Balance', fieldName: 'amount', type: 'currency' },\n    { label: 'CloseAt', fieldName: 'closeAt', type: 'date' },\n];\n\nexport default class DatatablewithTextWrapping extends LightningElement {\n    data = [];\n    columns = columns;\n    wrapTextMaxLines;\n\n    connectedCallback() {\n        this.data = generateData({ amountOfRecords: 25 });\n    }\n\n    changeTextWrappingMaxLines() {\n        this.wrapTextMaxLines = 3;\n    }\n}\n",
        "html": "<template>\n    <lightning-button\n        label=\"Change text wrapping max lines\"\n        class=\"changeTextWrappingMaxLines\"\n        onclick={changeTextWrappingMaxLines}>\n    </lightning-button>\n    <lightning-datatable\n        key-field=\"id\"\n        columns={columns}\n        data={data}\n        hide-checkbox-column\n        wrap-text-max-lines={wrapTextMaxLines}>\n    </lightning-datatable>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport generateData from './generateData';\n\n// Add <datatable-with-virtualization></datatable-with-virtualization> to the lwr-playground to see the table\n\nconst columns = [\n    { label: 'Label', fieldName: 'name' },\n    { label: 'Website', fieldName: 'website', type: 'url' },\n    { label: 'Phone', fieldName: 'phone', type: 'phone' },\n    { label: 'Balance', fieldName: 'amount', type: 'currency' },\n    { label: 'CloseAt', fieldName: 'closeAt', type: 'date' },\n];\n\nexport default class DatatableWithVirtualization extends LightningElement {\n    data = [];\n    columns = columns;\n    renderConfig = {\n        virtualize: 'vertical',\n        bufferSize: 10,\n        fixedHeight: true,\n    };\n\n    connectedCallback() {\n        const data = generateData({ amountOfRecords: 100 });\n        this.data = data;\n    }\n}\n",
        "html": "<template>\n    <div style=\"height:100vh;\">\n        <lightning-datatable\n            data-render-mode=\"role-based\"\n            key-field=\"id\"\n            data={data}\n            columns={columns}\n            render-mode=\"role-based\"\n            render-config={renderConfig}>\n        </lightning-datatable>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport generateData from './generateData';\n\n// Add <datatable-without-table-header></datatable-without-table-header> to the lwr-playground to see the table\n\nconst columns = [\n    { label: 'Label', fieldName: 'name' },\n    { label: 'Website', fieldName: 'website', type: 'url' },\n    { label: 'Phone', fieldName: 'phone', type: 'phone' },\n    { label: 'Balance', fieldName: 'amount', type: 'currency' },\n    { label: 'CloseAt', fieldName: 'closeAt', type: 'date' },\n];\n\nexport default class DatatableWithoutTableHeader extends LightningElement {\n    data = [];\n    columns = columns;\n\n    connectedCallback() {\n        const data = generateData({ amountOfRecords: 100 });\n        this.data = data;\n    }\n}\n",
        "html": "<template>\n    <div style=\"height: 300px;\">\n        <lightning-datatable\n            key-field=\"id\"\n            data={data}\n            columns={columns}\n            hide-table-header>\n        </lightning-datatable>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-dialog",
    "shortDescription": "This component is a modal dialog that displays content in a layer above the application, maintaining user focus until closed, and can include a header, footer, and body content, with the ability to control its size and style.",
    "relatedComponents": {
      "lightning-modal": "required",
      "lightning-button": "optional"
    },
    "publicApi": [
      {
        "name": "header",
        "typeSignature": "string",
        "examples": ["<lightning-dialog header='Confirmation'>"]
      },
      {
        "name": "size",
        "typeSignature": "string",
        "examples": [
          "<lightning-dialog size='small'>",
          "<lightning-dialog size='medium'>",
          "<lightning-dialog size='large'>"
        ]
      },
      {
        "name": "oncancel",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-dialog oncancel={handleCancel}>"]
      },
      {
        "name": "onclose",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-dialog onclose={handleClose}>"]
      }
    ],
    "useCases": [
      "Imagine you're shopping online and you've added a few items to your cart. When you try to leave the page, a <lightning-dialog> pops up asking if you're sure you want to leave the page without completing your purchase. This dialog box would have a header saying 'Confirmation', a message asking if you're sure you want to leave, and two buttons at the bottom: one to cancel and stay on the page, and one to confirm and leave the page.",
      "Consider a scenario where you're filling out a form on a website. You've entered a lot of information, but you haven't saved it yet. If you try to navigate away from the page, a <lightning-dialog> could appear, warning you that you have unsaved changes. The dialog box would have a header saying 'Unsaved Changes', a message warning you about the unsaved changes, and two buttons: one to cancel and return to the form, and one to continue and lose the unsaved changes.",
      "Imagine you're using a web application and you've performed an action that needs confirmation. A <lightning-dialog> could be used to ask for this confirmation. The dialog box would have a header saying 'Confirmation Required', a message detailing the action you're about to perform, and two buttons: one to cancel the action, and one to confirm and proceed with the action."
    ],
    "docs": "# Dialog (Deprecated)\n\n## Important:\n* **For any new modal work, starting in release 236, please use `lightning-modal`**\n* **We do not recommend or support the use of `lightning-dialog` in one.app, mobile or any other case where the stacking context can't be controlled**\n* **The `lightning-dialog` is bound by the stacking context, meaning that if any sibling of a root parent of the modal has a higher z-index than the modal dialog, it will show on top of the modal created with the `lightning-dialog` component.**\n* **The `lightning-dialog` is not Aura (one.app) panel manager aware and as such will not open scoped modals nor work correctly when opened from an aura (panel manager based) dialog.**\n\nA `lightning-dialog` component creates a modal dialog, which displays in a layer above the app\nand keeps focus until you close the dialog.\n\nUse the `header` attribute to specify text for a header at the top of the dialog. If you don't\nspecify a value for `header`, the dialog's content is displayed beginning at the top, without a header area.\n\nSpecify content for the bottom of the dialog in a `footer` slot. Typically the footer would contain buttons with actions. If you omit the `footer` slot, the dialog doesn't display a footer area and the dialog content expands to the bottom.\n\nThe dialog height changes according to the amount of content within it. The width is calculated as a percentage of the viewport. You can use the `size` attribute to specify `small`, `medium`, or `large` to change the width calculation. The default size is `medium`, which uses less than half of the viewport width.\n\nThe body of the dialog can contain other components or HTML.\n\nThe component supports two methods:\n\n-   `showModal()` to show a modal dialog\n-   `close()` to close the dialog\n\nHere is a simple dialog example that creates a prompt for the user. It includes a header and a slot for\nfooter content that consists of two buttons. A button below the dialog shows\nhow to invoke the dialog.\n\n```html\n<template>\n    <lightning-dialog header=\"Confirmation\">\n        Are you sure you want to leave the page?\n        <div slot=\"footer\">\n            <lightning-button label=\"Cancel\" onclick={handleCancelClick}>\n            </lightning-button>\n            <lightning-button\n                variant=\"brand\"\n                class=\"slds-m-left_x-small\"\n                label=\"Leave\"\n                onclick={handleLeaveClick}\n            >\n            </lightning-button>\n        </div>\n    </lightning-dialog>\n    <lightning-button label=\"Open Modal Dialog\" onclick={openModalDialog}>\n    </lightning-button>\n</template>\n```\n\nThe JavaScript file defines the button actions using the `showModal()` and `close()` methods.\n\n```js\nexport default class LightningDialogDemo extends LightningElement {\n    openModalDialog() {\n        this.dialog.showModal();\n    }\n    handleCancelClick() {\n        this.dialog.close();\n    }\n    handleLeaveClick() {\n        this.dialog.close();\n        // perform user-requested action here after closing the dialog\n    }\n    get dialog() {\n        return this.template.querySelector('lightning-dialog');\n    }\n}\n```\n\n#### Event Handling\n\nWhen you close a modal, it dispatches a `close` event that you can listen to. In addition to any close button\nyou might implement, modal dialogs have two other ways to close the dialog: pressing the Escape key and clicking\nthe close (X) icon. In both cases, the component dispatches the `cancel` and `close` events. The `cancel` event\ntells you that the user wants to close the dialog, and the `close` event tells you that the dialog is closing.\n\nTo prevent the dialog from closing, call `event.preventDefault()` in the `oncancel` event handler. You might use this approach to\nbring attention to unsaved changes, for example, and give the user a chance to save them.\n\n#### Component Styling\n\n`lightning-dialog` implements the\n[modals](https://www.lightningdesignsystem.com/components/modals/) blueprint in the\nSalesforce Lightning Design System (SLDS).\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nTo customize the component's SLDS styles, use the ` --sds-c-modal-*` CSS custom properties. For more information, see the [SLDS website](https://www.lightningdesignsystem.com/).\n\n#### Accessibility\n\nWhen a modal dialog opens, focus goes to the first visible element that participates in Tab key navigation and isn't\ndisabled. This element has a tabIndex of `0` and is not contained in a Lightning web component that has tabIndex of `-1`.\nIf no such element is found, focus goes to the close (X) icon.\n\nWhen a modal dialog closes, the focus returns to the element that was in focus before the dialog opened.\nIf no such element is found, document.body is focused.\n\n#### Custom Events\n\n**`cancel`**\n\nAn event fired when the user cancels the dialog by clicking on the X icon or pressing Esc. See **Event Handling** above.\n\nThe `cancel` event does not return any parameters.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                    |\n| ---------- | ----- | ------------------------------------------------------------------------------ |\n| bubbles    | false | This event does not bubble.                                                    |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event.     |\n| composed   | false | This event does not propagate outside the template in which it was dispatched. |\n\n**`close`**\n\nAn event fired when the user closes the dialog by clicking a button that's implemented in the component, clicking on the X icon, or pressing Esc. See **Event Handling** above.\n\nThe `close` event does not return any parameters.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                               |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                            |\n",
    "examples": [
      {
        "js": "import { LightningElement, track } from 'lwc';\n\nexport default class ModalDialogExample extends LightningElement {\n    @track enteredName = '';\n\n    openCreateContactDialog() {\n        this.dialog.showModal();\n    }\n\n    handleCancel() {\n        this.dialog.close();\n    }\n\n    handleSave() {\n        const name = this.template.querySelector('lightning-input-name');\n        this.enteredName = `${name.firstName} ${name.lastName}`;\n\n        this.dialog.close();\n    }\n\n    get dialog() {\n        return this.template.querySelector('lightning-dialog');\n    }\n}\n",
        "html": "<template>\n    <lightning-dialog header=\"Create Contact\" onclose={handleDialogClose} oncancel={handleDialogCancel}>\n        <lightning-input-name label=\"Contact Name\"></lightning-input-name>\n        <div slot=\"footer\">\n            <button class=\"slds-button slds-button_brand\" onclick={handleCancel}>Cancel</button>\n            <button class=\"slds-button slds-button_brand\" onclick={handleSave}>Save</button>\n        </div>\n    </lightning-dialog>\n\n    <template if:true={enteredName}>\n        Entered Name: {enteredName}\n    </template>\n\n    <div>\n        <lightning-button-icon\n            label=\"Create Contact\"\n            icon-name=\"utility:add\"\n            onclick={openCreateContactDialog}>\n        </lightning-button-icon>\n    </div>\n\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-dual-listbox",
    "shortDescription": "This component is a dual listbox that allows users to select one or more options from a list on the left and move them to a list on the right, maintaining the order of the selected options and providing the ability to reorder them, offering a user-friendly interface for multi-selection and organization of options.",
    "relatedComponents": {
      "lightning-input": "required"
    },
    "publicApi": [
      {
        "name": "id",
        "typeSignature": "string",
        "examples": ["<lightning-dual-listbox id=\"selectOptions\">"]
      },
      {
        "name": "name",
        "typeSignature": "string",
        "examples": ["<lightning-dual-listbox name=\"Select Options\">"]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-dual-listbox label=\"Select Options\">"]
      },
      {
        "name": "source-label",
        "typeSignature": "string",
        "examples": ["<lightning-dual-listbox source-label=\"Available Options\">"]
      },
      {
        "name": "selected-label",
        "typeSignature": "string",
        "examples": ["<lightning-dual-listbox selected-label=\"Selected Options\">"]
      },
      {
        "name": "options",
        "typeSignature": "{ value: string, label: string }[]",
        "examples": ["<lightning-dual-listbox options={listOptions}>"]
      },
      {
        "name": "value",
        "typeSignature": "string[]",
        "examples": ["<lightning-dual-listbox value={defaultOptions}>"]
      },
      {
        "name": "required-options",
        "typeSignature": "string[]",
        "examples": ["<lightning-dual-listbox required-options={requiredOptions}>"]
      },
      {
        "name": "min",
        "typeSignature": "number",
        "examples": ["<lightning-dual-listbox min={3}>"]
      },
      {
        "name": "max",
        "typeSignature": "number",
        "examples": ["<lightning-dual-listbox max={8}>"]
      },
      {
        "name": "message-when-range-overflow",
        "typeSignature": "string",
        "examples": ["<lightning-dual-listbox message-when-range-overflow=\"Select at most 8 options\">"]
      },
      {
        "name": "message-when-range-underflow",
        "typeSignature": "string",
        "examples": ["<lightning-dual-listbox message-when-range-underflow=\"At least 3 options must be selected\">"]
      },
      {
        "name": "message-when-value-missing",
        "typeSignature": "string",
        "examples": ["<lightning-dual-listbox message-when-value-missing=\"An option must be selected\">"]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": [
          "<lightning-dual-listbox variant=\"label-hidden\">",
          "<lightning-dual-listbox variant=\"label-inline\">",
          "<lightning-dual-listbox variant=\"label-stacked\">"
        ]
      },
      {
        "name": "onchange",
        "typeSignature": "(ev: CustomEvent & { detail: { value: string[] } }) => void",
        "examples": ["<lightning-dual-listbox onchange={handleChange}>"]
      }
    ],
    "useCases": [
      "Imagine you're on a website for a music festival, and you're trying to create your own schedule. You see a list of all the bands playing on the left, and an empty list on the right titled 'My Schedule'. You can select bands from the left list and move them to the right, creating your personalized lineup. This is a perfect use for the <lightning-dual-listbox> component.",
      "On a university website, you're trying to register for classes for the upcoming semester. You see a list of all available classes on the left, and an empty list on the right titled 'My Classes'. You can select classes from the left list and move them to the right, registering for those classes. This is another great use for the <lightning-dual-listbox> component.",
      "You're on a website for a conference, and you're trying to choose which sessions to attend. You see a list of all sessions on the left, and an empty list on the right titled 'My Sessions'. You can select sessions from the left list and move them to the right, creating your personalized conference schedule. This is yet another perfect use for the <lightning-dual-listbox> component.",
      "On a job application website, you're asked to select your skills from a list. You see a list of all available skills on the left, and an empty list on the right titled 'My Skills'. You can select skills from the left list and move them to the right, indicating your personal skill set. This is a great use for the <lightning-dual-listbox> component.",
      "You're on a website for a sports league, and you're trying to create your dream team. You see a list of all available players on the left, and an empty list on the right titled 'My Team'. You can select players from the left list and move them to the right, creating your dream team. This is another perfect use for the <lightning-dual-listbox> component.",
      "On a website for a grocery store, you're trying to create your shopping list. You see a list of all available items on the left, and an empty list on the right titled 'My Shopping List'. You can select items from the left list and move them to the right, creating your shopping list. This is a great use for the <lightning-dual-listbox> component."
    ],
    "docs": "---\nexamples:\n    - name: simple\n      label: Simple Dual Listbox\n      description: A simple dual listbox with options. Use the onchange event handler to capture what's selected.\n    - name: selected\n      label: Dual Listbox with Default Selected Options\n      description: This dual listbox shows some pre-selected options.\n    - name: required\n      label: Dual Listbox with Required Selected Options\n      description: This dual listbox shows required selected options.\n    - name: minmax\n      label: Dual listbox with Minimum and Maximum Required Options\n      description: This dual listbox requires you to select a minimum and maximum number of options.\n---\n\nA `lightning-dual-listbox` component represents two side-by-side listboxes.\nSelect one or more options in the list on the left. Move selected options to\nthe list on the right. The order of the selected options is maintained and you\ncan reorder options.\n\nHere's an example that creates a simple dual listbox with 8 options. Options\n7, 2 and 3 are selected under the second listbox. Options 2 and 7\nare required options.\n\n```html\n<template>\n    <lightning-dual-listbox\n        id=\"selectOptions\"\n        name=\"Select Options\"\n        label=\"Select Options\"\n        source-label=\"Available Options\"\n        selected-label=\"Selected Options\"\n        options={listOptions}\n        value={defaultOptions}\n        required-options={requiredOptions}\n        onchange={handleChange}\n    >\n    </lightning-dual-listbox>\n</template>\n```\n\n```javascript\nimport { LightningElement } from 'lwc';\nexport default class MyComponentName extends LightningElement {\n    listOptions = [\n        { value: '1', label: 'Option 1' },\n        { value: '2', label: 'Option 2' },\n        { value: '3', label: 'Option 3' },\n        { value: '4', label: 'Option 4' },\n        { value: '5', label: 'Option 5' },\n        { value: '6', label: 'Option 6' },\n        { value: '7', label: 'Option 7' },\n        { value: '8', label: 'Option 8' },\n    ];\n\n    defaultOptions = ['7', '2', '3'];\n\n    requiredOptions = ['2', '7'];\n\n    handleChange(event) {\n        // Get the list of the \"value\" attribute on all the selected options\n        const selectedOptionsList = event.detail.value;\n        alert(`Options selected: ${selectedOptionsList}`);\n    }\n}\n```\n\nTo specify the number of options users can select, use the `min` and `max`\nattributes. For example, if you set `min` to 3 and `max` to 8, users must\nselect at least 3 options and at most 8 options.\n\n#### Input Validation\n\nClient-side input validation is available for this component. Note that disabled fields are always valid.\n\nTo check the validity states of the input, use the `validity` attribute to return an object with read-only `boolean` attributes.\n\n-   `rangeOverflow`\n-   `rangeUnderflow`\n-   `valueMissing`\n-   `valid`\n    For more information on the `validity` attribute, see [lightning-input](bundle/lightning-input/documentation).\n\n#### Error Messages\n\nWhen an input validation fails, the following messages are displayed by default.\n\n-   `rangeOverflow`: Select at most [max] options\n-   `rangeUnderflow`: At least [min] options must be selected\n-   `valueMissing`: An option must be selected\n\n[max] and [min] refer to the numerical values for the `max` and `min` attributes you provide.\n\nYou can override the default messages by providing your own values for these attributes: `message-when-range-overflow`, `message-when-range-underflow`, and `message-when-value-missing`.\n\n#### Custom Validity Error Messages\n\nTo programmatically display error messages on invalid fields, use the `reportValidity()` method. For custom validity error messages, display the message using `setCustomValidity()` and `reportValidity()`. For more information, see [lightning-input](bundle/lightning-input/documentation).\n\n#### Component Styling\n\n`lightning-dual-listbox` implements the [Dueling Picklist](https://www.lightningdesignsystem.com/components/dueling-picklist/) blueprint\nin the Salesforce Lightning Design System (SLDS).\n\n##### Variants\n\nUse the `variant` attribute with one of these values to position the labels differently relative to the picklist field.\n\n-   `standard` is the default\n-   `label-hidden` hides the label visually but makes it available to assistive technology. If you provide a value for `field-level-help`, the tooltip icon is still displayed.\n-   `label-inline` aligns the label next to the picklist field\n-   `label-stacked` places the label above the picklist field\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nTo customize the SLDS styles on the \"Move selection to Selected\" or \"Move selection up\" buttons, use SLDS styling hooks. For more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\n#### Usage Considerations\n\nTo retrieve the selected values, use the `onchange` handler.\n\n```\nhandleChange(event) {\n    // Retrieve an array of the selected options\n    const selectedOptionsList = event.detail.value;\n    alert(`Options selected: ${selectedOptionsList}`);\n}\n```\n\nThe `onchange` handler is triggered when you click the left and right buttons to\nmove options from one list to another or when you change the order of options\nin the selected options list.\n\n#### Accessibility\n\nUse the following keyboard shortcuts to work with dual listboxes.\n\n-   Click - Select a single option.\n-   Cmd+Click - Select multiple options or deselect selected options.\n-   Shift+Click - Select all options between the current and last clicked option.\n\nWhen focus is on options:\n\n-   Up Arrow - Move selection to previous option.\n-   Down Arrow - Move selection to next option.\n-   Cmd/Ctrl+Up Arrow - Move focus to previous option.\n-   Cmd/Ctrl+Down Arrow - Move focus to next option.\n-   Ctrl+Space - Toggle selection of focused option.\n-   Cmd/Ctrl+Right Arrow - Move selected options to right listbox.\n-   Cmd/Ctrl+Left Arrow - Move selected options to left listbox.\n-   Tab - Move focus to the buttons or between boxes.\n\nWhen focus is on a button:\n\n-   Enter - Perform the operation associated with that button.\n\n#### Custom Events\n\n**`change`**\n\nThe event fired when an item is selected in the combobox.\n\nThe `change` event returns the following parameter.\n\n| Parameter | Type   | Description                               |\n| --------- | ------ | ----------------------------------------- |\n| value     | string | A comma-separated list of selected items. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                                                    |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | true  | This event propagates outside of the component in which it was dispatched.                                |\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class DualListboxMinMax extends LightningElement {\n    options = [];\n    values = [];\n    requiredOptions = [];\n\n    get min() {\n        return 5;\n    }\n\n    get max() {\n        return 10;\n    }\n\n    connectedCallback() {\n        const items = [];\n        for (let i = 1; i <= 15; i++) {\n            items.push({\n                label: `Option ${i}`,\n                value: `opt${i}`,\n            });\n        }\n        this.options.push(...items);\n        this.values.push(...['opt2', 'opt4', 'opt6']);\n    }\n}\n",
        "html": "<template>\n    <lightning-dual-listbox name=\"languages\"\n                            label=\"Select Options (at least 5 and at most 10)\"\n                            source-label=\"Available\"\n                            selected-label=\"Selected\"\n                            field-level-help=\"This is a dual listbox\"\n                            options={options}\n                            min={min}\n                            max={max}\n                            value={values}></lightning-dual-listbox>\n\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class DualListboxRequired extends LightningElement {\n    options = [];\n    values = [];\n    requiredOptions = [];\n\n    connectedCallback() {\n        const items = [];\n        for (let i = 1; i <= 10; i++) {\n            items.push({\n                label: `Option ${i}`,\n                value: `opt${i}`,\n            });\n        }\n        this.options.push(...items);\n        this.values.push(...['opt2', 'opt4', 'opt6']);\n        this.requiredOptions.push(...['opt2', 'opt5']);\n    }\n}\n",
        "html": "<template>\n    <lightning-dual-listbox name=\"languages\"\n                            label=\"Select Options (Option 2 and Option 5 are required)\"\n                            source-label=\"Available\"\n                            selected-label=\"Selected\"\n                            field-level-help=\"This is a dual listbox\"\n                            options={options}\n                            required-options={requiredOptions}\n                            value={values}></lightning-dual-listbox>\n\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class DualListboxSelected extends LightningElement {\n    options = [];\n    values = [];\n\n    connectedCallback() {\n        const items = [];\n        for (let i = 1; i <= 10; i++) {\n            items.push({\n                label: `Option ${i}`,\n                value: `opt${i}`,\n            });\n        }\n        this.options.push(...items);\n        this.values.push(...['opt2', 'opt4', 'opt6']);\n    }\n}\n",
        "html": "<template>\n    <lightning-dual-listbox name=\"languages\"\n                            label=\"Select Languages\"\n                            source-label=\"Available\"\n                            selected-label=\"Selected\"\n                            field-level-help=\"This is a dual listbox\"\n                            options={options}\n                            value={values}></lightning-dual-listbox>\n\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class DualListboxSimple extends LightningElement {\n    _selected = [];\n\n    get options() {\n        return [\n            { label: 'English', value: 'en' },\n            { label: 'German', value: 'de' },\n            { label: 'Spanish', value: 'es' },\n            { label: 'French', value: 'fr' },\n            { label: 'Italian', value: 'it' },\n            { label: 'Japanese', value: 'ja' },\n        ];\n    }\n\n    get selected() {\n        return this._selected.length ? this._selected : 'none';\n    }\n\n    handleChange(e) {\n        this._selected = e.detail.value;\n    }\n}\n",
        "html": "<template>\n    <lightning-dual-listbox name=\"languages\"\n                            label=\"Select Languages\"\n                            source-label=\"Available\"\n                            selected-label=\"Selected\"\n                            field-level-help=\"Select your preferred languages\"\n                            options={options}\n                            onchange={handleChange}></lightning-dual-listbox>\n    <div class=\"slds-box\" >\n        <p>Selected values are: {selected}</p>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-dynamic-icon",
    "shortDescription": "This component is a dynamic icon that visually indicates an event in progress, providing users with a variety of animated visual cues such as pulsing circles, rising and falling bars, and animated arrows.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "type",
        "typeSignature": "string",
        "examples": [
          "<lightning-dynamic-icon type=\"ellie\">",
          "<lightning-dynamic-icon type=\"eq\">",
          "<lightning-dynamic-icon type=\"score\">",
          "<lightning-dynamic-icon type=\"strength\">",
          "<lightning-dynamic-icon type=\"trend\">",
          "<lightning-dynamic-icon type=\"waffle\">"
        ]
      },
      {
        "name": "alternative-text",
        "typeSignature": "string",
        "examples": ["<lightning-dynamic-icon alternative-text=\"Your calculation is running.\">"]
      }
    ],
    "useCases": [
      "In a financial application, the <lightning-dynamic-icon> component could be used to visually represent the fluctuation of stock prices. The 'eq' type could be used to show an animated graph with three bars that rise and fall randomly, giving the user a quick visual representation of the stock's performance.",
      "In a fitness application, the <lightning-dynamic-icon> component could be used to indicate the user's workout progress. The 'strength' type could be used to show three animated horizontal circles that are colored green or red, providing a visual representation of the user's current workout intensity.",
      "In a weather application, the <lightning-dynamic-icon> component could be used to indicate weather trends. The 'trend' type could be used to show animated arrows that point up, down, or straight, giving the user a quick visual representation of the weather forecast.",
      "In a music application, the <lightning-dynamic-icon> component could be used to indicate the volume level. The 'ellie' type could be used to show a pulsing blue circle, which pulses and stops after one animation cycle, providing a visual representation of the volume level.",
      "In a gaming application, the <lightning-dynamic-icon> component could be used to indicate the player's score. The 'score' type could be used to show a green filled circle or a red unfilled circle, giving the player a quick visual representation of their score.",
      "In a mobile application, the <lightning-dynamic-icon> component could be used to indicate the app's menu. The 'waffle' type could be used to show a 3x3 grid of dots that animates on hover, providing a visual representation of the app's menu."
    ],
    "docs": "---\nexamples:\n    - name: ellie\n      label: Ellie Icon\n      description: Displays a pulsing blue circle, which pulses and stops after one animation cycle.\n    - name: eq\n      label: EQ Icon\n      description: Displays an animated graph with three bars that rise and fall randomly.\n    - name: score\n      label: Score Icon\n      description: Displays a green filled circle or a red unfilled circle.\n    - name: strength\n      label: Strength Icon\n      description: Displays three animated horizontal circles that are colored green or red.\n    - name: trend\n      label: Trend Icon\n      description: Displays animated arrows that point up, down, or straight.\n    - name: waffle\n      label: Waffle Icon\n      description: Displays a 3x3 grid of dots that animates on hover.\n---\n\nA `lightning-dynamic-icon` component visually indicates an event that's in\nprogress, such as a graph that's loading.\n\nThis component inherits styling from\n[dynamic icons](https://www.lightningdesignsystem.com/components/dynamic-icons/) in the\nLightning Design System.\n\nHere's an example of an ellie icon with alternative text.\n\n```html\n<template>\n    <lightning-dynamic-icon\n        type=\"ellie\"\n        alternative-text=\"Your calculation is running.\"\n    >\n    </lightning-dynamic-icon>\n</template>\n```\n\n#### Usage Considerations\n\nThe following `type` options are available.\n\n-   Use the `type=\"ellie\"` attribute to show a pulsing blue circle, which pulses and stops after one animation cycle. This icon is great for field calculations or a process that's running in the background.\n-   Use the `type=\"eq\"` attribute to show an animated graph with three bars that rise and fall randomly. This icon is great for a graph that's refreshing.\n-   Use the `type=\"score\"` attribute to show a green filled circle or a red unfilled circle. This icon is great for showing positive and negative indicators.\n-   Use the `type=\"strength\"` attribute to show three animated horizontal circles that are colored green or red. This icon is great for Einstein calculations or indicating password strengths.\n-   Use the `type=\"trend\"` attribute to show animated arrows that point up, down, or straight. This icon is great for showing movement of a value from one range to another, like a forecast score.\n-   Use the `type=\"waffle\"` attribute to show a square made up of a 3x3 grid of circles. This icon animates on hover. This icon is great for app-related items, like the App Launcher in Lightning Experience.\n\n#### Accessibility\n\nOptionally, you can use the `alternative-text` attribute to describe the\n`lightning-dynamic-icon`.\n\nSometimes a `lightning-dynamic-icon` is decorative and doesn't need a description.\nHowever, on smaller screens and windows the `lightning-dynamic-icon` can also be\ninformational. In this case, include `alternative-text`. If you don't include\n`alternative-text`, check smaller screens and windows to ensure that the\n`lightning-dynamic-icon` is only decorative on all formats.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class DynamicIconEllie extends LightningElement {}\n",
        "html": "<template>\n    <p>\n        The ellie icon is a pulsing blue circle, which pulses and stops after one animation cycle.\n    </p>\n    <lightning-dynamic-icon \n        type=\"ellie\" \n        alternative-text=\"Ellie intelligence\">\n    </lightning-dynamic-icon>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class DynamicIconEq extends LightningElement {}\n",
        "html": "<template>\n    <p>\n        EQ Icon - The eq icon displays an animated graph with three bars that rise and fall randomly.\n    </p>\n    <lightning-dynamic-icon\n        type=\"eq\"\n        option=\"play\"\n        alternative-text=\"Recording in progress\">\n    </lightning-dynamic-icon>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class DynamicIconScore extends LightningElement {}\n",
        "html": "<template>\n    <p>\n        The score icon is a green filled circle or a red unfilled circle.\n    </p>\n    <lightning-dynamic-icon \n        type=\"score\" \n        option=\"negative\" \n        alternative-text=\"Negative score\">\n    </lightning-dynamic-icon>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class DynamicIconStrength extends LightningElement {}\n",
        "html": "<template>\n    <p>\n        The strength icon displays three animated horizontal circles that are colored green or red.\n    </p>\n    <lightning-dynamic-icon \n        type=\"strength\" \n        option=\"2\" \n        alternative-text=\"Strength: 2\">\n    </lightning-dynamic-icon>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class DynamicIconTrend extends LightningElement {}\n",
        "html": "<template>\n    <p>\n        The trend icon displays animated arrows that point up, down, or straight.\n    </p>\n    <lightning-dynamic-icon \n        type=\"trend\" \n        option=\"down\" \n        alternative-text=\"Trending down\">\n    </lightning-dynamic-icon>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class DynamicIconWaffle extends LightningElement {}\n",
        "html": "<template>\n    <p>\n        The waffle icon is a square made up of a 3x3 grid of circles. This icon animates on hover.\n    </p>\n    <lightning-dynamic-icon \n        type=\"waffle\" \n        alternative-text=\"Application launcher\">\n    </lightning-dynamic-icon>\n</template>"
      }
    ]
  },
  {
    "tagName": "lightning-file-download",
    "shortDescription": "This component allows users to download files from Experience Cloud sites using a generated URL, providing an interactive experience through a download button.",
    "relatedComponents": {
      "lightning-input": "required",
      "lightning-button": "required"
    },
    "publicApi": [],
    "useCases": [
      "Imagine you're a student using an online learning platform. You've just finished a lecture and want to download the lecture notes provided by your professor. The <lightning-file-download> component could be used here to allow you to download these notes directly from the platform.",
      "Consider a scenario where you're a customer browsing an online store. You're interested in a particular product and want to download its user manual to understand more about it. The <lightning-file-download> component could be used to facilitate this download directly from the product page.",
      "Suppose you're a job applicant on a recruitment website. You've just completed an online assessment and want to download your results for future reference. The <lightning-file-download> component could be used here to allow you to download your assessment results.",
      "Imagine you're a researcher using a scientific database. You've found a research paper that is relevant to your work and want to download it for further reading. The <lightning-file-download> component could be used to enable this download.",
      "Consider a scenario where you're a user of a cloud storage service. You've been shared a file and want to download it to your local storage. The <lightning-file-download> component could be used here to facilitate this download directly from the cloud storage interface.",
      "Suppose you're a member of a book club using an online platform. You've just been shared a new book to read for the next meeting and want to download it. The <lightning-file-download> component could be used here to allow you to download the book directly from the platform."
    ],
    "docs": "Add file downloads to Experience Cloud sites that use the Build Your Own (LWR) template.\n\nTo create a component that downloads a file, import `generateUrl` from `lightning/fileDownload`. Use the `generateUrl` function and pass in the record ID number of the files that you want to download. This function supports Content Document, Content Version, Attachment, or Document record IDs.\n\nThis example returns a download URL that you can pass into `window.open` to download the file.\n\n```javascript\nimport { generateUrl } from 'lightning/fileDownload';\nconst url = generateUrl(recordId);\nwindow.open(url);\n```\n\nIn this example, clicking a download button on a record generates a URL and uses it to download the record's files.\n\n```HTML\n<template>\n  <div>\n      <lightning-input type=\"text\" label=\"File download for the record\" value={recordId}></lightning-input>\n      <lightning-button label=\"Download\" onclick={handleClick} class=\"slds-m-left_x-small\"></lightning-button>\n  </div>\n</template>\n```\n\n```Javascript\nimport { LightningElement } from 'lwc';\nimport { generateUrl } from 'lightning/fileDownload';\nexport default class Download extends LightningElement {\n    recordId;\n    url;\n    handleClick() {\n        this.url = generateUrl(this.recordId);\n        window.open(this.url)\n    }\n}\n```\n\n#### Considerations\n\n- Authenticated users can download any files they have access to. Unauthenticated users can only download Content Document files that they can access with a Library membership.\n\n- The `recordId` parameter in `generateUrl` accepts IDs for Content Document, Content Version, Attachment, or Document files.\n",
    "examples": []
  },
  {
    "tagName": "lightning-formatted-address",
    "shortDescription": "This component displays user-specified addresses in a format determined by the user's Salesforce locale, with options to include latitude and longitude, display the address in plain text, or show a static map, providing an interactive experience by linking the address to Google Maps.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "street",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-address street=\"1 Market St.\">",
          "<lightning-formatted-address street={myStreetValue}>"
        ]
      },
      {
        "name": "city",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-address city=\"San Francisco\">",
          "<lightning-formatted-address city={myCityValue}>"
        ]
      },
      {
        "name": "country",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-address country=\"US\">",
          "<lightning-formatted-address country={myCountryValue}>"
        ]
      },
      {
        "name": "province",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-address province=\"CA\">",
          "<lightning-formatted-address province={myProvinceValue}>"
        ]
      },
      {
        "name": "postal-code",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-address postal-code=\"94105\">",
          "<lightning-formatted-address postal-code={myPostalCodeValue}>"
        ]
      },
      {
        "name": "disabled",
        "typeSignature": "boolean",
        "examples": ["<lightning-formatted-address disabled>"]
      },
      {
        "name": "latitude",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-address latitude=\"37.792179\">",
          "<lightning-formatted-address latitude={myLatitudeValue}>"
        ]
      },
      {
        "name": "longitude",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-address longitude=\"-122.392735\">",
          "<lightning-formatted-address longitude={myLongitudeValue}>"
        ]
      },
      {
        "name": "show-static-map",
        "typeSignature": "boolean",
        "examples": ["<lightning-formatted-address show-static-map>"]
      }
    ],
    "useCases": [
      "Imagine you're browsing an online store and you've found a product you love. You want to pick it up in person, so you look for the nearest store location. The website uses the <lightning-formatted-address> component to display the store's address. You can click on the address, and it will open up Google Maps in a new tab, showing you exactly where the store is located.",
      "Consider a scenario where you're using a real estate website to look for a new home. Each listing on the website uses the <lightning-formatted-address> component to display the property's address. The address is displayed in a format that's familiar to you, based on your location. If you're interested in a property, you can click on the address to view it on Google Maps.",
      "Suppose you're using a food delivery app to order dinner. When you're checking out, the app uses the <lightning-formatted-address> component to display your delivery address. This ensures that the address is displayed in a format that's easy for you to understand, and it also provides a link to Google Maps, so the delivery driver can easily find your location.",
      "Imagine you're using a travel booking website to plan your next vacation. The website uses the <lightning-formatted-address> component to display the addresses of hotels, attractions, and restaurants. The addresses are displayed in a format that's familiar to you, and you can click on any address to view it on Google Maps.",
      "Consider a scenario where you're using a job search website to look for a new job. Each job listing on the website uses the <lightning-formatted-address> component to display the company's address. If you're interested in a job, you can click on the address to view the company's location on Google Maps.",
      "Suppose you're using a social networking website to plan a meetup with your friends. When you create the event, the website uses the <lightning-formatted-address> component to display the meetup location's address. Your friends can then click on the address to view it on Google Maps."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Formatted Address\n      description: Displays an address that's linked to Google Maps and an address in plain text.\n    - name: latitude\n      label: Formatted Address with Latitude/Longitude\n      description: Displays an address that includes latitude and longitude.\n    - name: customLocale\n      label: Formatted Address with Custom Locale\n      description: Displays an address in the format of a specific locale.\n---\n\nA `lightning-formatted-address` component displays addresses in a format and field order\nthat's determined by the user's Salesforce locale.\n\nSpecify a valid address using attributes for `street`, `city`, `country`, `province`, and\n`postal-code`.\n\nThis example displays an address.\n\n```html\n<template>\n    <lightning-formatted-address\n        street=\"1 Market St.\"\n        city=\"San Francisco\"\n        country=\"US\"\n        province=\"CA\"\n        postal-code=\"94105\"\n    >\n    </lightning-formatted-address>\n</template>\n```\n\nThe output looks like this in the en-US locale.\n\n1 Market St.\\\nSan Francisco, CA 94105\\\nUS\n\nBy default, the address is displayed as a link that\nopens the given location in Google Maps in a new tab. The link\nfollows the format `https://www.google.com/maps/?q=your+address`.\nIn the example, the link would be\n`https://www.google.com/maps/?q=121%20Spear%20St.%0ASan%20Francisco,%20CA%2094105%0AUS`.\n\nSpecify the `disabled` attribute to display the address in plain text\nwithout a link.\n\n#### Specifying Coordinates for Mapping\n\nYou can provide the `latitude` and `longitude` attributes in addition to\nthe address fields. This enables faster map rendering by avoiding the\ngeocode processing that's required for street addresses on Google Maps.\nThe formatted address displays the street address fields,\nbut the link URL uses the latitude and longitude for Google Maps.\n\nThis example displays an address and uses latitude and longitude for mapping.\n\n```html\n<template>\n    <lightning-formatted-address\n        street=\"1 Market St.\"\n        city=\"San Francisco\"\n        country=\"US\"\n        province=\"CA\"\n        postal-code=\"94105\"\n        latitude=\"37.792179\"\n        longitude=\"-122.392735\"\n    >\n    </lightning-formatted-address>\n</template>\n```\n\nThe link URL with latitude and longitude follows the format\n`https://www.google.com/maps/?q=37.792179,-122.392735`.\n\n#### Showing a Static Map\n\nUse the `show-static-map` attribute to display a map with your address.\nThe address and the static map are both linked to Google Maps.\n\n```html\n<template>\n    <lightning-formatted-address\n        street=\"1 Market St.\"\n        city=\"San Francisco\"\n        country=\"US\"\n        province=\"CA\"\n        postal-code=\"94105\"\n        show-static-map\n    >\n    </lightning-formatted-address>\n</template>\n```\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleFormattedAddressBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-vertical_medium\">\n        <h1 class=\"slds-text-heading_small\">Formatted Address</h1>\n        <p class=\"slds-text-body_regular\">This component formats an address and automatically links it to Google Maps.</p>\n    </div>\n\n    <lightning-formatted-address\n        street=\"121 Spear St.\"\n        city=\"San Francisco\"\n        country=\"US\"\n        province=\"CA\"\n        postal-code=\"94105\"\n    ></lightning-formatted-address>\n\n    <div class=\"slds-m-vertical_medium\">\n        <h1 class=\"slds-text-heading_small\">Formatted Address in Plain Text</h1>\n        <p class=\"slds-text-body_regular\">This component formats an address but doesn't link to Google Maps.</p>\n    </div>\n\n    <lightning-formatted-address\n        street=\"121 Spear St.\"\n        city=\"San Francisco\"\n        country=\"US\"\n        province=\"CA\"\n        postal-code=\"94105\"\n        disabled\n    ></lightning-formatted-address>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleFormattedAddressCustomLocale extends LightningElement {}\n",
        "html": "<template>\n    <h1 class=\"slds-text-heading_small\">Address in Spanish format</h1>\n\n    <lightning-formatted-address\n        street=\"Avenida Concha Espina, Nº 1\"\n        city=\"Madrid\"\n        postal-code=\"28036\"\n        country=\"España\"\n        locale=\"es-ES\"\n    ></lightning-formatted-address>\n\n    <h1 class=\"slds-text-heading_small\">Address in Japanese format</h1>\n\n    <lightning-formatted-address\n        street=\"下連雀1丁目1−83\"\n        city=\"三鷹市\"\n        country=\"日本\"\n        province=\"東京都\"\n        postal-code=\"181–0013\"\n        locale=\"ja-JP\"\n    ></lightning-formatted-address>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleFormattedAddressBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-vertical_medium\">\n        <h1 class=\"slds-text-heading_small\">Formatted Address with Coordinates</h1>\n        <p class=\"slds-text-body_regular\">This component formats an address, and automatically links it to Google Maps\n            using latitude and longitude coordinates for faster map rendering.\n        </p>\n    </div>\n\n    <lightning-formatted-address\n        street=\"121 Spear St.\"\n        city=\"San Francisco\"\n        country=\"US\"\n        province=\"CA\"\n        postal-code=\"94105\"\n        latitude=\"37.792179\"\n        longitude=\"-122.392735\"\n    ></lightning-formatted-address>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-formatted-date-time",
    "shortDescription": "This component is designed to display date and time in a formatted manner, providing a user-friendly experience by adapting to the user's locale and allowing customization of the date and time display.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "string | number | Date",
        "examples": [
          "<lightning-formatted-date-time value=\"1547250828000\">",
          "<lightning-formatted-date-time value={dateValue}>"
        ]
      },
      {
        "name": "year",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-date-time value=\"1547250828000\" year=\"2-digit\">",
          "<lightning-formatted-date-time value={dateValue} year=\"numeric\">"
        ]
      },
      {
        "name": "month",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-date-time value=\"1547250828000\" month=\"short\">",
          "<lightning-formatted-date-time value={dateValue} month=\"numeric\">"
        ]
      },
      {
        "name": "day",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-date-time value=\"1547250828000\" day=\"2-digit\">",
          "<lightning-formatted-date-time value={dateValue} day=\"numeric\">"
        ]
      },
      {
        "name": "weekday",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-date-time value=\"1547250828000\" weekday=\"long\">"]
      },
      {
        "name": "hour",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-date-time value=\"1547250828000\" hour=\"2-digit\">",
          "<lightning-formatted-date-time value={dateValue} hour=\"numeric\">"
        ]
      },
      {
        "name": "minute",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-date-time value=\"1547250828000\" minute=\"2-digit\">",
          "<lightning-formatted-date-time value={dateValue} minute=\"numeric\">"
        ]
      },
      {
        "name": "time-zone-name",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-date-time value=\"1547250828000\" time-zone-name=\"short\">",
          "<lightning-formatted-date-time value={dateValue} time-zone-name=\"long\">"
        ]
      },
      {
        "name": "time-zone",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-date-time value=\"1547250828000\" time-zone=\"UTC\">",
          "<lightning-formatted-date-time value={dateValue} time-zone=\"America/New_York\">"
        ]
      },
      {
        "name": "hour12",
        "typeSignature": "boolean",
        "examples": ["<lightning-formatted-date-time value=\"1547250828000\" hour12={ampm}>"]
      }
    ],
    "useCases": [
      "Imagine you're using a project management tool that uses Salesforce. The <lightning-formatted-date-time> component could be used to display the due dates for each task in your project. The dates would be formatted according to your locale, so they would look familiar and easy to understand.",
      "Consider a global company that has employees in different time zones. The <lightning-formatted-date-time> component could be used in the company's internal system to display meeting times. Each employee would see the meeting time in their own time zone, avoiding confusion.",
      "Suppose you're using a fitness app that tracks your workouts. The <lightning-formatted-date-time> component could be used to display the date and time of each workout. This would help you keep track of your workout schedule and see your progress over time."
    ],
    "docs": "---\nexamples:\n    - name: date\n      label: Date Formatting\n      description: Several ways to display formatted dates.\n    - name: time\n      label: Time Formatting\n      description: Various ways to format time.\n    - name: datetime\n      label: Date and Time Formatting\n      description: Use a combination of the year, month, day, hour, and minute attributes, among others, to customize date and time.\n---\n\nA `lightning-formatted-date-time` component displays formatted date and time.\nThis component uses the Intl.DateTimeFormat JavaScript object to format date\nvalues. The locale set in the Salesforce user preferences determines the\ndefault formatting. The following input values are supported.\n\n-   Date object\n-   ISO8601 formatted string\n-   Timestamp\n\nAn ISO8601 formatted string matches one of the following patterns.\n\n-   YYYY\n-   YYYY-MM\n-   YYYY-MM-DD\n-   YYYY-MM-DDThh:mmTZD\n-   YYYY-MM-DDThh:mm:ssTZD\n-   YYYY-MM-DDThh:mm:ss.sTZD\n\n`YYYY` is the year in the Gregorian calendar, `MM` is the month between 01 and\n12, and `DD` is the day between 01 and 31. `hh` is the number of hours that\nhave passed since midnight, `mm` is the number of minutes that have passed\nsince the start of the hour, and `ss` is the number of seconds since the start\nof the minute.\n\n`TZD` is the time zone designator, like `Z`, `+hh:mm` or `-hh:mm`. To indicate\nthat a time is measured in Universal Time (UTC), append a `Z` to a time.\n\n#### Default Formatting\n\nWhen no attributes other than `value`\nare specified, the component uses the default date format based on the user's locale in Salesforce.\n\nThe locale determines the order and format of the month, day, and year. For example, the English (United States) locale's date format is Oct 14, 2020 and the French (France) locale's date format is 14 Oct 2020. The locale doesn't determine the time zone. Time zone is a separate setting.\n\nThe locale also determines whether to display time as 24-hour time or 12-hour time with AM and PM. You can override the locale default with the `hour12` attribute. See _Date and Time Display Examples_ for more information.\n\nSpecify optional attributes listed in the Specification tab to modify the date and time display, overriding the locale's default formatting.\n\nIn the Mini-Playground in the Examples tab, the component is limited to the en-US locale.\n\n#### Time Zone Considerations\n\nTwo different attributes affect the time zone display.\n\nThe `time-zone-name` attribute specifies how to display the time zone. Set it to `short` to display\na code such as EST, or `long` to display a description such as Eastern Standard Time.\n\nThe `time-zone` attribute sets a particular time zone to use to display the date and time,\ninstead of the user device's time zone setting. Specify a\ntime zone from the [IANA Time Zone Database](https://www.iana.org/time-zones), such as\n`America/New_York`, `Europe/London`, or `Asia/Tokyo`. You cannot use a time zone short code such as\nEST to set the `time-zone` attribute. You can use the code UTC however, as it's the only short code that browsers\nmust recognize.\n\nWhen using the component to display a date only, without time, include `time-zone=\"UTC\"` to ensure the correct date displays\nin all time zones. This is especially important if you specify a timestamp for the `value`. Because timestamps contain time and date information, the component converts the date to the time zone in effect on the user's device and then displays the date.\n\n#### Date and Time Display Examples\n\nHere are some examples based on a locale of en-US.\n\nDisplays: Jan 11, 2019\n\n```html\n<template>\n    <lightning-formatted-date-time value=\"1547250828000\" time-zone=\"UTC\">\n    </lightning-formatted-date-time>\n</template>\n```\n\nDisplays: Friday, Jan 11, 19\n\n```html\n<template>\n    <lightning-formatted-date-time\n        value=\"1547250828000\"\n        year=\"2-digit\"\n        month=\"short\"\n        day=\"2-digit\"\n        weekday=\"long\"\n        time-zone=\"UTC\"\n    >\n    </lightning-formatted-date-time>\n</template>\n```\n\nDisplays: 1/11/2019, 3:53 PM PST (if user is in PST time zone)\n\n```html\n<template>\n    <lightning-formatted-date-time\n        value=\"1547250828000\"\n        year=\"numeric\"\n        month=\"numeric\"\n        day=\"numeric\"\n        hour=\"2-digit\"\n        minute=\"2-digit\"\n        time-zone-name=\"short\"\n    >\n    </lightning-formatted-date-time>\n</template>\n```\n\nDisplays: 1/11/2019, 6:53 PM EST\n\n```html\n<template>\n    <lightning-formatted-date-time\n        value=\"1547250828000\"\n        year=\"numeric\"\n        month=\"numeric\"\n        day=\"numeric\"\n        hour=\"2-digit\"\n        minute=\"2-digit\"\n        time-zone-name=\"short\"\n        time-zone=\"America/New_York\"\n    >\n    </lightning-formatted-date-time>\n</template>\n```\n\nDisplays: 1/11/2019, 18:53 EST\n\n```html\n<template>\n    <lightning-formatted-date-time\n        value=\"1547250828000\"\n        year=\"numeric\"\n        month=\"numeric\"\n        day=\"numeric\"\n        hour=\"2-digit\"\n        hour12={ampm}\n        minute=\"2-digit\"\n        time-zone-name=\"short\"\n        time-zone=\"America/New_York\"\n    >\n    </lightning-formatted-date-time>\n</template>\n```\n\nSet the `hour12` attribute using a variable. If set to `false` or any other string directly, the component interprets its value as true.\n\n```js\nimport { LightningElement } from 'lwc';\n\nexport default class FormattedDateTimeHour12 extends LightningElement {\n    ampm = false;\n}\n```\n\n#### Date and Time Stored in Salesforce\n\nSalesforce uses the ISO8601 format `YYYY-MM-DD` to store date fields, which store a date without time, and includes no time zone information.\nWhen formatting dates without time, include `time-zone=\"UTC\"` to ensure the correct date displays.\n\nSalesforce uses the ISO8601 format `YYYY-MM-DDThh:mm:ss.SZ` for date/time fields, which stores date/time in UTC.\n\nAssuming a user is in the en-US locale and Pacific time zone, here are two examples for a date field with\nthe value `1965-04-09`.\n\nDisplays: Apr 9, 1965\n\n```html\n<template>\n    <lightning-formatted-date-time value={contact.Birthdate} time-zone=\"UTC\">\n    </lightning-formatted-date-time>\n</template>\n```\n\nDisplays: April 09, 1965\n\n```html\n<template>\n    <lightning-formatted-date-time\n        value={contact.Birthdate}\n        year=\"numeric\"\n        day=\"2-digit\"\n        month=\"long\"\n        time-zone=\"UTC\"\n    >\n    </lightning-formatted-date-time>\n</template>\n```\n\nAssuming an en-US locale and a Pacific time zone,\nhere's an example for a date/time field with the value\n`2017-12-03T20:00:00.000+00:00`.\n\nDisplays: December 03, 2017, 12:00 PM\n\n```html\n<template>\n    <lightning-formatted-date-time\n        value={contact.Next_Meeting__c}\n        year=\"numeric\"\n        day=\"2-digit\"\n        month=\"long\"\n        hour=\"2-digit\"\n        minute=\"2-digit\"\n    >\n    </lightning-formatted-date-time>\n</template>\n```\n\n#### Usage Considerations\n\nThis component has usage differences from its Aura counterpart. See [Base Components: Aura Vs Lightning Web Components](https://developer.salesforce.com/docs/platform/lwc/guide/migrate-map-aura-lwc-components) in the Lightning Web Components Developer Guide.\n\n#### LWC Recipes\n\nThe [LWC Recipes GitHub repository](https://github.com/trailheadapps/lwc-recipes) contains code examples for Lightning Web Components that you can test in an org.\n\nFor a recipe that uses `lightning-formatted-date-time`, see the `c-clock` component.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedDateTimeDate extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-box\">\n        <h2 class=\"header\">Date Formatting</h2>\n        <p><lightning-formatted-date-time value=\"1547250828000\"></lightning-formatted-date-time></p>\n        <p><lightning-formatted-date-time value=\"1547250828000\" year=\"2-digit\" month=\"short\" day=\"2-digit\" weekday=\"narrow\"></lightning-formatted-date-time></p>\n        <p><lightning-formatted-date-time value=\"1547250828000\" year=\"2-digit\" month=\"short\" day=\"2-digit\" weekday=\"long\"></lightning-formatted-date-time></p>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedDateTimeDateTime extends LightningElement {\n    ampm = false;\n}\n",
        "html": "<template>\n    <div class=\"slds-box\">\n        <h2 class=\"header\">Date and Time Formatting</h2>\n        <p><lightning-formatted-date-time value=\"1547250828000\" year=\"2-digit\" month=\"short\" day=\"2-digit\" hour=\"numeric\"\n                                       weekday=\"long\" era=\"short\"></lightning-formatted-date-time></p>\n        <p><lightning-formatted-date-time value=\"1547250828000\" year=\"numeric\" month=\"numeric\" day=\"numeric\" hour=\"2-digit\"\n                                        minute=\"2-digit\" time-zone-name=\"short\"></lightning-formatted-date-time></p>\n        <p><lightning-formatted-date-time value=\"1547250828000\" year=\"numeric\" month=\"numeric\" day=\"numeric\" hour=\"2-digit\"\n                                        minute=\"2-digit\" time-zone=\"UTC\" time-zone-name=\"short\" hour12={ampm}></lightning-formatted-date-time></p>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedDateTimeTime extends LightningElement {\n    ampm = false;\n}\n",
        "html": "<template>\n    <div class=\"slds-box\">\n        <h2 class=\"header\">Time Formatting</h2>\n        <p><lightning-formatted-date-time value=\"1547250828000\" hour=\"numeric\"></lightning-formatted-date-time></p>\n        <p><lightning-formatted-date-time value=\"1547250828000\" hour=\"2-digit\" second=\"2-digit\"></lightning-formatted-date-time></p>\n        <p><lightning-formatted-date-time value=\"1547250828000\" hour=\"2-digit\" minute=\"2-digit\" time-zone=\"UTC\"\n                                        time-zone-name=\"short\"></lightning-formatted-date-time></p>\n        <p><lightning-formatted-date-time value=\"1547250828000\" hour=\"2-digit\" minute=\"2-digit\" second=\"2-digit\" hour12={ampm}\n                                        time-zone-name=\"long\"></lightning-formatted-date-time></p>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-formatted-email",
    "shortDescription": "This component displays a read-only email address as a clickable hyperlink, which when clicked, opens the default mail application for the user's device.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-email value=\"hello@example.com\">",
          "<lightning-formatted-email value=\"hello@example.com,email@example.com\">",
          "<lightning-formatted-email value=\"hello@example.com?cc=email@example.com&subject=My%20subject &body=The%20email%20body\">"
        ]
      },
      {
        "name": "hide-icon",
        "typeSignature": "boolean",
        "examples": ["<lightning-formatted-email value=\"hello@example.com\" hide-icon>"]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-email value=\"hello@example.com,email@example.com\" label=\"Send a group email\">",
          "<lightning-formatted-email value=\"hello@example.com?cc=email@example.com&subject=My%20subject &body=The%20email%20body\" label=\"Send us your feedback\">"
        ]
      }
    ],
    "useCases": [
      "In a customer service portal, the <lightning-formatted-email> component could be used to display the email address of the customer service representative. This would allow users to easily contact the representative by simply clicking on the displayed email address, which would open their default email application.",
      "In a job application form, the <lightning-formatted-email> component could be used to display the email address of the hiring manager. Applicants could then click on the email address to send their resumes or any additional documents directly to the hiring manager.",
      "In a school's online portal, the <lightning-formatted-email> component could be used to display the email addresses of teachers. This would allow students or parents to easily contact the teachers by clicking on their email addresses.",
      "In an online store, the <lightning-formatted-email> component could be used to display the email address of the customer support team. This would allow customers to easily reach out for help or inquiries about their orders.",
      "In a company's internal portal, the <lightning-formatted-email> component could be used to display the email addresses of different departments. This would allow employees to easily contact the relevant department for any internal matters.",
      "In a conference's website, the <lightning-formatted-email> component could be used to display the email address of the event organizer. This would allow attendees to easily send their inquiries or concerns about the event."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Formatted Email\n      description: Displays an email address with an email icon. The email address is displayed as the default label.\n    - name: onclick\n      label: Formatted Email with Custom onclick Behavior\n      description: Displays an email address with onclick handler to count clicks.\n---\n\nA `lightning-formatted-email` component displays a read-only representation of\nan email address as a hyperlink using the `mailto:` URL scheme. Clicking on\nthe email address opens the default mail application for the desktop or mobile\ndevice.\n\nThis example displays an email address with an email icon. The email address\nis displayed as the default label.\n\n```html\n<template>\n    <lightning-formatted-email value=\"hello@example.com\">\n    </lightning-formatted-email>\n</template>\n```\n\nThis example prevents the display of the email icon.\n\n```html\n<template>\n    <lightning-formatted-email value=\"hello@example.com\" hide-icon>\n    </lightning-formatted-email>\n</template>\n```\n\nMultiple email addresses are supported. The label \"Send a group email\" is\ndisplayed as a hyperlink in this example.\n\n```html\n<template>\n    <lightning-formatted-email\n        value=\"hello@example.com,email@example.com\"\n        label=\"Send a group email\"\n    >\n    </lightning-formatted-email>\n</template>\n```\n\nThis example creates an email address with values for cc, subject, and email\nbody. The label is displayed as a hyperlink.\n\n```html\n<template>\n    <lightning-formatted-email\n        value=\"hello@example.com?cc=email@example.com&subject=My%20subject &body=The%20email%20body\"\n        label=\"Send us your feedback\"\n    >\n    </lightning-formatted-email>\n</template>\n```\n\n#### LWC Recipes\n\nThe [LWC Recipes GitHub repository](https://github.com/trailheadapps/lwc-recipes) contains code examples for Lightning Web Components that you can test in an org.\n\nFor a recipe that uses `lightning-formatted-email`, see the following components in the LWC Recipes repo.\n\n-   `c-nav-to-record`\n-   `c-wire-get-record-user`\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedEmailBasic extends LightningElement {}\n",
        "html": "<template>\n        <div class=\"slds-m-vertical_medium\">\n                <h1 class=\"slds-text-heading_small\">Formatted Email</h1>\n                <p class=\"slds-text-body_regular\">Default behavior displays an email address with an email icon. The email address is automatically linked to open the default mail app.</p>\n            </div>\n    <p><lightning-formatted-email value=\"email@example.com\" ></lightning-formatted-email></p>\n\n    <div class=\"slds-m-vertical_medium\">\n            <h1 class=\"slds-text-heading_small\">Formatted Email Without an Icon</h1>\n            <p class=\"slds-text-body_regular\">Remove the icon using the <code>hide-icon</code> attribute.</p>\n        </div>\n    <p><lightning-formatted-email value=\"email@example.com\" hide-icon></lightning-formatted-email></p>\n\n    <div class=\"slds-m-vertical_medium\">\n            <h1 class=\"slds-text-heading_small\">Formatted Email With a Label</h1>\n            <p class=\"slds-text-body_regular\">Display custom text instead of the email address with the <code>label</code> attribute.</p>\n        </div>\n    <p><lightning-formatted-email value=\"email@example.com\" label=\"Email Us!\" ></lightning-formatted-email></p>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedEmailBasic extends LightningElement {\n    count = 0;\n\n    handleClick(e) {\n        e.preventDefault();\n        this.count += 1;\n    }\n}\n",
        "html": "<template>\n    <p>Click the email link: <lightning-formatted-email value=\"email@example.com\" onclick={handleClick}></lightning-formatted-email></p>\n    <p aria-live=\"polite\">Click count: {count}</p>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-formatted-location",
    "shortDescription": "This component is designed to display a read-only representation of geographic coordinates (latitude and longitude) in decimal degrees format, providing users with a clear and precise location information.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "latitude",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-location latitude=\"37.7938460\">"]
      },
      {
        "name": "longitude",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-location longitude=\"-122.3948370\">"]
      }
    ],
    "useCases": [
      "Imagine you're using a travel planning app, and you've just selected a destination for your next vacation. The app could use the <lightning-formatted-location> component to display the exact coordinates of your destination. This would give you a precise idea of where you're going, even if you're not familiar with the area.",
      "Suppose you're using a weather app that allows you to check the forecast for any location in the world. When you enter a location, the app could use the <lightning-formatted-location> component to show you the exact latitude and longitude of the place you're interested in. This would help you ensure that you're checking the weather for the right place, especially if there are multiple places with the same name.",
      "Imagine you're using a real estate app to look for a new home. When you select a property, the app could use the <lightning-formatted-location> component to display the exact coordinates of the property. This would give you a precise idea of where the property is located, which could be useful if you're planning to visit it in person."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Formatted Location\n      description: Displays a geolocation in the Decimal degrees (DD) format [latitude, longitude].\n---\n\nA `lightning-formatted-location` component displays a read-only representation\nof a latitude and longitude value. Latitude and longitude are geographic\ncoordinates specified in decimal degrees. If one of the values is invalid or\noutside the allowed range, this component doesn't display anything.\n\nHere are a few examples of latitudes: -30, 45, 37.12345678, -10.0. Values such\nas 90.5 or -90.5 are not valid latitudes. Here are a few examples of\nlongitudes: -100, -120.9762, 115.84. Values such as 180.5 or -180.5 are not\nvalid longitudes.\n\nThis example displays a geolocation with a latitude of 37.7938460 and a\nlongitude of -122.3948370.\n\n```html\n<template>\n    <lightning-formatted-location\n        latitude=\"37.7938460\"\n        longitude=\"-122.3948370\"\n    >\n    </lightning-formatted-location>\n</template>\n```\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedLocationBasic extends LightningElement {}\n",
        "html": "<template>\n    <p><lightning-formatted-location latitude=\"22\" longitude=\"122.2222\"></lightning-formatted-location></p>\n</template>"
      }
    ]
  },
  {
    "tagName": "lightning-formatted-name",
    "shortDescription": "This component displays names in a formatted manner based on user preferences, providing an experience that adapts to different locales and name formats.",
    "relatedComponents": {
      "lightning-input-name": "optional"
    },
    "publicApi": [
      {
        "name": "first-name",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-name first-name='John'>"]
      },
      {
        "name": "middle-name",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-name middle-name='Middleton'>"]
      },
      {
        "name": "last-name",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-name last-name='Doe'>"]
      },
      {
        "name": "informal-name",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-name informal-name='Jo'>"]
      },
      {
        "name": "suffix",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-name suffix='The 3rd'>"]
      },
      {
        "name": "salutation",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-name salutation='Mr.'>"]
      },
      {
        "name": "format",
        "typeSignature": "'short' | 'medium' | 'long'",
        "examples": [
          "<lightning-formatted-name format='short'>",
          "<lightning-formatted-name format='medium'>",
          "<lightning-formatted-name format='long'>"
        ]
      }
    ],
    "useCases": [
      "In a business application, the <lightning-formatted-name> component could be used to display the full names of employees in a company directory. The 'long' format would be used to include salutations, middle names, and suffixes, providing a formal and comprehensive view of each employee's name.",
      "In a social media application, the <lightning-formatted-name> component could be used to display user names in a friend list. The 'short' format would be used to keep the display simple and informal, showing only first and last names.",
      "In a school management system, the <lightning-formatted-name> component could be used to display student names in a class list. The 'medium' format would be used to include middle names, providing a more complete view of each student's name without including unnecessary details like salutations or suffixes."
    ],
    "docs": "---\nexamples:\n    - name: long\n      label: Formatted Name with Default Format (Long)\n      description: The default long formatted name.\n    - name: medium\n      label: Formatted Name with Medium Format\n      description: Medium formatted name.\n    - name: short\n      label: Formatted Name with Short Format\n      description: Short formatted name.\n---\n\nA `lightning-formatted-name` component displays formatted names in a given\nformat and order. The locale set in the app's user preferences determines how\nnames are formatted and the order they are presented.\n\nThis example displays \"Mr. John Middleton Doe The 3rd Jo\" based on the\ndefault English United States locale with the `long` format.\n\n```html\n<template>\n    <lightning-formatted-name\n        first-name=\"John\"\n        middle-name=\"Middleton\"\n        last-name=\"Doe\"\n        informal-name=\"Jo\"\n        suffix=\"The 3rd\"\n        salutation=\"Mr.\"\n    >\n    </lightning-formatted-name>\n</template>\n```\n\nThe `format` attribute determines the length of the name to be displayed.\n\n| Format         | Description                                                                                        | Example                           |\n| -------------- | -------------------------------------------------------------------------------------------------- | --------------------------------- |\n| short          | Displays the first name and last name only.                                                        | John Doe                          |\n| medium         | Displays the first name, middle name, and last name only.                                          | John Middleton Doe                |\n| long (default) | Displays the name including salutation, first name, middle name, last name, suffix, informal name. | Mr. John Middleton Doe The 3rd Jo |\n\nFor more information on supported locales, see\n[Supported Locales](https://help.salesforce.com/articleView?id=admin_supported_locales.htm)\nin the Salesforce Help.\n\nTo create a form that takes in user input for names, you can use the\n`lightning-input-name` component, which displays a name compound field that\nsupports user input for salutation, suffix, and so on.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedNameLong extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-box\">\n        <h3 class=\"header\">Default (Long Format)</h3>\n        <lightning-formatted-name\n                first-name=\"John\"\n                last-name=\"Doe\"\n                middle-name=\"Middleton\"\n                informal-name=\"Jo\"\n                suffix=\"The 3rd\"\n                salutation=\"Mr.\"\n        >\n        </lightning-formatted-name>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedNameMedium extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-box\">\n        <h3 class=\"header\">Medium Format</h3>\n        <lightning-formatted-name\n                first-name=\"John\"\n                last-name=\"Doe\"\n                middle-name=\"Middleton\"\n                informal-name=\"Jo\"\n                suffix=\"The 3rd\"\n                salutation=\"Mr.\"\n                format=\"medium\"\n        ></lightning-formatted-name>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedNameShort extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-box\">\n        <h3 class=\"header\">Short Format</h3>\n        <lightning-formatted-name\n                first-name=\"John\"\n                last-name=\"Doe\"\n                middle-name=\"Middleton\"\n                informal-name=\"Jo\"\n                suffix=\"The 3rd\"\n                salutation=\"Mr.\"\n                format=\"short\"\n        ></lightning-formatted-name>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-formatted-number",
    "shortDescription": "This component is used to display formatted numbers for decimals, currency, and percentages, providing an end user with a customizable, locale-specific numerical display.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-number value=\"1000.0\">",
          "<lightning-formatted-number value=\"1234.5678\">",
          "<lightning-formatted-number value=\"5000\">",
          "<lightning-formatted-number value=\"0.503\">"
        ]
      },
      {
        "name": "minimum-significant-digits",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-number value=\"1000.0\" minimum-significant-digits=\"5\">"]
      },
      {
        "name": "minimum-fraction-digits",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-number value=\"1234.5678\" minimum-fraction-digits=\"4\">",
          "<lightning-formatted-number value=\"4000\" format-style=\"currency\" currency-code=\"JPY\" minimum-fraction-digits=\"0\">",
          "<lightning-formatted-number value=\"500\" format-style=\"currency\" currency-code=\"KWD\" minimum-fraction-digits=\"3\">"
        ]
      },
      {
        "name": "maximum-fraction-digits",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-number value=\"0.503\" format-style=\"percent\" maximum-fraction-digits=\"1\">",
          "<lightning-formatted-number value=\"0.503\" format-style=\"percent-fixed\" maximum-fraction-digits=\"3\">"
        ]
      },
      {
        "name": "format-style",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-number value=\"5000\" format-style=\"currency\" currency-code=\"USD\">",
          "<lightning-formatted-number value=\"0.503\" format-style=\"percent\">",
          "<lightning-formatted-number value=\"0.503\" format-style=\"percent-fixed\">"
        ]
      },
      {
        "name": "currency-code",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-number value=\"5000\" format-style=\"currency\" currency-code=\"USD\">",
          "<lightning-formatted-number value=\"4000\" format-style=\"currency\" currency-code=\"JPY\" minimum-fraction-digits=\"0\">",
          "<lightning-formatted-number value=\"500\" format-style=\"currency\" currency-code=\"KWD\" minimum-fraction-digits=\"3\">"
        ]
      }
    ],
    "useCases": [
      "Imagine you're running an online store and you want to display the price of your products in a clear and consistent manner. The <lightning-formatted-number> component can be used to format the prices, ensuring that they always display with two decimal places, regardless of the actual price value. This would make the prices easier to read and compare for your customers.",
      "Suppose you're creating a financial report for your company and you need to display various percentages, such as profit margins or growth rates. The <lightning-formatted-number> component can be used to format these percentages, ensuring that they always display with a consistent number of decimal places. This would make the report easier to read and understand for your colleagues.",
      "Imagine you're developing a scientific application and you need to display various measurements with a high degree of precision. The <lightning-formatted-number> component can be used to format these measurements, ensuring that they always display with the correct number of significant digits. This would make the measurements more accurate and reliable for your users."
    ],
    "docs": "---\nexamples:\n    - name: decimal\n      label: Decimal Formatting\n      description: Decimal numbers default to 3 decimal places. You can change the integer and fraction portions of the decimal number display with several attributes.\n    - name: currency\n      label: Currency Formatting\n      description: Currency numbers default to 2 decimal places. You can change the integer and fraction portions of the currency number display with several attributes. You can change the currency code using the currency-code attribute.\n    - name: percent\n      label: Percent Formatting\n      description: Percentages default to 0 decimal places. You can change the integer and fraction portions of the currency number display with several attributes.\n---\n\nA `lightning-formatted-number` component displays formatted numbers for\ndecimals, currency, and percentages. Use `format-style` to specify the\nnumber style. This component uses the Intl.NumberFormat\nJavaScript object to format numerical values.\n\nThe locale set in your Salesforce user\nsettings determines where to display spaces, commas, and periods in numbers, and the currency\nused by default. See the **Usage Considerations** section for limitations in some locales.\n\nThe component has several attributes to specify how to format numbers.\nAmong these attributes are `minimum-significant-digits` and\n`maximum-significant-digits`. Significant digits refer to the accuracy of a number.\nFor example, 1000 has one significant digit, but 1000.0 has five significant\ndigits. By default, `lightning-formatted-number` displays the value 1000.0 as 1000. To display\nthe decimal and trailing zero, set `minimum-significant-digits` to 5.\n\n```html\n<template>\n    <lightning-formatted-number value=\"1000.0\" minimum-significant-digits=\"5\">\n    </lightning-formatted-number>\n</template>\n```\n\nCustomize the number of decimal places displayed using\n`minimum-fraction-digits` and `maximum-fraction-digits`.\n\nDecimal numbers default to 3 decimal places. This example returns `1234.568`.\n\n```html\n<template>\n    <lightning-formatted-number value=\"1234.5678\"> </lightning-formatted-number>\n</template>\n```\n\nTo display all four decimal places, add the attribute `minimum-fraction-digits=\"4\"`.\n\n```html\n<template>\n    <lightning-formatted-number value=\"1234.5678\" minimum-fraction-digits=\"4\">\n    </lightning-formatted-number>\n</template>\n```\n\n#### Working with Currencies\n\nCurrency numbers default to 2 decimal places. In this example, the formatted number\ndisplays as $5,000.00.\n\n```html\n<template>\n    <lightning-formatted-number\n        value=\"5000\"\n        format-style=\"currency\"\n        currency-code=\"USD\"\n    >\n    </lightning-formatted-number>\n</template>\n```\n\nThe `currency-display-as` attribute changes the currency display to use the `symbol`, `code`, or `name` of the currency.\n\nTo change the number of decimal places, use one or both of the `minimum-fraction-digits` and `maximum-fraction-digits` attributes.\n\nThis example renders `¥4,000`, using `minimum-fraction-digits=\"0\"` to prevent\ndisplay of decimals.\n\n```html\n<template>\n    <lightning-formatted-number\n        value=\"4000\"\n        format-style=\"currency\"\n        currency-code=\"JPY\"\n        minimum-fraction-digits=\"0\"\n    >\n    </lightning-formatted-number>\n</template>\n```\n\nThis example renders `KWD 500.000`, using `minimum-fraction-digits` to ensure\nthree decimal places are displayed.\n\n```html\n<template>\n    <lightning-formatted-number\n        value=\"500\"\n        format-style=\"currency\"\n        currency-code=\"KWD\"\n        minimum-fraction-digits=\"3\"\n    >\n    </lightning-formatted-number>\n</template>\n```\n\n#### Working with Percentages\n\nSpecify `format-style=\"percent\"` to display the value multiplied by 100 as a percent value.\nPercentages default to 0 decimal places, with rounding. In this example, the formatted number\ndisplays as 50%.\n\n```html\n<template>\n    <lightning-formatted-number value=\"0.503\" format-style=\"percent\">\n    </lightning-formatted-number>\n</template>\n```\n\nTo preserve the decimal points, use the `maximum-fraction-digits` attribute. In this example, the formatted number displays as 50.3%.\n\n```html\n<template>\n    <lightning-formatted-number\n        value=\"0.503\"\n        format-style=\"percent\"\n        maximum-fraction-digits=\"1\"\n    >\n    </lightning-formatted-number>\n</template>\n```\n\nTo display the value as-is without multiplying it by 100, specify `format-style=\"percent-fixed\"`.\nIn this example, the formatted number displays as 1% because decimal places are not displayed by default\nand the value is rounded.\n\n```html\n<template>\n    <lightning-formatted-number value=\"0.503\" format-style=\"percent-fixed\">\n    </lightning-formatted-number>\n</template>\n```\n\nAdd the attribute `maximum-fraction-digits=\"3\"` to display the percentage as 0.503%.\n\n```html\n<template>\n    <lightning-formatted-number\n        value=\"0.503\"\n        format-style=\"percent-fixed\"\n        maximum-fraction-digits=\"3\"\n    >\n    </lightning-formatted-number>\n</template>\n```\n\n#### Working with Large Numbers\n\nLarge numbers with more than approximately 15 or 16 total digits can't be formatted correctly.\nIn these cases the unformatted value is shown.\n\n#### Usage Considerations\n\nThe locale set in your Salesforce user preferences determines how numbers are formatted. Some locales such as the Arabic (Lebanon) and Bangla (Bangladesh) locales also specify a numeral system other than the Hindu-Arabic numerals 0-9. The org permission “Show Hindu-Arabic Numbers” is intended to override a locale's default numerals. However, `lightning-formatted-number` displays the locale's default numerals even when this permission is enabled in your org. See [Supported Number, Name, and Address Formats (ICU)](https://help.salesforce.com/articleView?id=admin_supported_locales.htm\").\n\nThe `format-style` attribute is called the `style` attribute in the Aura version of this component.\nSee [Base Components: Aura Vs Lightning Web Components](https://developer.salesforce.com/docs/platform/lwc/guide/migrate-map-aura-lwc-components).\n\n#### LWC Recipes\n\nThe [LWC Recipes GitHub repository](https://github.com/trailheadapps/lwc-recipes) contains code examples for Lightning Web Components that you can test in an org.\n\nFor a recipe that uses `lightning-formatted-date-time`, see the `c-misc-shared-javascript` component.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedNumberCurrency extends LightningElement {}\n",
        "html": "<template>\n    <p><lightning-formatted-number value=\"12.34\" format-style=\"currency\" currency-code=\"USD\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"12.34\" format-style=\"currency\" currency-code=\"USD\" currency-display-as=\"code\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"12.34\" format-style=\"currency\" currency-code=\"USD\" currency-display-as=\"name\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"12.34\" format-style=\"currency\" currency-code=\"USD\" currency-display-as=\"symbol\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"12.34\" format-style=\"currency\" currency-code=\"EUR\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"12.34\" format-style=\"currency\" currency-code=\"EUR\" currency-display-as=\"name\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"12.34\" format-style=\"currency\" currency-code=\"CNY\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"123456789012345\" format-style=\"currency\" currency-code=\"EUR\" minimum-fraction-digits=\"2\" maximum-fraction-digits=\"2\"></lightning-formatted-number></p>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedNumberDecimal extends LightningElement {}\n",
        "html": "<template>\n    <p><lightning-formatted-number value=\"1234.5678\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"1234.5678\" maximum-fraction-digits=\"2\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"12.34\" format-style=\"decimal\" minimum-integer-digits=\"5\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"12.34\" format-style=\"decimal\" minimum-fraction-digits=\"5\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"12.34\" format-style=\"decimal\" minimum-significant-digits=\"5\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"123456789.123456789\" minimum-fraction-digits=\"9\"></lightning-formatted-number></p>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedNumberPercent extends LightningElement {}\n",
        "html": "<template>\n    <p><lightning-formatted-number value=\"1\" format-style=\"percent\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"0.5\" format-style=\"percent\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"0.1234\" format-style=\"percent\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"0.1234\" format-style=\"percent\" maximum-fraction-digits=\"3\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"0.1234\" format-style=\"percent\" maximum-fraction-digits=\"1\"></lightning-formatted-number></p>\n    <p><lightning-formatted-number value=\"2.3\" format-style=\"percent\"></lightning-formatted-number></p>\n</template>"
      }
    ]
  },
  {
    "tagName": "lightning-formatted-phone",
    "shortDescription": "This component displays a read-only phone number as a clickable hyperlink that, when clicked, opens the default VOIP call application on a desktop or initiates a call on mobile devices, with options for different formatting styles and disabling the hyperlink functionality.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-phone value=\"4255550155\">",
          "<lightning-formatted-phone value=\"14255550155\">",
          "<lightning-formatted-phone value=\"+14255550155\">"
        ]
      },
      {
        "name": "disabled",
        "typeSignature": "boolean",
        "examples": ["<lightning-formatted-phone value=\"18005551212\" disabled>"]
      }
    ],
    "useCases": [
      "Imagine you're browsing a website for a local restaurant and you want to make a reservation. The restaurant's phone number is displayed on the website using the <lightning-formatted-phone> component. You can click on the phone number and it will automatically open your default calling application, making it easy for you to call and make a reservation.",
      "Suppose you're on a website for a tech support company. The company's phone number is displayed using the <lightning-formatted-phone> component. If you're browsing on your mobile device and you encounter a problem, you can simply click on the phone number to call the company's tech support line.",
      "Imagine you're on a website for a local business. The business's phone number is displayed using the <lightning-formatted-phone> component. However, the business has chosen to disable the hyperlink feature, so you can't click on the number to call. Instead, you can easily see the number and dial it manually on your phone.",
      "Suppose you're browsing a website for a hotel and you want to make a booking. The hotel's phone number is displayed on the website using the <lightning-formatted-phone> component. You can click on the phone number and it will automatically open your default calling application, making it easy for you to call and make a booking.",
      "Imagine you're on a website for a car rental company. The company's phone number is displayed using the <lightning-formatted-phone> component. If you're browsing on your mobile device and you need to make a reservation, you can simply click on the phone number to call the company's reservation line.",
      "Suppose you're on a website for a local clinic. The clinic's phone number is displayed using the <lightning-formatted-phone> component. However, the clinic has chosen to disable the hyperlink feature, so you can't click on the number to call. Instead, you can easily see the number and dial it manually on your phone."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Formatted Phone Number\n      description: Formatted phone numbers displayed in several ways.\n---\n\nA `lightning-formatted-phone` component displays a read-only representation of\na phone number as a hyperlink using the `tel:` URL scheme. Clicking the phone\nnumber opens the default VOIP call application on a desktop. On mobile\ndevices, clicking the phone number calls the number.\n\nIf your locale is set to English (United States) or English (Canada), a phone number\nwith 10 or 11 digits that starts with 1 is displayed in the format (999) 999-9999.\n\nInclude a \"+\" sign before the number to display the number in the format +19999999999 instead.\n\nHere are two ways to display (425) 555-0155 as a hyperlink.\n\n```html\n<template>\n    <p>\n        <lightning-formatted-phone value=\"4255550155\">\n        </lightning-formatted-phone>\n    </p>\n    <p>\n        <lightning-formatted-phone value=\"14255550155\">\n        </lightning-formatted-phone>\n    </p>\n</template>\n```\n\nThe previous example renders the following HTML.\n\n```html\n<a href=\"tel:4255550155\">(425) 555-0155</a>\n<a href=\"tel:14255550155\">(425) 555-0155</a>\n```\n\nHere's how to prevent the US/Canada formatting and display the number with a `+` prefix,\neven when your locale is set to one of these locales.\n\n```html\n<template>\n    <p>\n        <lightning-formatted-phone value=\"+14255550155\">\n        </lightning-formatted-phone>\n    </p>\n</template>\n```\n\nThe previous example renders the following HTML.\n\n```html\n<a href=\"tel:+14255550155\">+14255550155</a>\n```\n\nTo display the phone number in plain text without a hyperlink, include the\n`disabled` attribute. Disabling the phone number also prevents setting focus on the phone number using the Tab key.\n\n```html\n<template>\n    <lightning-formatted-phone\n        value=\"18005551212\"\n        disabled\n    ></lightning-formatted-phone>\n</template>\n```\n\n#### LWC Recipes\n\nThe [LWC Recipes GitHub repository](https://github.com/trailheadapps/lwc-recipes) contains code examples for Lightning Web Components that you can test in an org.\n\nFor a recipe that uses `lightning-formatted-phone`, see the following components in the LWC Recipes repo.\n\n-   `c-contact-tile`\n-   `c-event-bubbling`\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedPhoneBasic extends LightningElement {}\n",
        "html": "<template>\n    <p><lightning-formatted-phone value=\"+18005551212\" ></lightning-formatted-phone></p>\n    <p><lightning-formatted-phone value=\"8005551212\"></lightning-formatted-phone></p>\n    <p><lightning-formatted-phone value=\"18005551212\"></lightning-formatted-phone></p>\n    <p><lightning-formatted-phone value=\"1333333\" ></lightning-formatted-phone></p>\n    <p><lightning-formatted-phone value=\"18005551212\" disabled></lightning-formatted-phone></p>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-formatted-rich-text",
    "shortDescription": "This component is a read-only display of rich text, formatted by HTML tags, that automatically creates links for text and email addresses, providing an interactive and visually appealing experience for the end user.",
    "relatedComponents": {
      "lightning-input-rich-text": "required",
      "lightning-formatted-url": "optional"
    },
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-rich-text value={richtext}>",
          "<lightning-formatted-rich-text value=\"&lt;h1>TEST&lt;/h1>\">",
          "<lightning-formatted-rich-text value=\"<h2 style=\\\"text-align: center\\\">Default <s>Value</s></h2>\">"
        ]
      },
      {
        "name": "disable-linkify",
        "typeSignature": "boolean",
        "examples": ["<lightning-formatted-rich-text disable-linkify>"]
      }
    ],
    "useCases": [
      "Imagine you're writing a blog post on a website. You want to emphasize certain words, create headings, and include links to other websites. The <lightning-formatted-rich-text> component would be used to display your blog post with all the formatting you've added.",
      "Suppose you're a teacher and you're creating an online lesson for your students. You want to include formatted text, images, and links to additional resources. The <lightning-formatted-rich-text> component would be used to display your lesson exactly as you've designed it.",
      "Let's say you're a customer service representative responding to a customer's query via email. You want to include bold text for emphasis, bullet points for clarity, and links to helpful resources. The <lightning-formatted-rich-text> component would be used to display your email response with all the formatting you've added."
    ],
    "docs": "A `lightning-formatted-rich-text` component is a read-only representation of\nrich text. Rich text refers to text that's formatted by HTML tags, such as\n`<strong>` for bold text or `<u>` for underlined text. You can pass in rich text to\nthis component using the `lightning-input-rich-text` component or\nprogrammatically in JavaScript.\n\nBy default, the component creates links automatically for linkable text and email addresses. For example, if the input is \"Go to salesforce.com\", `lightning-formatted-rich-text` creates a link so the output is \"Go to [salesforce.com](https://www.salesforce.com/)\". Email addresses display using the `mailto:` protocol.\nTo display links and email addresses in plain text, specify the `disable-linkify` attribute.\n\nThis example creates a rich text editor that's wired up to a\n`lightning-formatted-rich-text` component. The rich text content is set during\ninitialization.\n\n```html\n<template>\n    <!-- Rich text editor and formatted output -->\n    <lightning-input-rich-text\n        value={richtext}\n        onchange={handleChange}\n    ></lightning-input-rich-text>\n    <lightning-formatted-rich-text\n        value={richtext}\n    ></lightning-formatted-rich-text>\n</template>\n```\n\n```javascript\nimport { LightningElement } from 'lwc';\nexport default class MyComponentName extends LightningElement {\n    richtext = '<h2>Default <s>Value</s></h2>';\n\n    handleChange(e) {\n        this.richtext = e.detail.value;\n    }\n}\n```\n\nTo use double quotes in your value definitions, escape them using the `\\`\ncharacter.\n\n```javascript\nimport { LightningElement } from 'lwc';\nexport default class MyComponentName extends LightningElement {\n    richtext = \"<h2 style=\\\"text-align: center\\\">Default <s>Value</s></h2>\";\n\n    ...\n}\n```\n\nTo pass in HTML tags in your component markup, escape the tags like this.\n\n```html\n<template>\n    <lightning-formatted-rich-text value=\"&lt;h1>TEST&lt;/h1>\">\n    </lightning-formatted-rich-text>\n</template>\n```\n\n#### Supported HTML Tags and attributes\n\nThe component sanitizes HTML tags passed to the `value` attribute to prevent\nXSS vulnerabilities. It also ensures that the formatted output is valid HTML.\nFor example, if you have mismatched tags like `<div>My Title</h1>`, the\ncomponent returns `<div>My Title</div>`.\n\nIf you set unsupported tags via JavaScript, those tags are\nremoved and the text content is preserved. The supported HTML tags are: `a`,\n`abbr`, `acronym`, `address`, `br`, `big`, `blockquote`, `caption`,\n`cite`, `code`, `col`, `colgroup`, `del`, `div`, `dl`, `dd`, `dt`, `em`,\n`font`, `h1`, `h2`, `h3`, `h4`, `h5`, `h6`, `hr`, `img`, `ins`, `kbd`,\n`li`, `ol`, `mark`, `p`, `param`, `pre`, `q`, `s`, `samp`, `small`, `span`, \n`strong`, `sub`, `sup`, `table`, `tbody`, `td`, `tfoot`, `th`, `thead`, `tr`, \n`tt`, `u`, `ul`, `var`, `strike`.\n\nSupported HTML attributes include: `accept`, `action`, `align`, `alt`,\n`autocomplete`, `background`, `bgcolor`, `border`, `cellpadding`,\n`cellspacing`, `checked`, `cite`, `class`, `clear`, `color`, `cols`,\n`colspan`, `coords`, `data-fileid`, `datetime`, `default`, `dir`, `disabled`,\n`download`, `enctype`, `face`, `for`, `headers`, `height`, `hidden`, `high`,\n`href`, `hreflang`, `id`, `ismap`, `label`, `lang`, `list`, `loop`, `low`,\n`max`, `maxlength`, `media`, `method`, `min`, `multiple`, `name`, `noshade`,\n`novalidate`, `nowrap`, `open`, `optimum`, `pattern`, `placeholder`, `poster`,\n`preload`, `pubdate`, `radiogroup`, `readonly`, `rel`, `required`, `rev`,\n`reversed`, `rows`, `rowspan`, `spellcheck`, `scope`, `selected`, `shape`,\n`size`, `span`, `srclang`, `start`, `src`, `step`, `style`, `summary`,\n`tabindex`, `target`, `title`, `type`, `usemap`, `valign`, `value`, `width`,\n`xmlns`.\n\nThe HTML tags `b` and `i` aren't supported. This component converts the `b` tags to `strong` and `i` tags to `em` for screen reader accessibility. Other unsupported tags and attributes are removed, and only their text content is displayed. \n\nWe recommend using the `h1` to `h6` elements for headings and use `mark` to highlight text. For more information, see the [W3C recommendations](https://www.w3.org/TR/html52/textlevel-semantics.html).\n\n#### Supported Protocols\n\n`lightning-formatted-rich-text` supports the following protocols.\n\n-   ftp\n-   ftps\n-   http\n-   https\n-   mailto\n-   tel\n-   callto\n-   cid\n-   xmpp\n-   ciscotel\n-   navision\n\nURLs such as `www.salesforce.com` or `salesforce.com` are also displayed as links. All links, including those that don't include a protocol, are displayed using the anchor tag with a target value of `_blank`. To display links with other target values, use [lightning-formatted-url](bundle/lightning-formatted-url/) instead.\n\nEncode parenthesis characters for URL links. Use `%28` for the opening parenthesis `(` and `%29` for the closing parenthesis `(`. Parenthesis characters that aren't URL encoded break the URL link.\n\n#### Usage Considerations\n\nFormatting of list items for ordered and unordered lists varies across browsers. In particular, indents and alignment styles applied to lists in rich text don't render the same in `lightning-formatted-rich-text` across all browsers. See [list-style-position on MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position).\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedRichTextBasic extends LightningElement {\n    get svgRichText() {\n        return 'This <b>SVG</b> is not whitelisted: [<!-- I am ready now, click one of the buttons! --><svg><image id=\"v-146\" width=\"500\" height=\"500\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"data:image/svg+xml;utf8,%3Csvg%20viewBox%3D%220%200%20100%20100%22%20height%3D%22100%22%20width%3D%22100%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20data-name%3D%22Layer%201%22%20id%3D%22Layer_1%22%3E%0A%20%20%3Ctitle%3ECompute%3C%2Ftitle%3E%0A%20%20%3Cg%3E%0A%20%20%20%20%3Crect%20fill%3D%22%239d5025%22%20ry%3D%229.12%22%20rx%3D%229.12%22%20height%3D%2253%22%20width%3D%2253%22%20y%3D%2224.74%22%20x%3D%2223.5%22%3E%3C%2Frect%3E%0A%20%20%20%20%3Crect%20fill%3D%22%23f58536%22%20ry%3D%229.12%22%20rx%3D%229.12%22%20height%3D%2253%22%20width%3D%2253%22%20y%3D%2222.26%22%20x%3D%2223.5%22%3E%3C%2Frect%3E%0A%20%20%3C%2Fg%3E%0A%3C%2Fsvg%3E\" preserveratio=\"true\" style=\"border-color: rgb(51, 51, 51); box-sizing: border-box; color: rgb(51, 51, 51); cursor: move; font-family: sans-serif; font-size: 14px; line-height: 20px; outline-color: rgb(51, 51, 51); text-size-adjust: 100%; column-rule-color: rgb(51, 51, 51); -webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); -webkit-text-emphasis-color: rgb(51, 51, 51); -webkit-text-fill-color: rgb(51, 51, 51); -webkit-text-stroke-color: rgb(51, 51, 51); user-select: none; vector-effect: non-scaling-stroke;\"></image></svg>]';\n    }\n\n    get listRichText() {\n        return '<ol><li>This list should be formatted properly</li><li>Other classes should be correctly added too</li><li><a href=\"http://www.google.com\">Link to Google</a></li></li></ol>';\n    }\n\n    get linkifyRichText() {\n        return 'You should be able to navigate with the following links: <ul><li><a href=\"http://www.google.com\">www.google.com</a></li><li>www.salesforce.com</li><li>http://www.google.com</li><li>salesforce.com</li></ul> and this email address: email@richtext.com.';\n    }\n}\n",
        "html": "<template>\n    <div>\n        <p>\n            <lightning-formatted-rich-text value=\"Plain boring text\"></lightning-formatted-rich-text>\n        </p>\n        <p>\n            <lightning-formatted-rich-text value=\"This &lt;em&gt;is&lt;/em&gt; some simple rich text. &lt;strong&gt;Hello!&lt;/strong&gt;\"></lightning-formatted-rich-text>\n        </p>\n        <p>\n            <lightning-formatted-rich-text value=\"This is a link to &lt;a href=&quot;http://www.salesforce.com&quot;&gt;Salesforce&lt;/a&gt;\"></lightning-formatted-rich-text>\n        </p>\n        <p>\n            <lightning-formatted-rich-text value={svgRichText}></lightning-formatted-rich-text>\n        </p>\n        <p>\n            <lightning-formatted-rich-text value={listRichText} class=\"slds-text-body_small\"></lightning-formatted-rich-text>\n        </p>\n        <p>\n            <lightning-formatted-rich-text value={linkifyRichText} class=\"slds-text-body_small\"></lightning-formatted-rich-text>\n        </p>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-formatted-text",
    "shortDescription": "This component displays read-only text, with the ability to convert URLs and email addresses into clickable links, and newline characters into line breaks, providing a user-friendly reading experience.",
    "relatedComponents": {
      "lightning-formatted-url": "optional",
      "lightning-formatted-email": "optional",
      "lightning-formatted-rich-text": "optional"
    },
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-text value='I like salesforce.com and trailhead.salesforce.com.'>",
          "<lightning-formatted-text value={myStringValue}>"
        ]
      },
      {
        "name": "linkify",
        "typeSignature": "boolean",
        "examples": [
          "<lightning-formatted-text value='I like salesforce.com and trailhead.salesforce.com.' linkify>",
          "<lightning-formatted-text value={myStringValue} linkify>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're reading a blog post on a website. The post mentions a few websites and email addresses. Instead of just being plain text, the <lightning-formatted-text> component can make these websites and email addresses clickable links. This makes it easier for you to visit these websites or send an email.",
      "You're on a company's contact page, and they've listed their email address. Instead of having to copy and paste the email address into your email client, the <lightning-formatted-text> component can turn the email address into a clickable link that opens your email client with a new message addressed to the company.",
      "You're reading a product description on an online store. The description mentions a few other products that you might be interested in. With the <lightning-formatted-text> component, these product names can be turned into clickable links that take you directly to their respective product pages."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Formatted Text\n      description: URLs and email addresses are displayed as links when you specify the linkify attribute. Newline characters are converted to line breaks.\n---\n\nA `lightning-formatted-text` component displays a read-only representation of\ntext, and can convert URLs and email addresses to links, or \"linkify\" them.\nIt also converts the `\\r` and `\\n` characters into `<br />` tags.\n\nBy default, URLs and email addresses display as plain text.\nTo display URLs and email addresses in a block of text as links, include\n`linkify` on the `lightning-formatted-text` tag.\n\n`linkify` wraps URLs and email addresses in anchor tags with\n`target=\"_blank\"`. If the URL protocol isn't specified in the text,\nthe link's `href` uses `https://` or `http://` to match the host domain's\nprotocol. For example, `www.example.com` is prefixed with `https://`\nif the host domain's protocol is `https://`. The `href` uses `mailto://`\nfor email addresses.\n\nThis example uses domain names without protocols in the text.\n\n```html\n<template>\n    <lightning-formatted-text\n        value=\"I like salesforce.com and trailhead.salesforce.com.\"\n        linkify\n    >\n    </lightning-formatted-text>\n</template>\n```\n\nThe example renders like this.\n\n```html\nI like <a target=\"_blank\" href=\"https://salesforce.com\">salesforce.com</a> and\n<a target=\"_blank\" href=\"https://trailhead.salesforce.com\"\n    >trailhead.salesforce.com</a\n>.\n```\n\n#### Usage Considerations\n\n`lightning-formatted-text` supports the following protocols: `http`, `https`,\n`ftp`, and `mailto`.\n\nIf you're working with hyperlinks and want to specify the `target` value, use\n`lightning-formatted-url` instead. If you're working with email addresses only,\nuse `lightning-formatted-email`.\n\nFor rich text that uses tags beyond anchor tags, use\n`lightning-formatted-rich-text` instead.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedTextBasic extends LightningElement {}\n",
        "html": "<template>\n    <p><lightning-formatted-text value=\"Email salesforce.com and info.salesforce.com\" ></lightning-formatted-text></p>\n    <p><lightning-formatted-text value=\"Email info@salesforce.com\" ></lightning-formatted-text></p>\n    <p><lightning-formatted-text value=\"Email salesforce.com and info.salesforce.com\" linkify></lightning-formatted-text></p>\n    <p><lightning-formatted-text value=\"Email info@salesforce.com\" linkify></lightning-formatted-text></p>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-formatted-time",
    "shortDescription": "This component displays a read-only representation of time in the user's locale format, providing a consistent, locale-specific time display experience.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-time value=\"22:12:30.999\">"]
      }
    ],
    "useCases": [
      "A user could use the <lightning-formatted-time> component on a website that displays international flight schedules. The component would display the departure and arrival times of flights in the user's local time format, making it easier for them to understand the schedule.",
      "The <lightning-formatted-time> component could be used in an online conference platform. The component would display the start and end times of different sessions in the user's local time format, helping them to plan their participation in the conference.",
      "A user could use the <lightning-formatted-time> component on a website that provides live sports scores. The component would display the start time of each game in the user's local time format, allowing them to keep track of when they need to tune in.",
      "The <lightning-formatted-time> component could be used in an online project management tool. The component would display the due time for each task in the user's local time format, helping them to manage their workload and meet their deadlines.",
      "A user could use the <lightning-formatted-time> component on a website that provides weather forecasts. The component would display the time at which each forecast is valid in the user's local time format, helping them to plan their activities based on the weather."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Formatted Time\n      description: Time value displayed in the user's locale format. Include a Z suffix in the time value to indicate Universal Time.\n---\n\nA `lightning-formatted-time` component displays a read-only representation of\ntime in the user's locale format. A valid ISO8601 formatted time string must\nbe used.\n\nAn ISO8601 formatted time string matches one of the following patterns.\n\n-   HH:mm\n-   HH:mm:ss\n-   HH:mm:ss.SSS\n\n`HH` is the number of hours that have passed since midnight, `mm` is the\nnumber of minutes that have passed since the start of the hour, `ss` is\nthe number of seconds since the start of the minute, and `SSS` is the number\nof milliseconds since the start of the second. Time is always displayed in Universal Time (UTC).\n\nOffsets aren't supported, and the component ignores them. For example, `14:30+05:00` is treated as `14:30`.\n\nThe following example returns `10:12:30 PM`.\n\n```html\n<template>\n    <lightning-formatted-time value=\"22:12:30.999\"> </lightning-formatted-time>\n</template>\n```\n\nSalesforce uses the format HH:mm:ss.SSSZ for time fields. The time field is a\ntimestamp without the date included. Time values in Salesforce are not\nlocalized or associated with a time zone.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedTimeBasic extends LightningElement {}\n",
        "html": "<template>\n    <p>Simple Time value: <lightning-formatted-time value=\"22:12:30.999\"></lightning-formatted-time></p>\n    <p>Time value with Z suffix: <lightning-formatted-time value=\"22:12:30.999Z\"></lightning-formatted-time></p>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-formatted-url",
    "shortDescription": "This component is used to display a URL as a clickable link, with options to customize the displayed text and target, supporting both absolute and relative URLs for navigation within the same frame, a new tab, or a parent frame.",
    "relatedComponents": {
      "lightning-navigation": "optional",
      "lightning-formatted-email": "optional",
      "lightning-formatted-phone": "optional"
    },
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "string",
        "examples": [
          "<lightning-formatted-url value=\"https://salesforce.com\">",
          "<lightning-formatted-url value=\"https://www.salesforce.com\">",
          "<lightning-formatted-url value=\"/my/path\">"
        ]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-url value=\"https://salesforce.com\" label=\"Visit salesforce.com\">"]
      },
      {
        "name": "target",
        "typeSignature": "string",
        "examples": ["<lightning-formatted-url value=\"https://salesforce.com\" target=\"_blank\">"]
      }
    ],
    "useCases": [
      "A user might use the <lightning-formatted-url> component when they want to display a clickable link on their website. For example, they might want to include a link to their company's homepage. They would use this component to create the link, and when a visitor clicks on it, they would be taken to the homepage.",
      "Another scenario where the <lightning-formatted-url> component might be used is in a blog post or article. The author might want to include links to other relevant articles or resources. They could use this component to create these links, and when a reader clicks on one, they would be taken to the corresponding article or resource.",
      "The <lightning-formatted-url> component could also be used in a navigation menu. The website owner might want to include links to different sections of their website. They would use this component to create these links, and when a visitor clicks on one, they would be taken to the corresponding section of the website."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Formatted URL\n      description: Displays a URL with a protocol such as http:// and https://. A value \"/my/path\" creates a relative URL.\n---\n\nA `lightning-formatted-url` component displays a URL using an anchor `<a>` tag with an `href` attribute. The `value` you provide can be a relative or absolute URL. An absolute URL uses a protocol like `http://`, `https://`, or\n`ftp://`, followed by the domain name and path. The component renders the link using the `http://` protocol by default.\n\nURLs without a protocol use the host domain's protocol. For example, `www.example.com` is prefixed with `https://` if the host domain's protocol is `https://`.\n\nTo customize the displayed text, provide a `label`. Otherwise,\nthe URL you pass into `value` is used as the displayed text.\n\n```html\n<template>\n    <lightning-formatted-url\n        value=\"https://salesforce.com\"\n        label=\"Visit salesforce.com\"\n        target=\"_blank\"\n    ></lightning-formatted-url>\n</template>\n```\n\nThe rendered HTML looks like this.\n\n```html\n<a href=\"https://salesforce.com\" target=\"_blank\">Visit salesforce.com</a>\n```\n\nBy default, clicking the link takes you to the URL in the same frame where it was clicked.\n\n#### Creating Absolute URLs\n\nTo create an absolute URL, set the `value` attribute using one of these patterns.\n\n-   www.salesforce.com\n-   http://www.salesforce.com\n-   https://developer.salesforce.com/docs/component-library\n\n`http://` is inserted before a value like `www.salesforce.com` or `my/path`, which does not begin with a slash. This creates an absolute URL like `http://www.salesforce.com` or `http://my/path`. This behavior is contrary to that of the anchor `<a>` tag where omitting the leading slash results in a relative path from the current directory.\n\nThis example displays an absolute URL and uses the provided `value` as the `href` value for the `<a>` tag.\n\n```html\n<template>\n    <lightning-formatted-url value=\"https://www.salesforce.com\">\n    </lightning-formatted-url>\n</template>\n```\n\nIf you don't provide a protocol, `http://` is prefixed to the URL by default. The rendered HTML of the previous example\nuses `https` because the protocol is specified.\n\n```html\n<a href=\"https://www.salesforce.com\">https://www.salesforce.com</a>\n```\n\nURLs without a protocol use the host domain's protocol. For example, `www.example.com` is prefixed with `https://` if the host domain's protocol is `https://`.\n\n#### Creating Relative URLs\n\nTo create a relative URL, set the `value` attribute using one of these patterns.\n\n-   index.html\n-   /my/path\n-   ./my/path\n-   ../my/path\n\nIf the `value` includes a leading slash in the path like `/my/path`, the resulting URL is root-relative and uses the domain of the page as the prefix. For example, if the current page is located on `example.com/directory/`, the resulting URL is `http://example.com/my/path`. To create a URL from the current directory, start the URL with a dot-slash like `./my/path`. To create a URL to the parent directory of the current page, start the URL with dot-dot-slash like `../my/path`.\n\nA relative URL navigates to a path within the current site you're on.\n\n```html\n<template>\n    <!-- Resolves to http://current-domain/my/path -->\n    <lightning-formatted-url value=\"/my/path\"> </lightning-formatted-url>\n</template>\n```\n\nThe rendered HTML looks like this. Clicking the URL takes you to `http://current-domain/my/path`.\n\n```html\n<a href=\"/my/path\">/my/path</a>\n```\n\n#### Specifying a Target\n\nUse the `target` attribute to change where the link should open. If you don't\nprovide a target, `lightning-formatted-url` uses the `_self` target value.\n\nSupported `target` values are:\n\n-   `_blank`: Opens the link in a new window or tab. In a mobile hybrid app like the Salesforce mobile app, the link is handled similar to `_self` and opens inside the app if possible.\n-   `_self`: Opens the link in the same frame as it was clicked. This is the default behavior. In Lightning Experience and Experience Builder sites, the link is opened in a new tab if it cannot be opened inside the app. We recommend that you use [`lightning-navigation`](bundle/lightning-navigation/documentation) to create links within Lightning Experience and Experience Builder sites.\n-   `_parent`: Opens the link in the parent frame. If there's no parent, this is similar to `_self`.\n-   `_top`: Opens the link into the top-level browsing context. If there's no parent, this is similar to `_self`.\n\nFor more information about link targets, see the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a).\n\n#### Usage Considerations\n\nWe recommend using absolute URLs where possible as they can prevent duplicate content to improve search engine optimization.\nHaving your internal links as relative URLs can also expose the structure of your website.\n\n`lightning-formatted-url` does not support email addresses or phone numbers. To create an email address with the `mailto:` protocol, use `lightning-formatted-email`.\nTo create a phone number with the `tel:` protocol, use `lightning-formatted-phone`.\n\nThe framework handles navigation for you, so there's no need to provide `onclick`\nbehavior with `lightning-formatted-url`.\n\nTo create a link with a\ncustom `onclick` event handler, use the HTML anchor tag `<a>` instead. To create a URL that navigates to another page in Salesforce, use\n[`lightning-navigation`](bundle/lightning-navigation/documentation).\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class FormattedUrlBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small\">\n            Absolute URLs are created if the value doesn't begin with /\n        </h2>\n        <div class=\"slds-p-around_medium\">\n            <p><lightning-formatted-url value=\"my/path\" tooltip=\"Omit leading slash\" target=\"_blank\"></lightning-formatted-url></p>\n            <p><lightning-formatted-url value=\"www.salesforce.com\" tooltip=\"Use full domain name\" target=\"_blank\"></lightning-formatted-url></p>\n            <p><lightning-formatted-url value=\"https://salesforce.com\" tooltip=\"Use https://domain-name\" label=\"Visit salesforce.com\" target=\"_blank\" ></lightning-formatted-url></p>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small\">\n            Relative URLs are created if the value begins with /\n        </h2>\n        <div class=\"slds-p-around_medium\">\n            <p><lightning-formatted-url value=\"/my/path\" tooltip=\"Include leading slash\" target=\"_blank\"></lightning-formatted-url></p>\n            <p><lightning-formatted-url value=\"/my/path\" label=\"Visit /my/path on this website\" target=\"_blank\"></lightning-formatted-url></p>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small\">\n            Only http, https, and ftp protocols are supported.\n        </h2>\n        <div class=\"slds-p-around_medium\">\n            <p><lightning-formatted-url value=\"https://www.salesforce.com\" target=\"_blank\"></lightning-formatted-url></p>\n            <p><lightning-formatted-url value=\"ftp://public.ftp-servers.example.com/path/to/myfile.txt\" target=\"_blank\"></lightning-formatted-url></p>\n        </div>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-grouped-combobox",
    "shortDescription": "This component is a customizable dropdown menu with autocomplete support, allowing users to select from a list of options that can be dynamically updated based on user input.",
    "relatedComponents": {
      "lightning-base-combobox": "required",
      "lightning-combobox": "optional",
      "lightning-picklist": "optional",
      "lightning-input-address": "optional",
      "lightning-input-field": "optional"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-grouped-combobox label='Contact'>"]
      },
      {
        "name": "placeholder",
        "typeSignature": "string",
        "examples": ["<lightning-grouped-combobox placeholder='Search Contacts...'>"]
      },
      {
        "name": "input-text",
        "typeSignature": "string",
        "examples": ["<lightning-grouped-combobox input-text={_inputText}>"]
      },
      {
        "name": "items",
        "typeSignature": "object",
        "examples": ["<lightning-grouped-combobox items={_contactItems}>"]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": [
          "<lightning-grouped-combobox variant='label-hidden'>",
          "<lightning-grouped-combobox variant='label-stacked'>",
          "<lightning-grouped-combobox variant='label-inline'>"
        ]
      },
      {
        "name": "input-icon-name",
        "typeSignature": "string",
        "examples": ["<lightning-grouped-combobox input-icon-name='utility:search'>"]
      },
      {
        "name": "input-icon-size",
        "typeSignature": "string",
        "examples": ["<lightning-grouped-combobox input-icon-size='x-small'>"]
      },
      {
        "name": "input-icon-alternative-text",
        "typeSignature": "string",
        "examples": ["<lightning-grouped-combobox input-icon-alternative-text='Search icon'>"]
      },
      {
        "name": "input-maxlength",
        "typeSignature": "integer",
        "examples": ["<lightning-grouped-combobox input-maxlength={50}>"]
      },
      {
        "name": "show-activity-indicator",
        "typeSignature": "boolean",
        "examples": ["<lightning-grouped-combobox show-activity-indicator={_showSpinner}>"]
      },
      {
        "name": "show-dropdown-activity-indicator",
        "typeSignature": "boolean",
        "examples": ["<lightning-grouped-combobox show-dropdown-activity-indicator={true}>"]
      },
      {
        "name": "value",
        "typeSignature": "string",
        "examples": ["<lightning-grouped-combobox value='actionNewContact'>"]
      },
      {
        "name": "required",
        "typeSignature": "boolean",
        "examples": ["<lightning-grouped-combobox required={true}>"]
      },
      {
        "name": "disabled",
        "typeSignature": "boolean",
        "examples": ["<lightning-grouped-combobox disabled={true}>"]
      },
      {
        "name": "field-level-help",
        "typeSignature": "string",
        "examples": ["<lightning-grouped-combobox field-level-help='This is a help text'>"]
      },
      {
        "name": "readonly",
        "typeSignature": "boolean",
        "examples": ["<lightning-grouped-combobox readonly={true}>"]
      },
      {
        "name": "validity",
        "typeSignature": "boolean",
        "examples": ["<lightning-grouped-combobox validity={true}>"]
      },
      {
        "name": "pills",
        "typeSignature": "object",
        "examples": ["<lightning-grouped-combobox pills={_pills}>"]
      },
      {
        "name": "input-pill",
        "typeSignature": "object",
        "examples": ["<lightning-grouped-combobox input-pill={_inputPill}>"]
      },
      {
        "name": "ontextinput",
        "typeSignature": "(ev: CustomEvent & { detail: { inputText: string } }) => void",
        "examples": ["<lightning-grouped-combobox ontextinput={handleContactInput}>"]
      },
      {
        "name": "onselect",
        "typeSignature": "(ev: CustomEvent & { detail: { value: string } }) => void",
        "examples": ["<lightning-grouped-combobox onselect={handleContactSelect}>"]
      }
    ],
    "useCases": [
      "Imagine you're using a customer relationship management (CRM) system and you need to search for a specific contact. You start typing the contact's name into a search bar. As you type, a dropdown list appears below the search bar, suggesting contacts whose names match what you've typed so far. This is a scenario where the <lightning-grouped-combobox> component might be used.",
      "Consider a scenario where you're using an online shopping platform and you want to search for a specific product. You start typing the product's name into a search bar. As you type, a dropdown list appears, suggesting products that match your input. The list updates as you continue to type, refining the suggestions based on your input. This is another scenario where the <lightning-grouped-combobox> component could be used.",
      "Imagine you're using a project management tool and you need to assign a task to a team member. You start typing the team member's name into a field. As you type, a dropdown list appears, suggesting team members whose names match your input. The list updates as you continue to type, refining the suggestions based on your input. This is a scenario where the <lightning-grouped-combobox> component might be used."
    ],
    "docs": "# lightning-grouped-combobox\n\n> `lightning-grouped-combobox` is internal-only. It's not yet supported for use by customers on the Salesforce platform.\n\n-   [Overview](#overview)\n-   [Implementing Autocomplete Behavior](#implementing-autocomplete-behavior)\n-   [Updating Dropdown Items](#updating-dropdown-items)\n-   [Attributes](#attributes)\n-   [Methods](#methods)\n-   [Custom Events](#custom-events)\n-   [Usage Considerations](#usage-considerations)\n-   [Aura Examples](#aura-examples)\n-   [LWC Examples](#lwc-examples)\n\n## Overview\n\n`lightning-grouped-combobox` displays dropdown options with icons and autocomplete (typeahead) support. Optionally it supports a filter and pills. It uses `lightning-base-combobox` internally and provides you with full control over the displayed data. You can handle the text input with your own custom behavior.\n\nThis component is based on [combobox (grouped options)](https://lightningdesignsystem.com/components/combobox/#Grouped-options), [grouped comboboxes](<https://lightningdesignsystem.com/components/combobox/#Grouped-Comboboxes-(Cross-entity-Polymorphic)>) and [autocomplete combobox](https://lightningdesignsystem.com/components/combobox/#Autocomplete-Combobox) in the Lightning Design System.\n\nIn Lightning Experience, many autocomplete components are implemented using `lightning-grouped-combobox`.\n\nHere's an example on how to implement typeahead using `lightning-grouped-combobox`. You must handle user input and set the items for the dropdown options, which is described in detail in the next sections.\n\n```html\n<lightning-grouped-combobox\n    label=\"Contact\"\n    placeholder=\"Search Contacts...\"\n    items={_contactItems}\n    input-text={_inputText}\n    show-activity-indicator={_showSpinner}\n    ontextinput={handleContactInput}\n    onselect={handleContactSelect}\n>\n</lightning-grouped-combobox>\n```\n\n## Implementing Autocomplete Behavior\n\nA combobox with autocomplete behavior allows you to select an option from the dropdown list. The list can change depending on the text input. Displaying a subset of items is useful when the list is very large, as user input can display and update the options that match the input.\n\nIn this example, a set of items provided by `defaultContactItems` is displayed in the dropdown list as a user types text in the input field. Optionally, you can display a spinner while the the input text and items are being matched. If no items are found, you can provide an option to create a new record or perform advanced search on the typed text.\n\n```javascript\n\nimport { LightningElement, track } from `lwc`;\n\nconst defaultContactItems = [{ type: 'option-inline',\n                               iconName: 'utility:add',\n                               text: 'New Contact',\n                               value: 'actionNewContact'}];\n\nexport default class AutocompleteExample extends LightningElement {\n    @track _contactItems;\n    @track _inputText;\n    @track _showSpinner;\n\n    connectedCallback() {\n       // You can set _contactItems here to most-used-contacts, along with an action\n       // to create a new contact\n        this._contactItems = defaultContactItems;\n    }\n\n    handleContactInput(event) {\n        const enteredText = event.target.inputText.toLowerCase();\n\n        this._showSpinner = false;\n        if (enteredText === '') {\n            this._contactItems = defaultContactItems;\n        } else {\n            this._showSpinner = true;\n            // In a more realistic scenario you’d get the matching data from the server\n            // instead and transform it into items\n            this._contactItems = this.findMatchingContacts(enteredText);\n            this._contactItems.push({\n                type: 'option-inline',\n                iconName: 'utility:add',\n                text: 'New Contact',\n                value: 'actionNewContact',\n            });\n            this._contactItems.unshift({\n                type: 'option-inline',\n                iconName: 'utility:search',\n                text: `\"${enteredText}\" in Contacts`,\n                value: 'actionSearchContacts',\n            });\n\n            this._showSpinner = false;\n\n        }\n    }\n\n    handleContactSelect(event) {\n        alert(`You selected ${event.detail.value}`);\n    }\n\n    findMatchingContacts(enteredText) {\n        // Go to the server and fetch the matching contacts, each contact would have .Id\n        // and .FullName properties\n        const matchingContactsFromTheServer = [];\n        return matchingContactsFromTheServer.map(contact => {\n            return {\n                type: 'option-inline',\n                iconName: 'standard:contact',\n                text: contact.FullName,\n                value: contact.Id\n            };\n        });\n    }\n}\n```\n\n## Updating Dropdown Items\n\nThe dropdown list is displayed if there's at least one item. If `items` is empty, the dropdown is hidden.\n\n`items` support the following types: `option-inline ` and `option-card`. Grouping of items, which is a list of items with an associated label, are also supported.\n\n`option-inline` is an inline option that supports a left icon and text, and `option-card` supports left/right icons, text and subText. Items can have any combination of the above.\n\nHere’s an example of items without groups, using inline options:\n\n```javascript\n[\n\t {\n\t\ttype: 'option-inline',\n\t\ttext: 'John Doe',\n\t\ticonName: 'standard:contact'\n        iconAlternativeText: 'Contact icon',\n        value: 'a07B0000001fDrS' // ID of the contact\n\t },\n\t {\n\t\ttype: 'option-inline',\n\t\ttext: 'Jane Dowson',\n\t\ticonName: 'standard:contact'\n        iconAlternativeText: 'Contact icon',\n        value: 'a07B0000001gAbCD' // ID of the contact\n\t }\n]\n```\n\nHere's an example that uses a card option:\n\n```javascript\n[\n    {\n        type: 'option-card',\n        text: 'Global Media',\n        subText: '(905) 555-1212',\n        iconName: 'standard:account',\n        iconAlternativeText: 'Account icon',\n        value: 'b07B0000001gDeFg', // ID of the account\n    },\n];\n```\n\nHere's an example that defines several groups of inline options.\n\n```javascript\n[\n  { label: \"Group One\", items: [ {type: 'option-inline', … }, … ] },\n  { label: \"Group Two\", items: [ {type: 'option-inline', … }, … ] },\n...\n]\n```\n\nTo highlight part of the text or subtext in a dropdown item that matches user input, use the `\"highlight: true\"` property and pass the text you want to highlight to `text` and `subText`. This example bolds `Glob` in the `Global` text.\n\n```javascript\n\ttext: [{text: ‘Glob’, highlight: true}, {text: ‘al’}]\n```\n\n## Attributes\n\nUse the following attributes to customize `lightning-grouped-combobox`.\n\n| Attribute Name                   | Type                                                                                                                                                                                                                                           | Description                                                                                                                                                                                                                                      |\n| -------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| label                            | string                                                                                                                                                                                                                                         | The text label for the combobox.                                                                                                                                                                                                                 |\n| placeholder                      | string                                                                                                                                                                                                                                         | The placeholder text on the input field. The default is 'Select an Item'.                                                                                                                                                                        |\n| input-text                       | string                                                                                                                                                                                                                                         | The default text or existing value in the input field.                                                                                                                                                                                           |\n| items                            | object                                                                                                                                                                                                                                         | The list of items that's displayed in the dropdown. This list can be updated to match user input. See the **Updating Dropdown Items** section.                                                                                                   |\n| variant                          | string                                                                                                                                                                                                                                         | Changes the appearance of the combobox. Supported variants include `label-hidden`, `label-stacked`, and `label-inline`. The default is `standard`.                                                                                               |\n| input-icon-name                  | string                                                                                                                                                                                                                                         | The icon that appears on the input field. The default is `utility:search`.                                                                                                                                                                       |\n| input-icon-size                  | string                                                                                                                                                                                                                                         | The size of the icon that appears on the input field. The default is `x-small`.                                                                                                                                                                  |\n| input-icon-alternative-text      | string                                                                                                                                                                                                                                         | The alternative text for the icon that's displayed on the input field.                                                                                                                                                                           |\n| input-maxlength                  | integer                                                                                                                                                                                                                                        | The maximum number of characters allowed for the input field.                                                                                                                                                                                    |\n| show-activity-indicator          | boolean                                                                                                                                                                                                                                        | Displays a spinner in the input field to indicate activity. The default is false.                                                                                                                                                                |\n| show-dropdown-activity-indicator | boolean                                                                                                                                                                                                                                        | Displays a spinner in the dropdown list to indicate activity. The default is false.                                                                                                                                                              |\n| value                            | string                                                                                                                                                                                                                                         | When not-empty flags to the component that a valid selection has been made, used only for constraint validation in conjunction with the `required` attribute. If empty, and `required` is set to true the component will be in an invalid state. |\n| required                         | boolean                                                                                                                                                                                                                                        | Specifies whether an input value is required. The default is false. When `true` must be used in conjunction with `value`.                                                                                                                        |\n| disabled                         | boolean                                                                                                                                                                                                                                        | Specifies whether the input field is disabled. Disabled fields are grayed out and users cannot interact with them. The default is false.                                                                                                         |\n| field-level-help                 | string                                                                                                                                                                                                                                         | Help text detailing the purpose and function of the combobox, displayed on hover.                                                                                                                                                                |\n| readonly                         | boolean                                                                                                                                                                                                                                        | Specifies whether the input field is read-only. The default is false.                                                                                                                                                                            |\n| validity                         | boolean                                                                                                                                                                                                                                        | Represents the validity states that an element is in, with respect to constraint validation.                                                                                                                                                     |\n| pills                            | object                                                                                                                                                                                                                                         | A list of pills that includes the `type`, `href`, `label`, `iconName`, and `alternativeText`. Pills are used for multi-selection and appear under the input.                                                                                     |\n| input-pill                       | The pill that appears in the input field, which is supported for single-selection. Displaying this pill prevents you from typing or selecting another option. An \"x\" button is present on the pill for the user to remove the selected option. |\n\nPass in the following key-value pairs to `items`.\n\n| Key Name                 | Type   | Description                                                                                        |\n| ------------------------ | ------ | -------------------------------------------------------------------------------------------------- |\n| type                     | string | Supported types include `option-inline` and `option-card`.                                         |\n| iconName                 | string | The icon that appears on the left of the option name.                                              |\n| iconSize                 | string | Supported by `option-card` only. The size of the icon that appears on the left of the option name. |\n| iconAlternativeText      | string | Assistive text for the icon that appears on the left of the option name                            |\n| rightIconName            | string | The icon that appears on the right of the option name. Supported for the `option-card` type only.  |\n| rightIconSize            | string | The size of the icon that appears on the right of the option name. The default is `small`.         |\n| rightIconAlternativeText | string | Assistive text for the icon that appears on the right of the option name.                          |\n| text                     | string | The text to display for the option.                                                                |\n| subText                  | string | The subtitle to display below the text. Supported for `option-card` only.                          |\n| value                    | string | The value associated with the option.                                                              |\n\n## Methods\n\n**`blur()`**\n\nRemoves focus from the input element.\n\n**`focus()`**\n\nSets focus on the input element.\n\n**`focusAndOpenDropdownIfNotEmpty()`**\n\nDisplays the dropdown list if there is at least one item or `show-dropdown-activity-indicator` is set to true.\n\n**`checkValidity()`**\n\nIndicates whether the combobox has any validity errors. Returns the valid attribute value (Boolean) on the ValidityState object.\n\n**`reportValidity()`**\n\nDisplays the error messages and returns false if the input is invalid. If the input is valid, `reportValidity()` clears displayed error messages and returns true.\n\n**`setCustomValidity(message)`**\n\nSets a custom error message to be displayed when the combobox value is submitted.\n\nmessage (string) - The string that describes the error. If message is an empty string, the error message is cleared.\n\n## Custom Events\n\n**`dropdownopenrequest`**\n\nThe event fired when the dropdown list is requested to be opened. An empty dropdown won't be opened. However, you can lazy load the dropdown options for the dropdown to open.\n\n**`endreached`**\n\nThe event fired when the bottom of the dropdown list is reached while scrolling.\n\n**`pillremove`**\n\nThe event fired when a pill's remove button is pressed.\n`event.detail` returns the pill that has had its remove button pressed.\n\n**`textchange`**\n\nThe event fired when the text in the input has been committed by the user, either by pressing Enter, or by blurring away from the input. Use this when you don't need to respond to live user typing.\nUse `event.target.inputText` to return the updated text input.\n\n**`textinput`**\n\nThe event fired when the input text changes. Use this when you want to react to live-typing of the text. Use `event.target.inputText` to return the updated text input.\n\n**`select`**\n\nThe event fired when an item is selected on the dropdown list, either through keyboard interaction or via mouse interaction. `event.detail.value` returns the value of the selected item.\n\n**`selectfilter`**\n\nThe event fired when an item is selected on the object filter, either through keyboard interaction or via mouse interaction. `event.detail.value` returns the value of the selected item.\n\n## Usage Considerations\n\nWhen customizing autocomplete behavior for `lightning-grouped-combobox`, consider the following use cases.\n\n-   Display default options when the input is focused or display matches only when more than X character have been typed\n-   Display a visual cue to show when the data is loaded from the server-side, on the input, or inside the dropdown list\n-   Display default items when there are no matches such as enabling an option to create a new record or hide the dropdown list\n\nIf you want a dropdown component that doesn't need autocomplete behavior, consider using either `lightning-combobox` or `lightning-picklist`. The latter displays a simple dropdown list for single selection, and a dual listbox for multiple selection. `lightning-picklist` displays the native `select` element on mobile devices. For example, base components like `lightning-input-address` and `lightning-input-field` use `lightning-picklist` internally.\n\n## Examples\n\nFor an Aura implementation, see `exampleGroupedCombobox.cmp` in this repo. For an LWC implementation, see `lightning-lookup-desktop` in this repo.\n",
    "examples": []
  },
  {
    "tagName": "lightning-helptext",
    "shortDescription": "This component displays an icon with a popover containing brief text to describe an element on the screen, providing field-level help and enhancing user experience by automatically adjusting its position according to the viewport.",
    "relatedComponents": {
      "lightning-button-icon": "optional"
    },
    "publicApi": [
      {
        "name": "content",
        "typeSignature": "string",
        "examples": [
          "<lightning-helptext content='Your email address will be your login name'>",
          "<lightning-helptext content={tooltipContent}>"
        ]
      },
      {
        "name": "icon-name",
        "typeSignature": "string",
        "examples": [
          "<lightning-helptext icon-name='utility:salesforce1'>",
          "<lightning-helptext icon-name={iconName}>"
        ]
      },
      {
        "name": "icon-variant",
        "typeSignature": "string",
        "examples": [
          "<lightning-helptext icon-variant='error'>",
          "<lightning-helptext icon-variant='inverse'>",
          "<lightning-helptext icon-variant='warning'>"
        ]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": ["<lightning-helptext class='slds-m-left_xx-small'>", "<lightning-helptext class={customClass}>"]
      },
      {
        "name": "alternative-text",
        "typeSignature": "string",
        "examples": [
          "<lightning-helptext alternative-text='Show help text'>",
          "<lightning-helptext alternative-text={altText}>"
        ]
      }
    ],
    "useCases": [
      "In a web application where users need to fill out a form, the <lightning-helptext> component can be used to provide additional information about each field. For example, next to an email field, a small icon could be displayed. When the user hovers over this icon, a tooltip would appear explaining that the email address will be used for login purposes.",
      "In a web application with a complex user interface, the <lightning-helptext> component can be used to provide explanations for various elements on the screen. For instance, next to a button that triggers a specific action, a small icon could be displayed. When the user hovers over this icon, a tooltip would appear explaining what will happen when the button is clicked.",
      "In a web application where users need to interact with various icons, the <lightning-helptext> component can be used to provide descriptions for each icon. For example, next to a trash bin icon, a small icon could be displayed. When the user hovers over this icon, a tooltip would appear explaining that clicking the trash bin icon will delete the item."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Helptext\n      description: Basic default helptext example and an alternative icon example.\n---\n\nA `lightning-helptext` component displays an icon with a popover containing a\nsmall amount of text describing an element on screen. The popover is displayed\nwhen you hover or focus on the icon that's attached to it. On iOS devices, the\nhelptext popover opens when you tap on the icon and closes with a second tap\non the popover or the icon.\n\nThis component is similar to a tooltip and is useful to display field-level help text, for example. HTML markup is not supported in the tooltip content.\n\nThis example creates an icon with a tooltip.\n\n```html\n<template>\n    <lightning-helptext content=\"Your email address will be your login name\">\n    </lightning-helptext>\n</template>\n```\n\nThe popover is anchored on the lower left of the icon and shown above the icon\nif space is available. It automatically adjusts its position according to the\nviewport.\n\n#### Component Styling\n\n`lightning-helptext` implements the\n[tooltip](https://www.lightningdesignsystem.com/components/tooltips/) blueprint in the Salesforce Lightning Design System (SLDS).\n\n##### Icons\n\nBy default, the tooltip uses the `utility:info` icon but you can specify a\ndifferent icon with the `icon-name` attribute. The SLDS utility icon category offers nearly 200 utility icons that can be used\nin `lightning-helptext`. Although SLDS provides several\ncategories of icons, only the utility category can be used in\n`lightning-helptext`.\n\nVisit [utility icons](https://lightningdesignsystem.com/icons/#utility) to view the utility icons.\n\nWhen applying SLDS classes or icons, check that they are\navailable in the SLDS release tied to your org.\nThe SLDS site shows the latest SLDS\nresources, and these become available only when the new release\nis available in your org.\n\n##### Variants\n\nUse the `icon-variant` attribute to change the style of the icon with the following values.\n\n-   `bare` is the default variant and doesn't need to be specified\n-   `error` adds a red fill for the icon to call out a user- or system-related error\n-   `inverse` adds a white fill for the icon, useful for dark backgrounds\n-   `warning` adds a yellow fill for the icon to advise caution\n\n#### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds a margin to the left of the tooltip icon using the `slds-m-left_xx-small` class.\n\n```html\nsome text that appears before the tooltip icon here\n<lightning-helptext\n    icon-name=\"utility:salesforce1\"\n    content=\"tooltip content here\"\n    class=\"slds-m-left_xx-small\"\n></lightning-helptext>\n```\n\nTo apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n`lightning-helptext` contains the same customizable elements as `lightning-button-icon` for the button icon, which supports `--slds-c-button-*` custom properties. See the [`lightning-button-icon` documentation](bundle/lightning-button-icon/documentation).\n\nCustomizing the tooltip content using the `--slds-c-tooltip-*` custom properties isn't supported. `lightning-helptext` renders the tooltip as the child of the body element outside of the scoped container.\n\n#### Accessibility\n\n`lightning-helptext` contains a focusable button element. To ensure that users who aren't using a mouse can access the tooltip, `lightning-helptext` shows the tooltip on hover or on keyboard focus. The button renders with an `aria-describedby` attribute set to an ID that matches the element containing the tooltip text. The `aria-describedby` attribute enables assistive technology to announce the tooltip content.\n\nThe button renders assistive text that contains \"Help\" by default. To provide your own description, use the `alternative-text` attribute.\nThe text should describe the function of the icon, for example, \"Show help text\", instead of repeating the `content` description.\nProviding the purpose of the icon in the description improves usability and removes repetition of content for users of assistive technology.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class HelptextBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Helptext example using a default icon. Mouse over or focus on the icon to view the helptext content.\n        </h2>\n\n        <p class=\"slds-m-bottom_medium\">The tooltip displays on the lower left of the icon or above the icon if space is available. It automatically adjusts its position according to the viewport.</p>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            Subscribe\n            <lightning-helptext content=\"You'll receive weekly updates\"></lightning-helptext>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Helptext example with an alternative icon.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            Short Text\n            <lightning-helptext icon-name=\"utility:salesforce1\" content=\"Full text explanation of feature\"></lightning-helptext>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-i18n-cldr-options",
    "shortDescription": "This component is designed to facilitate internal usage on the platform by providing localization options generated from the Localizer's i18n-cldr-options, maintained by the globalization team, enhancing the user's global experience.",
    "relatedComponents": {},
    "publicApi": [],
    "useCases": [
      "Imagine you're using a website that's based in a different country, and you want to see prices in your own currency. The <lightning-i18n-cldr-options> component could be used to convert those prices to your local currency.",
      "Suppose you're using an international website and you want to see dates and times in your own time zone. The <lightning-i18n-cldr-options> component could be used to adjust the dates and times to match your local time zone.",
      "Let's say you're using a website in a language that's not your first language, and you want to see the website in your own language. The <lightning-i18n-cldr-options> component could be used to translate the website to your preferred language."
    ],
    "docs": "# i18nCldrOptions\n\nThis module gets generated from [Localizer's i18n-cldr-options](https://git.soma.salesforce.com/Globalization/localizerjs/tree/master/packages/%40localizer/i18n-cldr-options) which is maintained by the globalization team.\n\nWe then expose it as part of lightning for internal usage on the platform. This module is also part of our NPM distribution.\n",
    "examples": []
  },
  {
    "tagName": "lightning-i18n-service",
    "shortDescription": "This component is a module that provides internationalization services, maintained by the globalization team, for internal usage on the platform, enhancing the user's experience by supporting multiple languages and locales.",
    "relatedComponents": {},
    "publicApi": [],
    "useCases": [
      "Imagine you're using a website that sells products globally. The <lightning-i18n-service> component could be used to display product prices in the currency of your current location, making it easier for you to understand the cost without having to convert currencies yourself.",
      "Consider a global news website that publishes articles in multiple languages. The <lightning-i18n-service> component could be used to automatically translate the articles into your preferred language, enhancing your reading experience.",
      "Think about a multinational company's internal platform used by employees from different countries. The <lightning-i18n-service> component could be used to display the platform's interface in the user's native language, making it more user-friendly and easier to navigate."
    ],
    "docs": "# i18nService\n\nThis module gets generated from [Localizer's i18n-service](https://git.soma.salesforce.com/Globalization/localizerjs/tree/master/packages/%40localizer/i18n-service) which is maintained by the globalization team.\n\nWe then expose it as part of lightning for internal usage on the platform. This module is also part of our NPM distribution.\n",
    "examples": []
  },
  {
    "tagName": "lightning-icon",
    "shortDescription": "This component is a visual element that enhances usability by providing context through the use of customizable icons from the Lightning Design System or custom icons, offering a visually engaging experience to the end user.",
    "relatedComponents": {
      "lightning-icon": "required"
    },
    "publicApi": [
      {
        "name": "icon-name",
        "typeSignature": "string",
        "examples": [
          "<lightning-icon icon-name='action:approval'>",
          "<lightning-icon icon-name='utility:error'>",
          "<lightning-icon icon-name='utility:connected_apps'>"
        ]
      },
      {
        "name": "size",
        "typeSignature": "string",
        "examples": [
          "<lightning-icon icon-name='action:approval' size='large'>",
          "<lightning-icon icon-name='utility:error' size='small'>",
          "<lightning-icon icon-name='utility:connected_apps' size='medium'>"
        ]
      },
      {
        "name": "alternative-text",
        "typeSignature": "string",
        "examples": [
          "<lightning-icon icon-name='action:approval' alternative-text='Indicates approval'>",
          "<lightning-icon icon-name='utility:error' alternative-text='Error'>",
          "<lightning-icon icon-name='utility:connected_apps' alternative-text='Connected'>"
        ]
      },
      {
        "name": "src",
        "typeSignature": "string",
        "examples": ["<lightning-icon src={googleIcon}>"]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": [
          "<lightning-icon icon-name='utility:error' variant='error'>",
          "<lightning-icon icon-name='utility:connected_apps' variant='success'>"
        ]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": ["<lightning-icon icon-name='utility:connected_apps' class='my-icon'>"]
      }
    ],
    "useCases": [
      "In a project management application, a <lightning-icon> could be used to visually represent different types of tasks. For example, a 'check' icon could be used to represent completed tasks, a 'clock' icon for tasks in progress, and a 'warning' icon for tasks that are overdue. The size of the icons could be adjusted based on the importance of the task, with larger icons for high-priority tasks.",
      "In a music streaming application, <lightning-icon> could be used to create intuitive controls for the music player. Play, pause, next, and previous buttons could all be represented with different icons. The 'success' variant could be used to highlight the currently active button, such as 'play' when a song is playing.",
      "In an e-commerce application, <lightning-icon> could be used to represent different product categories. For example, a 'shirt' icon for clothing, a 'book' icon for literature, and a 'gamepad' icon for video games. The icons could be customized with different colors to match the branding of the website.",
      "In a weather application, <lightning-icon> could be used to represent different weather conditions. For example, a 'sun' icon for sunny weather, a 'cloud' icon for cloudy weather, and a 'rain' icon for rainy weather. The 'warning' variant could be used to represent severe weather conditions.",
      "In a social media application, <lightning-icon> could be used to represent different actions a user can take on a post. For example, a 'heart' icon for liking a post, a 'comment' icon for commenting on a post, and a 'share' icon for sharing a post. The 'error' variant could be used to represent actions that are not allowed, such as sharing a private post.",
      "In a news application, <lightning-icon> could be used to represent different types of news categories. For example, a 'globe' icon for international news, a 'building' icon for business news, and a 'flask' icon for science news. The icons could be customized with different sizes to represent the importance of each news category."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Icons\n      description: Action icons, doctype icons, standard icons, utility icons, and custom icons.\n    - name: variants\n      label: Icons with Sizes and Variants\n      description: Effects of the size attribute and inverse, success, warning and error variants.\n---\n\nA `lightning-icon` is a visual element that provides context and enhances\nusability. Icons can be used inside the body of another component or on their\nown. You can specify an icon from the Lightning Design System using the `icon-name` attribute.\n\nHere is an example.\n\n```html\n<template>\n    <lightning-icon\n        icon-name=\"action:approval\"\n        size=\"large\"\n        alternative-text=\"Indicates approval\"\n    >\n    </lightning-icon>\n</template>\n```\n\nAlternatively, you can provide a custom icon using the `src` attribute. See the **Using Your Own Icons** section.\n\n#### Component Styling\n\n`lightning-icon` provides you with icons in the Salesforce Lightning Design System (SLDS). Visit [icons](https://lightningdesignsystem.com/icons) to view the available icons.\n\nYou can use a combination of the `variant`, `size`, and `class` attributes to customize the icon styling.\n\nWhen applying SLDS classes or icons, check that they are\navailable in the SLDS release tied to your org. The latest\nSLDS resources become available only when the new release\nis available in your org.\n\n##### Sizes\n\nAdjust icon sizes using the `size` attribute with one of these values.\n\n-   `medium` is the default size, which creates a 32px by 32px icon\n-   `small` creates a 24px by 24px icon\n-   `x-small` creates a 16px by 16px icon\n-   `xx-small` creates a 14px by 14px icon\n-   `large` creates a 48px by 48px icon\n\n##### Variants\n\nVariants are supported only for the utility icons. To change the appearance of a [utility icon](https://lightningdesignsystem.com/icons/#utility), use the `variant` attribute with one of these values.\n\n-   `inverse` adds a white fill to a utility icon, useful for dark backgrounds\n-   `error` adds a red fill to a utility icon to call out a user- or system-related error\n-   `success` adds a green fill to a utility icon to represent a successful operation\n-   `warning` adds a yellow fill to a utility icon to advise caution\n\nThis example uses the `error` variant to add a red fill to the error utility icon.\n\n```html\n<template>\n    <lightning-icon icon-name=\"utility:error\" variant=\"error\"> </lightning-icon>\n</template>\n```\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\nFor example, you can set `class=\"slds-m-vertical_large\"` or other [margin](https://lightningdesignsystem.com/utilities/margin/) classes to add\nspacing around the icon.\n\nTo change the fill and background color of a utility icon, define a custom class using the `class` attribute. This example applies custom fill and background colors on the utility icon.\n\n```html\n<lightning-icon\n    icon-name=\"utility:connected_apps\"\n    alternative-text=\"Connected\"\n    title=\"Connected\"\n    class=\"my-icon\"\n>\n</lightning-icon>\n```\n\nSpecify the fill and background colors on the utility icon using the `--slds-c-icon-color-*` custom properties.\n\n```css\n.my-icon {\n    --slds-c-icon-color-foreground-default: orange;\n    --slds-c-icon-color-background: gray;\n}\n```\n\nTo change the fill and background colors of a non-utility icon, such as an [action](https://lightningdesignsystem.com/icons/#action), [standard](https://lightningdesignsystem.com/icons/#standard), or [custom](https://lightningdesignsystem.com/icons/#custom) icon, specify the fill color like this.\n\n```css\n.my-icon {\n    --slds-c-icon-color-foreground: orange;\n    --slds-c-icon-color-background: gray;\n}\n```\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/icons/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\nTo understand how we implemented SLDS in `lightning-icon`, see the **Source Code** section.\n\n#### Using Your Own Icons\n\nUse the `src` attribute to specify the path of the resource for your\nicon. When this attribute is present, `lightning-icon` attempts to load an\nicon from the provided resource.\n\nDefine a static resource in your org and upload your icon's SVG resource\nto it. The SVG code must include a `<g>` element with an id that you can reference.\n\nFor example, suppose your static resource is named `mySVG_icon` and it contains\nthis `google.svg` content.\n\n```html\n<svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n    &lt;title>Google icon&lt;/title>\n    <g id=\"google\">\n        <path\n            d=\"M12.24 10.285V14.4h6.806c-.275 1.765-2.056 5.174-6.806 5.174-4.095 0-7.439-3.389-7.439-7.574s3.345-7.574 7.439-7.574c2.33 0 3.891.989 4.785 1.849l3.254-3.138C18.189 1.186 15.479 0 12.24 0c-6.635 0-12 5.365-12 12s5.365 12 12 12c6.926 0 11.52-4.869 11.52-11.726 0-.788-.085-1.39-.189-1.989H12.24z\"\n        ></path>\n    </g>\n</svg>\n```\n\nImport the SVG resource into your component, and set a variable to the static resource URL plus the `<g>` ID.\n\n```javascript\n// myComponent.js\nimport { LightningElement } from 'lwc';\nimport mySVG_icon from '@salesforce/resourceUrl/mySVG_icon';\n\nexport default class myComponent extends LightningElement {\n    googleIcon = mySVG_icon + '#google';\n}\n```\n\nPass the static resource variable in the `src` attribute.\n\n```html\n<template>\n    <lightning-icon src={googleIcon}></lightning-icon>\n</template>\n```\n\nFor more information about static resources and using SVG, see [Access Static Resources](https://developer.salesforce.com/docs/platform/lwc/guide/create-resources) and [Use SVG Resources](https://developer.salesforce.com/docs/platform/lwc/guide/use-svg-in-component) in the _Lightning Web Components Developer Guide_.\n\n##### Overriding the Icon Fill Color of Your Imported Icons\n\nNote that icons you import have a default fill attribute value `#fff`, which\nyou can override in your svg sprite directly. For example, change the color to\na shade of green by inserting `fill=#648079` in the `<svg>` element.\n\nAlternatively, use CSS custom properties to change the fill color on your imported icon. See the non-utility icon example in the **Customize Component Styling** section.\n\n#### Accessibility\n\nUse the `alternative-text` attribute to describe the icon for assistive devices. The description\nshould indicate what happens when you click the button, for example 'Upload\nFile', not what the icon looks like, 'Paperclip'.\n\nSometimes an icon is decorative and does not need a description. But icons can\nswitch between being decorative or informational based on the screen size. If\nyou choose not to include an `alternative-text` description, check smaller\nscreens and windows to ensure that the icon is decorative on all formats.\n\n#### Usage Considerations\n\nIcons are not available in Lightning Out, but they are available in Lightning Components for Visualforce and other experiences.\n\nFor IE11, the custom icon feature is disabled for now due to performance issues.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Basic extends LightningElement {}\n",
        "html": "<template>\n    <p id=\"action\" class=\"slds-box slds-text-heading_small\">Action icons represent actions a user can take. The default\n        size of action icons are larger than the others. <br /><br />\n        <lightning-icon icon-name=\"action:approval\" alternative-text=\"Approved\" title=\"Approved\"></lightning-icon>\n        <lightning-icon icon-name=\"action:delete\" alternative-text=\"Delete\" title=\"Delete\"></lightning-icon>\n        <lightning-icon icon-name=\"action:new_note\" alternative-text=\"New note\" title=\"New note\"></lightning-icon>\n        <lightning-icon icon-name=\"action:preview\" alternative-text=\"Preview\" title=\"Preview\"></lightning-icon>\n    </p>\n    <p id=\"doctype\" class=\"slds-box slds-text-heading_small\">Doctype icons represent a type of file when a preview or\n        image is unavailable. <br /><br />\n        <lightning-icon icon-name=\"doctype:audio\" alternative-text=\"Audio file\" title=\"Audio\"></lightning-icon>\n        <lightning-icon icon-name=\"doctype:image\" alternative-text=\"Image file\" title=\"Image\"></lightning-icon>\n        <lightning-icon icon-name=\"doctype:mp4\" alternative-text=\"MP4 file\" title=\"MP4\"></lightning-icon>\n        <lightning-icon icon-name=\"doctype:xml\" alternative-text=\"XML file\" title=\"XML\"></lightning-icon>\n    </p>\n\n    <p id=\"standard\" class=\"slds-box slds-text-heading_small\">Standard icons represent entities and objects within\n        Salesforce. <br /><br />\n        <lightning-icon icon-name=\"standard:event\" alternative-text=\"Event\" title=\"Event\"></lightning-icon>\n        <lightning-icon icon-name=\"standard:account\" alternative-text=\"Account\" title=\"Account\"></lightning-icon>\n        <lightning-icon icon-name=\"standard:address\" alternative-text=\"Address\" title=\"Address\"></lightning-icon>\n        <lightning-icon icon-name=\"standard:email\" alternative-text=\"Email\" title=\"Email\"></lightning-icon>\n    </p>\n\n    <p id=\"utility\" class=\"slds-box slds-text-heading_small\">Utility icons are used throughout the interface and are\n        SVGs for extensibility. <br /><br />\n        <lightning-icon icon-name=\"utility:connected_apps\" alternative-text=\"Connected\" title=\"Connected\">\n        </lightning-icon>\n        <lightning-icon icon-name=\"utility:warning\" alternative-text=\"Warning!\" title=\"Warning\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:error\" alternative-text=\"Error!\" title=\"Error\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:image\" alternative-text=\"Utility image\" title=\"Image\"></lightning-icon>\n    </p>\n\n    <p id=\"custom\" class=\"slds-box slds-text-heading_small\">Custom icons are available in Salesforce to represent user\n        created objects.<br /><br />\n        <lightning-icon icon-name=\"custom:custom11\" title=\"custom11\"></lightning-icon>\n        <lightning-icon icon-name=\"custom:custom33\" title=\"custom33\"></lightning-icon>\n        <lightning-icon icon-name=\"custom:custom51\" title=\"custom51\"></lightning-icon>\n        <lightning-icon icon-name=\"custom:custom88\" title=\"custom88\"></lightning-icon>\n    </p>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Variants extends LightningElement {}\n",
        "html": "<template>\n    <div id=\"size\" class=\"row slds-box slds-text-heading_small\">\n        <h4>Utility icons in different sizes</h4>\n        <lightning-icon icon-name=\"utility:connected_apps\" alternative-text=\"Connected\" size=\"large\" title=\"large size\">\n        </lightning-icon>\n        <lightning-icon icon-name=\"utility:connected_apps\" alternative-text=\"Connected\" title=\"medium (default)\">\n        </lightning-icon>\n        <lightning-icon icon-name=\"utility:connected_apps\" alternative-text=\"Connected\" size=\"small\" title=\"small size\">\n        </lightning-icon>\n        <lightning-icon icon-name=\"utility:connected_apps\" alternative-text=\"Connected\" size=\"x-small\"\n            title=\"x-small size\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:connected_apps\" alternative-text=\"Connected\" size=\"xx-small\"\n            title=\"xx-small size\"></lightning-icon>\n    </div>\n    <div id=\"inverse\" class=\"row dark-background slds-box slds-text-heading_small\">\n        <h4>Utility icons with inverse variant in different sizes</h4>\n        <lightning-icon icon-name=\"utility:connected_apps\" alternative-text=\"Connected\" variant=\"inverse\" size=\"large\"\n            title=\"large size\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:connected_apps\" alternative-text=\"Connected\" variant=\"inverse\"\n            title=\"medium (default)\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:connected_apps\" alternative-text=\"Connected\" variant=\"inverse\" size=\"small\"\n            title=\"small size\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:connected_apps\" alternative-text=\"Connected\" variant=\"inverse\" size=\"x-small\"\n            title=\"x-small size\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:connected_apps\" alternative-text=\"Connected\" variant=\"inverse\"\n            size=\"xx-small\" title=\"xx-small size\"></lightning-icon>\n    </div>\n    <div id=\"variants\" class=\"row slds-box slds-text-heading_small\">\n        <h4>Utility icons with default styling and with success, warning, and error variants</h4>\n        <lightning-icon icon-name=\"utility:success\" alternative-text=\"Success!\" title=\"default style\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:success\" alternative-text=\"Success!\" variant=\"success\"\n            title=\"success variant\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:success\" alternative-text=\"Success!\" variant=\"success\"\n            title=\"success variant small\" size=\"small\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:success\" alternative-text=\"Success!\" variant=\"success\"\n            title=\"success variant x-small\" size=\"x-small\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:success\" alternative-text=\"Success!\" variant=\"success\"\n            title=\"success variant xx-small\" size=\"xx-small\"></lightning-icon>\n        <br />\n        <lightning-icon icon-name=\"utility:warning\" alternative-text=\"Warning!\" title=\"default style\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:warning\" alternative-text=\"Warning!\" variant=\"warning\"\n            title=\"warning variant\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:warning\" alternative-text=\"Warning!\" variant=\"warning\"\n            title=\"warning variant small\" size=\"small\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:warning\" alternative-text=\"Warning!\" variant=\"warning\"\n            title=\"warning variant x-small\" size=\"x-small\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:warning\" alternative-text=\"Warning!\" variant=\"warning\"\n            title=\"warning variant xx-small\" size=\"xx-small\"></lightning-icon>\n        <br />\n        <lightning-icon icon-name=\"utility:error\" alternative-text=\"Error!\" title=\"default style\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:error\" alternative-text=\"Error!\" variant=\"error\" title=\"error variant\">\n        </lightning-icon>\n        <lightning-icon icon-name=\"utility:error\" alternative-text=\"Error!\" variant=\"error\"\n            title=\"error variant small\" size=\"small\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:error\" alternative-text=\"Error!\" variant=\"error\"\n            title=\"error variant x-small\" size=\"x-small\"></lightning-icon>\n        <lightning-icon icon-name=\"utility:error\" alternative-text=\"Error!\" variant=\"error\"\n            title=\"error variant xx-small\" size=\"xx-small\"></lightning-icon>\n        <br /><br />\n        <lightning-icon icon-name=\"utility:money\" alternative-text=\"Money\" title=\"money icon with success variant\"\n        variant=\"success\">\n        </lightning-icon>\n        <lightning-icon icon-name=\"utility:light_bulb\" alternative-text=\"Light bulb\" title=\"light bulb with warning variant\"\n        variant=\"warning\">\n        </lightning-icon>\n        <lightning-icon icon-name=\"utility:hide\" alternative-text=\"Hide\" title=\"hide icon with error variant\"\n        variant=\"error\">\n        </lightning-icon>\n    </div>\n\n    <div id=\"action\" class=\"row slds-box slds-text-heading_small\">\n        <h4>Action icons in various sizes</h4>\n        <lightning-icon icon-name=\"action:call\" alternative-text=\"Click to Call\" size=\"large\" title=\"large size\">\n        </lightning-icon>\n        <lightning-icon icon-name=\"action:call\" alternative-text=\"Click to Call\" title=\"medium size (default)\">\n        </lightning-icon>\n        <lightning-icon icon-name=\"action:call\" alternative-text=\"Click to Call\" size=\"small\" title=\"small size\">\n        </lightning-icon>\n        <lightning-icon icon-name=\"action:call\" alternative-text=\"Click to Call\" size=\"x-small\" title=\"x-small size\">\n        </lightning-icon>\n    </div>\n</template>\n",
        "css": ".dark-background{\n    background-color: #16325c;\n    padding: 12px;\n    color: #fff;\n}\n\n.row{\n    margin:10px 0;\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-input",
    "shortDescription": "This component is a versatile input field that supports various types such as text, number, date, email, url, and more, providing users with a tailored data entry experience based on the specified type.",
    "relatedComponents": {
      "lightning-button": "optional",
      "lightning-radio-group": "optional",
      "lightning-combobox": "optional",
      "lightning-record-form": "optional",
      "lightning-record-view-form": "optional",
      "lightning-record-edit-form": "optional",
      "lightning-checkbox-group": "optional"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-input label=\"Name\">"]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": ["<lightning-input variant=\"label-hidden\">"]
      },
      {
        "name": "onchange",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-input onchange={handleChange}>"]
      },
      {
        "name": "type",
        "typeSignature": "string",
        "examples": [
          "<lightning-input type=\"checkbox\">",
          "<lightning-input type=\"checkbox-button\">",
          "<lightning-input type=\"date\">",
          "<lightning-input type=\"datetime\">",
          "<lightning-input type=\"time\">",
          "<lightning-input type=\"email\">",
          "<lightning-input type=\"file\">",
          "<lightning-input type=\"password\">",
          "<lightning-input type=\"search\">",
          "<lightning-input type=\"tel\">",
          "<lightning-input type=\"url\">",
          "<lightning-input type=\"number\">",
          "<lightning-input type=\"text\">",
          "<lightning-input type=\"toggle\">"
        ]
      },
      {
        "name": "checked",
        "typeSignature": "boolean",
        "examples": ["<lightning-input type=\"checkbox\" checked>"]
      },
      {
        "name": "value",
        "typeSignature": "string",
        "examples": [
          "<lightning-input type=\"color\" value=\"#EEEEEE\">",
          "<lightning-input type=\"date\" value=\"2020-11-03\">",
          "<lightning-input type=\"datetime\" value=\"2020-11-03T18:13:41Z\">",
          "<lightning-input type=\"email\" value=\"name@example.com\">",
          "<lightning-input type=\"number\" value=\"12345\">",
          "<lightning-input type=\"text\" value=\"initial value\">",
          "<lightning-input type=\"time\" value=\"14:00:00.000\">"
        ]
      },
      {
        "name": "min",
        "typeSignature": "string",
        "examples": [
          "<lightning-input type=\"date\" min=\"2020-11-03\">",
          "<lightning-input type=\"datetime\" min=\"2020-11-03T18:13:41Z\">",
          "<lightning-input type=\"number\" min=\"0\">",
          "<lightning-input type=\"time\" min=\"14:00:00.000\">"
        ]
      },
      {
        "name": "max",
        "typeSignature": "string",
        "examples": [
          "<lightning-input type=\"date\" max=\"2020-11-03\">",
          "<lightning-input type=\"datetime\" max=\"2020-11-03T18:13:41Z\">",
          "<lightning-input type=\"number\" max=\"1000\">",
          "<lightning-input type=\"time\" max=\"14:00:00.000\">"
        ]
      },
      {
        "name": "step",
        "typeSignature": "string",
        "examples": ["<lightning-input type=\"number\" step=\".01\">", "<lightning-input type=\"range\" step=\".01\">"]
      },
      {
        "name": "formatter",
        "typeSignature": "string",
        "examples": [
          "<lightning-input type=\"number\" formatter=\"currency\">",
          "<lightning-input type=\"number\" formatter=\"percent\">"
        ]
      },
      {
        "name": "timezone",
        "typeSignature": "string",
        "examples": ["<lightning-input type=\"datetime\" timezone=\"America/New_York\">"]
      },
      {
        "name": "date-style",
        "typeSignature": "string",
        "examples": [
          "<lightning-input type=\"date\" date-style=\"short\">",
          "<lightning-input type=\"date\" date-style=\"long\">"
        ]
      },
      {
        "name": "time-style",
        "typeSignature": "string",
        "examples": [
          "<lightning-input type=\"time\" time-style=\"short\">",
          "<lightning-input type=\"time\" time-style=\"medium\">"
        ]
      },
      {
        "name": "multiple",
        "typeSignature": "boolean",
        "examples": ["<lightning-input type=\"email\" multiple>"]
      },
      {
        "name": "is-loading",
        "typeSignature": "boolean",
        "examples": ["<lightning-input type=\"search\" is-loading>"]
      },
      {
        "name": "message-toggle-active",
        "typeSignature": "string",
        "examples": ["<lightning-input type=\"toggle\" message-toggle-active=\"On\">"]
      },
      {
        "name": "message-toggle-inactive",
        "typeSignature": "string",
        "examples": ["<lightning-input type=\"toggle\" message-toggle-inactive=\"Off\">"]
      },
      {
        "name": "field-level-help",
        "typeSignature": "string",
        "examples": ["<lightning-input field-level-help=\"The event name must 50 characters or less\">"]
      },
      {
        "name": "placeholder",
        "typeSignature": "string",
        "examples": ["<lightning-input placeholder=\"username@example.com\">"]
      },
      {
        "name": "aria-labelledby",
        "typeSignature": "string",
        "examples": ["<lightning-input aria-labelledby=\"otherlabel\">"]
      },
      {
        "name": "autocomplete",
        "typeSignature": "string",
        "examples": ["<lightning-input autocomplete=\"on\">"]
      },
      {
        "name": "maxlength",
        "typeSignature": "number",
        "examples": ["<lightning-input maxlength=\"50\">"]
      },
      {
        "name": "minlength",
        "typeSignature": "number",
        "examples": ["<lightning-input minlength=\"5\">"]
      },
      {
        "name": "pattern",
        "typeSignature": "string",
        "examples": [
          "<lightning-input pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\">",
          "<lightning-input pattern=\".+@example.com\">"
        ]
      },
      {
        "name": "required",
        "typeSignature": "boolean",
        "examples": ["<lightning-input required>"]
      },
      {
        "name": "message-when-bad-input",
        "typeSignature": "string",
        "examples": ["<lightning-input message-when-bad-input=\"Enter a valid value.\">"]
      },
      {
        "name": "message-when-pattern-mismatch",
        "typeSignature": "string",
        "examples": [
          "<lightning-input message-when-pattern-mismatch=\"Your entry does not match the allowed pattern.\">"
        ]
      },
      {
        "name": "message-when-range-overflow",
        "typeSignature": "string",
        "examples": ["<lightning-input message-when-range-overflow=\"The number is too high.\">"]
      },
      {
        "name": "message-when-range-underflow",
        "typeSignature": "string",
        "examples": ["<lightning-input message-when-range-underflow=\"The number is too low.\">"]
      },
      {
        "name": "message-when-step-mismatch",
        "typeSignature": "string",
        "examples": ["<lightning-input message-when-step-mismatch=\"Your entry isn't a valid increment.\">"]
      },
      {
        "name": "message-when-too-long",
        "typeSignature": "string",
        "examples": ["<lightning-input message-when-too-long=\"Your entry is too long.\">"]
      },
      {
        "name": "message-when-too-short",
        "typeSignature": "string",
        "examples": ["<lightning-input message-when-too-short=\"Your entry is too short.\">"]
      },
      {
        "name": "message-when-type-mismatch",
        "typeSignature": "string",
        "examples": ["<lightning-input message-when-type-mismatch=\"You have entered an invalid format.\">"]
      },
      {
        "name": "message-when-value-missing",
        "typeSignature": "string",
        "examples": ["<lightning-input message-when-value-missing=\"Complete this field.\">"]
      },
      {
        "name": "oncommit",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-input oncommit={handleCommit}>"]
      }
    ],
    "useCases": [
      "You could use the <lightning-input> component in a form on a website where users need to enter their personal information. For example, the component could be used to create fields for users to enter their name, email address, and phone number. The component would ensure that the data entered is in the correct format and provide helpful error messages if the user enters their information incorrectly.",
      "The <lightning-input> component could be used in a survey or questionnaire. For example, it could be used to create a field where users can enter their responses to open-ended questions. The component could also be used to create checkboxes or toggle switches for multiple choice questions.",
      "The <lightning-input> component could be used in a booking form on a travel website. For example, it could be used to create fields for users to enter their travel dates. The component would provide a date picker to help users select their dates and ensure that the dates entered are in the correct format."
    ],
    "docs": "---\nexamples:\n    - name: text\n      label: Text Input (default)\n      description: Text input fields are for entering single-line text.\n    - name: textAdvanced\n      label: Text Input (Advanced)\n      description: Text input fields with event handling and data binding.\n    - name: date\n      label: Date Input\n      description: Date input fields provide a date picker for entering a date.\n    - name: datetime\n      label: Date/Time Input\n      description: Date/Time input fields provide a date and time picker for entering a date and time.\n    - name: timebasic\n      label: Time Input (Basic)\n      description: Time input fields provide a dropdown list of time values in 15-minute increments.\n    - name: timeadvanced\n      label: Time Input (Advanced)\n      description: Time input fields support earliest and latest time input.\n    - name: color\n      label: Color Input\n      description: Color input fields provide a color swatch for entering a HEX or RGB value.\n    - name: file\n      label: File Input\n      description: File input fields support upload of single or multiple files and can restrict the accepted file types.\n    - name: email\n      label: Email Input\n      description: Email input fields are for entering email addresses.\n    - name: password\n      label: Password Input\n      description: Password input fields obscure your text input.\n    - name: tel\n      label: Telephone Input\n      description: Telephone input fields support number pattern matching.\n    - name: url\n      label: URL Input\n      description: URL input fields support URL pattern matching.\n    - name: number\n      label: Number Input\n      description: Number input fields support decimal, percentage, and currency values.\n    - name: checkboxbasic\n      label: Checkbox\n      description: Checkbox options can be required or disabled.\n    - name: checkboxbutton\n      label: Checkbox Button\n      description: Checkbox buttons can be required or disabled.\n    - name: toggle\n      label: Toggle\n      description: Toggle buttons can be required or disabled.\n    - name: search\n      label: Search Input\n      description: Search input fields enable search queries.\n---\n\nA `lightning-input` component creates an HTML `<input>` element. This component\nsupports the following input types:\n\n-   `checkbox`\n-   `checkbox-button`\n-   `date`\n-   `datetime`/`datetime-local`\n-   `time`\n-   `email`\n-   `file`\n-   `password`\n-   `search`\n-   `tel`\n-   `url`\n-   `number`\n-   `text` (default)\n-   `toggle`\n\nThere is no behavioral difference between the `datetime` and `datetime-local` types.\n\nThe following HTML input types aren't supported.\n\n-   `button`\n-   `hidden`\n-   `image`\n-   `radio`\n-   `reset`\n-   `submit`\n-   `week`\n-   `month`\n\nUse [`lightning-button`](bundle/lightning-button/documentation)\ninstead for input types `button`, `reset`, and\n`submit`.\n\nUse [`lightning-radio-group`](bundle/lightning-radio-group/documentation)\ninstead of input type `radio` for radio buttons.\n\nUse [`lightning-combobox`](bundle/lightning-combobox/documentation) or input type `number` instead of input types `week` and `month`. The `week` and `month` types are browser-dependent and may cause issues with styling, accessibility, and general functionality in specific browsers.\n\nWhen working with forms that interact with Salesforce records, consider using the record form components. The `lightning-record-form`, `lightning-record-view-form`, and `lightning-record-edit-form` components provide a form-based UI that's metadata-driven. The components are automatically wired up to your record data, labels, and field-level help text. For more information, see [Work with Records Using Base Components](https://developer.salesforce.com/docs/platform/lwc/guide/data-get-user-input-intro).\n\nAlternatively, to create your own custom UI to work with Salesforce records, use `lightning-input` with the `lightning/ui*Api` wire adapters and functions, such as `getRecord` and `updateRecord`. For more information, see [Use the Wire Service with Base Components](https://developer.salesforce.com/docs/platform/lwc/guide/data-wire-base-components).\n\nThe `label` attribute is required. If you don't want to display a label,\nspecify the `variant=\"label-hidden\"` attribute. See **Accessibility** for more\ninformation.\n\nYou can define an action for input events like `blur`,\n`focus`, and `change`. For example, to handle a `change` event on the\ncomponent when the value of the component is changed, use the `onchange`\nattribute. The component also provides a `commit` event, which the\nHTML `<input>` does not have. See **Event Handling**\nfor details.\n\n#### Checkbox\n\nCheckboxes let you select one or more options. `lightning-input type=\"checkbox\"` is useful for creating single checkboxes. If you are working\nwith a group of checkboxes, use [`lightning-checkbox-group`](bundle/lightning-checkbox-group/documentation) instead.\n\n```html\n<template>\n    <lightning-input type=\"checkbox\" label=\"Red\" checked> </lightning-input>\n    <lightning-input type=\"checkbox\"> </lightning-input>\n</template>\n```\n\nThe checkbox implements the [checkbox](https://www.lightningdesignsystem.com/components/checkbox/) blueprint in SLDS.\n\nTo apply custom styling, use the `:host` selector. Use SLDS styling hooks to customize the component's styles. For example, change the checkmark color and background color when an option is selected.\n\n```css\n:host {\n    --slds-c-checkbox-color-background-checked: green;\n    --slds-c-checkbox-mark-color-foreground: yellow;\n}\n```\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/checkbox/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\n#### Checkbox-button\n\nCheckbox buttons let you select one or more options with an alternative visual\ndesign.\n\n```html\n<template>\n    <lightning-input\n        type=\"checkbox-button\"\n        label=\"Add pepperoni\"\n        checked\n        value=\"pepperoni\"\n    >\n    </lightning-input>\n    <lightning-input type=\"checkbox-button\" label=\"Add salami\" value=\"salami\">\n    </lightning-input>\n</template>\n```\n\n#### Color\n\nA color picker enables you to specify a color using a color picker or by\nentering the color into a text field.\n\n```html\n<template>\n    <lightning-input type=\"color\" label=\"Color\" value=\"#EEEEEE\">\n    </lightning-input>\n</template>\n```\n\n#### Date\n\nA date input field includes a text input to type a date and a date picker\nto select a date.\n\nOn mobile devices, this component uses the native date picker, which ignores the `date-style` attribute. The native date picker uses the user's device settings for names of months and weekdays, the input date format, and the calendar type.\n\nOn desktop, this component uses a date picker styled with the Lightning Design System. This picker uses the user's Salesforce language setting for names of months and weekdays, and the user's Salesforce locale setting for the date format. The entered date is validated against the user's Salesforce locale format during the `blur` event.\n\nThe component uses `date-style=\"medium\"` by default to display the date\nin a medium-length style, such as Jan 7, 2020 in the en-US locale.\nTo display a short style such as 1/7/2020, set `date-style=\"short\"` in the component.\nTo display a long style such as January 7, 2020, set `date-style=\"long\"`.\n\nThe date entered must be valid for the user's Salesforce locale, and match one of the\nshort, medium, or long styles. If the date entered is valid, the component accepts\nthe input and reformats it to the specified `date-style` during the `blur` event.\nFor example, if the component specifies `date-style=\"long\"` and you enter 1/7/2020\nin the en-US locale, the component reformats it to January 7, 2020.\n\nThe component accepts a month value of `13` to accommodate conditions that sometimes require a 13th month in a year. For most locales, if you enter `13` for the month, the component converts the date to the first month of the following year during the `blur` event.\n\nUse the `value` attribute to supply an initial value for the date as an ISO8601 formatted date string,\nsuch as `2020-11-03`.\n\nSet `min` and `max` to ISO8601 formatted date strings to constrain the allowed date values. The date picker shows\ndates outside the min and max range in gray as a visual cue. Although users can select a date outside the range,\nthe `blur` event triggers the field to display a validation error message. For a list of default error messages, see **Error Messages**. You can specify your own error messages for the `min` and `max` validation errors using the `message-when-range-underflow` and `message-when-range-overflow` attributes.\n\nYou can guide users with a `field-level-help` tooltip and a `placeholder` prompt in the text field,\nas explained in **Adding Field-Level Help and Placeholder Text**.\n\nOn desktop, the datepicker calendar clips behind other components on the page if the parent container of `lightning-input` has a smaller width or height than the calendar. To prevent clipping, give the parent container a minimum width of 285px and minimum height of 310px.\n\nBy default, the datepicker calendar renders above all modals and the main Salesforce header.\n\n```html\n<template>\n    <lightning-input type=\"date\" label=\"Birthday\"> </lightning-input>\n</template>\n```\n\n#### Datetime\n\nA datetime field includes a text input to type a date and a date picker\nto select a date, and similar fields for typing or picking a time.\n\nOn mobile devices, this component uses the native datetime picker, which ignores the `date-style` and `time-style` attributes. The native datetime picker uses the user's device settings for names of months and weekdays, the input datetime format, and the calendar type.\n\n##### Desktop\n\nOn desktop, `lightning-input` provides its own date/time picker that's styled with\nthe Lightning Design System. Your Salesforce locale setting determines the acceptable\ndate and time formats you can type in the fields and the format displayed in the fields\nafter you pick a date and time. Your Salesforce language setting determines the names\nof months and weekdays displayed in the date picker calendar, and the labels of the date\nand time fields.\n\nThe date and time you enter are automatically validated against your Salesforce locale\nformat during the `blur` event. The date and time displayed reflect your Salesforce time\nzone setting. Use the `timezone` attribute to specify a different time zone in IANA time\nzone database format. For example, specify `timezone=\"America/New_York\"` for US Eastern\nTime or `timezone=\"GMT\"` for Greenwich Mean Time.\n\nThe component uses `date-style=\"medium\"` by default to display the date\nin a medium-length style, such as Jan 7, 2020 in the en-US locale.\nTo display a short style such as 1/7/2020, set `date-style=\"short\"` in the component.\nTo display a long style such as January 7, 2020, set `date-style=\"long\"`.\n\nThe date entered must be valid for the user's Salesforce locale, and match one of the\nshort, medium, or long styles. If the date entered is valid, the component accepts\nthe input and reformats it to the specified `date-style` during the `blur` event.\nFor example, if the component specifies `date-style=\"long\"` and a user enters 1/7/2020\nin the en-US locale, the component reformats it to January 7, 2020.\n\nThe component accepts a month value of `13` to accommodate conditions that sometimes require a 13th month in a year. For most locales, if you enter `13` for the month, the component converts the date to the first month of the following year during the `blur` event.\n\nThe component uses `time-style=\"short\"` by default to display the time without seconds,\nsuch as 6:53 PM in the en-US locale. To display time including seconds,\nset `time-style=\"medium\"` or `time-style=\"long\"`. The medium and long styles currently\nhave the same formatting.\n\nYour Salesforce locale setting determines the time format you can type in the field\nor select in the time picker, either 12-hr time with AM/PM or 24-hr time format.\n\nUse the `value` attribute to optionally supply an initial value for the date and time as an\nISO8601 formatted datetime string such as `2020-11-03T18:13:41Z`.\n\nSet `min` and `max` to ISO8601 formatted datetime strings to constrain the allowed date and time values. The date picker shows\ndates outside the min and max range in gray as a visual cue. Users can still select a date and time outside the range,\nbut the `blur` event triggers the field to display a validation error message. For a list of default error messages, see **Error Messages**. You can specify your own error message using the `message-when-range-underflow` and `message-when-range-overflow` attributes.\n\nYou can guide users with a `field-level-help` tooltip, as explained in **Adding Field-Level Help and Placeholder Text**.\n\nOn desktop, the datepicker calendar clips behind other components on the page if the parent container of `lightning-input` has a smaller width or height than the calendar. To prevent clipping, give the parent container a minimum width of 285px and minimum height of 310px.\n\nBy default, the datepicker calendar renders above all modals and the main Salesforce header.\n\n**Note**: Set the same time zone on your mobile device and in Salesforce to avoid confusion and potential validation\nissues. For example, suppose the current time is 4:00 PM ET. Your mobile device is set to the America/New_York time zone and\nyou're interacting with Salesforce while it's set to the America/Los_Angeles time zone. When you tap an empty date/time field\non the mobile device, the native date/time picker automatically selects the current device time, 4:00 PM.\nSince the current time is 1:00 PM in Salesforce, this input time is in the future. If there's a validation rule stating that\nthe value must be earlier than the current time, for example, the value is invalid. This occurs only\nbecause of the time zone discrepancy, and only on mobile devices when the date/time field is initially empty.\n\n```html\n<template>\n    <lightning-input type=\"datetime\" label=\"Created date\"> </lightning-input>\n</template>\n```\n\n#### Email\n\nAn input field for entering an email address. UTF-8 encoding is supported for international email addresses. Valid email addresses include `name@example` and `name@example.com`. The email pattern is automatically validated during the `blur` event.\n\n```html\n<template>\n    <lightning-input type=\"email\" label=\"Email\"> </lightning-input>\n</template>\n```\n\nTo restrict email input to match a certain pattern, use the `pattern` attribute to specify a\nregular expression. For example, pass in `pattern=\".+@example.com\"` to accept an email address only\nfrom the domain example.com. When using `pattern`, you can provide a custom validation error message using the `message-when-pattern-mismatch` attribute.\n\nYou can also include a hint of what a user can enter using the `placeholder` attribute.\nThe placeholder text is displayed on the field before a user enters an input, but it doesn't validate input.\n\n```html\n<template>\n    <lightning-input\n        type=\"email\"\n        label=\"Email\"\n        pattern=\".+@example.com\"\n        placeholder=\"username@example.com\"\n    >\n    </lightning-input>\n</template>\n```\n\nTo specify the maximum number of characters for an email address, use the `maxlength` attribute.\nWhen using `maxlength`, you can provide a custom validation error message using the `message-when-too-long` attribute.\n\n```html\n<template>\n    <lightning-input\n        type=\"email\"\n        label=\"Email\"\n        maxlength=\"50\"\n        message-when-too-long=\"Your email address must not be more than 50 characters.\"\n    >\n    </lightning-input>\n</template>\n```\n\nTo specify the minimum number of characters for an email address, use the `minlength` attribute.\nWhen using `minlength`, you can provide a custom validation error message using the `message-when-too-short` attribute.\n\n```html\n<template>\n    <lightning-input\n        type=\"email\"\n        label=\"Email\"\n        minlength=\"5\"\n        message-when-too-short=\"Your email address must be more 5 characters.\"\n    >\n    </lightning-input>\n</template>\n```\n\nWhen `multiple` is used, the email field expects a single email address or a comma-separated list of email addresses. For example, `my@example.com,your@example.com` with or without a space after the comma.\n\n```html\n<template>\n    <lightning-input type=\"email\" label=\"Email\" multiple> </lightning-input>\n</template>\n```\n\n#### File\n\nAn input field for selecting files to upload using an `Upload Files` button or a drag-and-drop zone. This field accepts files up to 3.5 MB.\n\nTo retrieve the list of selected files, use\n`event.target.files` in the `onchange` event handler. Your selected files are returned in a `FileList` object, each specified as a `File` object with the `size` and `type` attributes.\n\n```html\n<template>\n    <lightning-input\n        type=\"file\"\n        label=\"Attachment\"\n        accept=\"image/png, .zip\"\n        onchange={handleFilesChange}\n        multiple\n    >\n    </lightning-input>\n</template>\n```\n\n`lightning-input type=\"file\"` handles file selection only. Implement your own file uploading. For example, wire up your component to an Apex controller that handles file uploads. Alternatively, use the\n[`lightning-file-upload`](bundle/lightning-file-upload/documentation) component for an integrated way to upload files to records.\n\n#### Number\n\nAn input field for entering a number. When working with numerical input, you\ncan use the attributes `max`, `min`, and `step`.\n\nThe attributes `maxlength`, `minlength`, and `pattern` can't be used with `number` type because they are for string data.\n\n```html\n<template>\n    <lightning-input type=\"number\" label=\"Number\" value=\"12345\">\n    </lightning-input>\n</template>\n```\n\nTo specify valid increments for numerical fields, use the `step` attribute. The value of `step` constrains the numbers\nthat users can enter. If you don't specify `step`, the default value of 1 allows users to enter only integers.\n\nTo enable decimal number entry, specify a value for `step` that represents the number of decimal places accepted and\nthe increment. For example, specifying `step=\".01\"` permits numbers such as 0.99 and 123456.78. Specifying `step=\".20\"` permits\nnumbers such as 18.60 but not 18.61 or 18.70.\n\nIf a user enters a number that doesn't match the `step` value, the browser flags it as invalid. Some browsers can round the number instead.\n\n```html\n<template>\n    <lightning-input type=\"number\" label=\"Number\" step=\".01\" value=\"123.45\">\n    </lightning-input>\n</template>\n```\n\nTo format numerical input as a percentage or currency, set `formatter` to\n`percent` or `currency` respectively. To allow for decimal numbers,\nspecify the `step` attribute as well.\n\n```html\n<template>\n    <lightning-input\n        type=\"number\"\n        label=\"Price\"\n        value=\"12345\"\n        formatter=\"currency\"\n        step=\".01\"\n    >\n    </lightning-input>\n</template>\n```\n\nFor the `percent` formatter, the entered number is multiplied by 100 on blur to display the percentage. For example, when you enter .75 the value displays as 75%. When you enter 1, the value displays as 100%. To enter a percentage value as is, use `formatter=\"percent-fixed\"`. When you enter .75, the value displays as .75%, and when you enter 1, the value displays as 1%.\n\n```html\n<template>\n    <lightning-input type=\"number\" label=\"Enter a decimal value\" step=\"0.001\">\n    </lightning-input>\n    <lightning-input\n        type=\"number\"\n        label=\"Enter a percentage value\"\n        formatter=\"percent\"\n        step=\"0.01\"\n    >\n    </lightning-input>\n    <lightning-input\n        type=\"number\"\n        label=\"Enter a dollar amount\"\n        formatter=\"currency\"\n        step=\"0.01\"\n    >\n    </lightning-input>\n</template>\n```\n\nNumber formatting is based on the Intl.NumberFormat object and follows ISO guidelines, displaying a value based on the org currency and your Salesforce locale. For example, when using `formatter=\"currency\" step=\".01\"`, entering \"123.45\" displays \"€123,45\" if your org's currency is set to EUR and your Salesforce locale is German. Your Salesforce locale is also used to determine if the number you entered is valid.\n\n#### Number Validation\n\nThe number field does not let you type invalid characters, although anything can be pasted in. When a field contains invalid characters, a default field-level error is displayed on blur and the `value` property returns an empty string.\nThe invalid input continues to be displayed to allow the user to correct the entry. See the **Input Validation** and **Error Messages** sections for more information. Valid characters include digits, number shortcuts, exponential numbers, positive and negative signs, and decimal separators.\n\nThe `lightning-input` component uses the Javascript `parseFloat()` function to convert input value strings to numbers. Very large numbers with more than approximately 15 or 16 total digits can lose precision and appear to be rounded. Browsers can handle this loss of numeric precision differently, causing variation in decimal point rounding.\n\nFor example, `parseFloat(\"12345678901234.12345\")` is stored in memory as `12345678901234.123`, which appears rounded. The parsed value in memory is used for validation, not the entered number. As a result, a number that should be invalid can be accepted as valid due to the loss of precision in the stored value. If your `lightning-input` component\nsets `step=\"0.0001\"`, the entered value `12345678901234.12345` is invalid. However, the stored value\n`12345678901234.123` is valid, so the entered value is accepted.\n\n##### Digits\n\nDigits are the numbers 0 to 9. Invalid placement of 0's are removed. For example, `010` results in `10`. Trailing zeros after the decimal separator are also removed to match any given `step` pattern.\n\n##### Number Shortcuts\n\nShortcuts such as `k`, `K`, `m`, `M`, `b`, `B`, `t`, and `T` are allowed. For the en-US locale, when you enter `1k` the field displays `1,000`. Entering `1m` results in `1,000,000`. When the input field is focused, the input value is the multiplied number. For example, entering `1k` results in `1,000` on blur, and `1000` when the input is focused again.\n\nShortcuts are not supported via the `value` attribute.\n\n##### Exponential Numbers\n\nThe letter `e` or `E` is accepted when entering an exponential number. For example, when you enter `2e2` the field displays `200` on blur, and `2e2` when the input is focused again.\n\n##### Positive and Negative Signs\n\nUse `+` and `-` characters to represent positive and negative numbers. The positive `+` sign is removed on blur. If your number starts with `+.` or `-.`, `0` is added before the decimal separator. For example, entering `+.2` results in `0.2` on blur.\n\n##### Decimal Separators\n\nDecimal separators are valid when you use the `step` attribute. Only the `.` and `,` decimal separators are allowed. If your number starts with a decimal separator, `0` is added before the decimal separator. For example, entering `.2` results in `0.2` on blur.\n\n##### Step\n\nWe recommend using a maximum of 9 decimal places for `value` and a maximum of 15 decimal places for `step`. Browsers exhibit inconsistencies in number calculation when you use more decimal places.\n\nFor example, a `value` of `9.9999999999` has more than 9 decimal places, and is interpreted as `10.0` by some browsers. If `step` is `0.01`, `stepMismatch` validates as false when you enter `9.9999999999` because `10.0` matches the step. The `messageWhenStepMismatch` validation message isn't displayed and the field incorrectly displays as valid.\n\nSimilar behavior occurs when `step` has a value such as `0.000000000000001`, which is more than 15 decimal places.\n\n#### Password\n\nAn input field for entering a password. Characters you enter are masked.\n\n```html\n<template>\n    <lightning-input type=\"password\" label=\"Password\"> </lightning-input>\n</template>\n```\n\nUse the `value` attribute to optionally supply an initial value for the password. Use `pattern` to pass\na regular expression to validate the password characters.\n\nYou can guide users with a `field-level-help` tooltip and a `placeholder` prompt in the text field,\nas explained in **Adding Field-Level Help and Placeholder Text**.\n\n#### Range\n\nA slider control for entering a number. When working with numerical input, you\ncan use attributes like `max`, `min`, and `step`.\n\nThe attributes `maxlength`, `minlength`, and `pattern` can't be used with `range` type because they are for string data.\n\n```html\n<template>\n    <lightning-input type=\"range\" label=\"Number\" min=\"0\" max=\"10\">\n    </lightning-input>\n</template>\n```\n\n#### Search\n\nAn input field for entering a search string. This field displays the Lightning\nDesign System search utility icon.\n\n```html\n<template>\n    <lightning-input type=\"search\" label=\"Search\"> </lightning-input>\n</template>\n```\n\nTo indicate activity in the search field with a spinner, such as data loading, include the `is-loading` attribute.\n\n```html\n<template>\n    <lightning-input type=\"search\" label=\"Search\" is-loading> </lightning-input>\n</template>\n```\n\n#### Tel\n\nAn input field for entering a telephone number. Use the `pattern` attribute to\ndefine a pattern for field validation.\n\n```html\n<template>\n    <lightning-input\n        type=\"tel\"\n        label=\"Telephone\"\n        value=\"343-343-3434\"\n        pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n    >\n    </lightning-input>\n</template>\n```\n\n#### Text\n\nAn input field for entering text. This is the default input type.\n\nThe `value` attribute for this input type only supports string values. To clear a text field by setting the `value` attribute, use `\"\"` to specify an empty string because `null` isn't supported.\n\n```html\n<template>\n    <lightning-input label=\"Name\"> </lightning-input>\n</template>\n```\n\n#### Time\n\nA time field includes a text input to type a time and a time picker\nto select a time.\n\nOn mobile devices, this component uses the native time picker, which ignores the `time-style` attribute. The native time picker uses the user's device settings for the input time format.\n\nOn desktop, this component uses a time picker styled with the Lightning Design System. This picker uses the user's Salesforce locale setting for the time format, either 12-hr time with AM/PM or 24-hr time format. The entered date and time are validated against the user's Salesforce locale format during the `blur` event.\n\nBy default, the time picker renders above all modals and the main Salesforce header.\n\nThe component uses the attribute `time-style=\"short\"` by default, so the time picker\ndisplays time without seconds. To display time including seconds, set `time-style=\"medium\"`.\n\nUse the `value` attribute to optionally supply an initial time as an ISO8601 formatted time string\nsuch as `14:00:00.000`.\n\nSet `min` and `max` to ISO8601 formatted time strings to constrain the allowed time value. The time picker displays time values that are within the range only. If you type a time that's outside the range, the `blur` event triggers the field to display a validation error message. For a list of default error messages, see **Error Messages**. You can specify your own error messages for the `min` and `max` validation errors using the `message-when-range-underflow` and `message-when-range-overflow` attributes.\n\nYou can guide users with a `field-level-help` tooltip and a `placeholder` prompt in the text field,\nas explained in **Adding Field-Level Help and Placeholder Text**.\n\n```html\n<template>\n    <lightning-input type=\"time\" label=\"Time\"> </lightning-input>\n</template>\n```\n\n#### Toggle\n\nA checkbox toggle for selecting one of two given values. Use the\n`message-toggle-active` and `message-toggle-inactive` attributes to specify labels\ndisplayed under the toggle for each state. By default the labels are Active\nand Inactive. To omit labels, set these attributes to empty strings.\n\n```html\n<template>\n    <lightning-input type=\"toggle\" label=\"Toggle value\" checked>\n    </lightning-input>\n</template>\n```\n\nA toggle is similar to a checkbox; it presents a binary choice. However, a toggle is self-contained and is designed to be used in a form with only one field. When you switch a toggle on or off, the change for that item should save immediately.\n\nThe toggle implements the [checkbox toggle](https://www.lightningdesignsystem.com/components/checkbox-toggle/) blueprint in SLDS.\n\nTo apply custom styling, use the `:host` selector. Use SLDS styling hooks to customize the component's styles. For example, change the toggle switch color and toggle background color.\n\n```css\n:host {\n    --slds-c-checkbox-toggle-switch-color-background: orange;\n    --slds-c-checkbox-toggle-color-background-checked: green;\n}\n```\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/checkbox-toggle/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nBy default, the toggle component expands to 100% of the available width. To limit the size of the toggle component, wrap it with an element that specifies the appropriate width.\n\n```html\n<template>\n    <div style=\"width:fit-content\">\n        <lightning-input type=\"toggle\" label=\"Toggle value\" checked>\n        </lightning-input>\n    </div>\n</template>\n```\n\n#### URL\n\nAn input field for entering a URL. The address must include the protocol, such\nas http:// or ftp://. The URL pattern is automatically validated during the\n`blur` event. To enter the address without the protocol, such as\nwww.example.com, use the default `type=\"text\"` instead.\n\n```html\n<template>\n    <lightning-input type=\"url\" label=\"Website\"> </lightning-input>\n</template>\n```\n\n#### Input Validation\n\nClient-side input validation is available for this component. For example, an\nerror message is displayed when a URL or email address is expected for an\ninput type of `url` or `email`. Note that disabled and read-only inputs are\nalways valid.\n\nYou can define additional field requirements. For example, to set a maximum\nvalue on a number field, use the `max` attribute.\n\n```html\n<template>\n    <lightning-input type=\"number\" value=\"500\" label=\"Quantity\" max=\"1000\">\n    </lightning-input>\n</template>\n```\n\nTo check the validity states of an input, use the `validity` attribute, which\nis based on the Constraint Validation API. To determine if a field is valid,\nyou can access the validity states in JavaScript. Let's say\nyou have the following input field.\n\n```html\n<template>\n    <lightning-input\n        class=\"input\"\n        label=\"Enter some text\"\n        onblur={handleBlur}\n    >\n    </lightning-input>\n</template>\n```\n\nThe `validity` attribute returns true for the `valid` property because all constraint validations are met,\nand in this case there are none.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class DemoInput extends LightningElement {\n\n    handleBlur(event) {\n        var input = this.template.querySelector(\".input\");\n        console.log(input.validity.valid); //returns true\n    }\n```\n\nFor example, you have the following form with several fields and a button. To\ndisplay error messages on invalid fields, use the `reportValidity()` method.\n\n```html\n<template>\n    <lightning-input label=\"First name\" placeholder=\"First name\" required>\n    </lightning-input>\n    <lightning-input label=\"Last name\" placeholder=\"Last name\" required>\n    </lightning-input>\n    <lightning-button type=\"submit\" label=\"Submit\" onclick={handleClick}>\n    </lightning-button>\n</template>\n```\n\nValidate the fields in JavaScript.\n\n```javascript\nexport default class InputHandler extends LightningElement {\n    value = 'initial value';\n\n    handleClick(evt) {\n        console.log('Current value of the input: ' + evt.target.value);\n\n        const allValid = [\n            ...this.template.querySelectorAll('lightning-input'),\n        ].reduce((validSoFar, inputCmp) => {\n            inputCmp.reportValidity();\n            return validSoFar && inputCmp.checkValidity();\n        }, true);\n        if (allValid) {\n            alert('All form entries look valid. Ready to submit!');\n        } else {\n            alert('Please update the invalid form entries and try again.');\n        }\n    }\n}\n```\n\nThis `validity` attribute returns an object with the following read-only `boolean`\nproperties. One property is set to true and the rest are false, depending on attributes\nset on the input field and the user's entry.\n\n-   `badInput`: Indicates that the value is invalid for any input type.\n-   `customError`: Indicates that a custom error has been set. See **Custom Validity Error Messages**.\n-   `patternMismatch`: Indicates that the value doesn't match the specified `pattern` attribute for `email`, `password`, `search`, `tel`, `text`, or `url` input types.\n-   `rangeOverflow`: Indicates that the value is greater than the specified `max` attribute for `number`, `range`, `date`, `datetime`, or `time` input types.\n-   `rangeUnderflow`: Indicates that the value is less than the specified `min` attribute for `number`, `range`, `date`, `datetime`, or `time` input types.\n-   `stepMismatch`: Indicates that the value doesn't match the specified `step` attribute for `number` or `range` input types.\n-   `tooLong`: Indicates that the value exceeds the specified `maxlength` attribute for `email`, `password`, `search`, `tel`, `text`, or `url` input types.\n-   `tooShort`: Indicates that the value is less than the specified `minlength` attribute for `email`, `password`, `search`, `tel`, `text`, or `url` input types.\n-   `typeMismatch`: Indicates that the value doesn't match the required syntax for `email` or `url` input types.\n-   `valueMissing`: Indicates that an empty value is provided when `required` attribute is set for any input type.\n-   `valid`: True if none of the preceding properties are true.\n\n#### Error Messages\n\nWhen an input validation fails, a default message is displayed. You can provide your own values for the error messages to override the default messages. Specify your message using an attribute that corresponds to the validity error that's returned, as shown in the following table.\n\n| Validity Error    | Default Message                                                              | Attribute to Override Default   |\n| ----------------- | ---------------------------------------------------------------------------- | ------------------------------- |\n| `badInput`        | Enter a valid value.                                                         | `message-when-bad-input`        |\n| `patternMismatch` | Your entry does not match the allowed pattern.                               | `message-when-pattern-mismatch` |\n| `rangeOverflow`   | The number is too high.                                                      | `message-when-range-overflow`   |\n|                   | Value must be `[max]` or earlier. (for types `date`, `datetime`, and `time`) |                                 |\n| `rangeUnderflow`  | The number is too low.                                                       | `message-when-range-underflow`  |\n|                   | Value must be `[min]` or later. (for types `date`, `datetime`, and `time`)   |                                 |\n| `stepMismatch`    | Your entry isn't a valid increment.                                          | `message-when-step-mismatch`    |\n| `tooLong`         | Your entry is too long.                                                      | `message-when-too-long`         |\n| `tooShort`        | Your entry is too short.                                                     | `message-when-too-short`        |\n| `typeMismatch`    | You have entered an invalid format.                                          | `message-when-type-mismatch`    |\n| `valueMissing`    | Complete this field.                                                         | `message-when-value-missing`    |\n\nNote that the `badInput` validity error for `date` and `datetime` fields displays a default message that varies by locale. For example, \"Your entry does not match the allowed format MMM d, yyyy\" is displayed for en-US locale, but a different date format is shown for a different locale.\n\nTo override the default error message, use the corresponding attribute. For example, you have a text input with a minimum length of 5. If users enter fewer than five characters,\nthe validity error returned is `tooShort` and the default message is \"Your entry is too short.\" Use the `message-when-too-short` attribute to display a different error message.\n\n```html\n<template>\n    <lightning-input\n        label=\"First Name\"\n        minlength=\"5\"\n        message-when-too-short=\"Your entry must be at least 5 characters.\"\n    >\n    </lightning-input>\n</template>\n```\n\n#### Custom Validity Error Messages\n\nThe component supports `setCustomValidity()` from HTML5's Constraint\nValidation API. To set an error message, provide a quoted string to display.\nTo reset the error message, set the message to an empty string (\"\"). See\ndetails at [https://www.w3.org/TR/html52/sec-forms.html#dom-htmlinputelement-setcustomvalidity](https://www.w3.org/TR/html52/sec-forms.html#dom-htmlinputelement-setcustomvalidity).\n\nThis example shows how to display a custom error message with\n`setCustomValidity()` and `reportValidity()`. The component is a simple text\ninput with a button.\n\n```html\n<template>\n    <lightning-input class=\"inputCmp\" label=\"Enter your name:\">\n    </lightning-input>\n    <lightning-button label=\"Register\" onclick={register}> </lightning-button>\n</template>\n```\n\nThe `register()` function compares the input entered by the user to a\nparticular text string. If true, `setCustomValidity()` sets the custom error\nmessage. The error message is displayed immediately using `reportValidity()`.\n\nNote that when the comparison isn't true, you should set the error message to\nan empty string to zero out any messages that might have been set on previous\ncalls.\n\n```javascript\nimport { LightningElement } from 'lwc';\nexport default class MyComponent extends LightningElement {\n    register(event) {\n        var inputCmp = this.template.querySelector('.inputCmp');\n        var value = inputCmp.value;\n        // is input valid text?\n        if (value === 'John Doe') {\n            inputCmp.setCustomValidity('John Doe is already registered');\n        } else {\n            inputCmp.setCustomValidity(''); // if there was a custom error before, reset it\n        }\n        inputCmp.reportValidity(); // Tells lightning-input to show the error right away without needing interaction\n    }\n}\n```\n\n#### Using Autocomplete in Input Fields\n\nSome input types can be autofilled, based on your browser's support of the feature.\nThe `autocomplete` attribute passes through its value to the browser.\nThese `lightning-input` types support the `autocomplete` attribute:\n\n-   `email`\n-   `search`\n-   `tel`\n-   `text`\n-   `url`\n\nThe values `on` and `off` are supported, but the behavior depends on the browser. Some browsers might ignore the passed value.\n\nSee [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for more information.\n\n#### Adding Field-Level Help and Placeholder Text\n\nTo provide a hint for entering information in the field, specify help text with the `field-level-help` attribute. For example, describe the characters required in a `password` input. Field level help adds an info icon next to the input label, with a tooltip displaying the specified help text.\n\nTo provide sample input in the field, use the `placeholder` attribute. For example, in a `url` input, show a URL in the correct format.\n\n```html\n<template>\n    <lightning-input\n        label=\"Event Name\"\n        placeholder=\"Grand Opening\"\n        field-level-help=\"The event name must 50 characters or less\"\n        maxlength=\"50\"\n    >\n    </lightning-input>\n</template>\n```\n\n`field-level-help` isn't supported for `file`, `toggle`, and `checkbox-button` types.\n\n`placeholder` is supported for `date`, `email`, `number`, `password`, `search`, `tel`, `text`, `time`, and `url` input types only. The `placeholder` support for `date` and `time` is a Salesforce addition and is not part of the [HTML5 standard](https://html.spec.whatwg.org/multipage/input.html#input-type-attr-summary).\n\n#### Data Binding\n\nBind the input value to a property in your component's JavaScript class. `lightning-input` uses the `onchange` event handler to listen a change to its value. For more information, see [Data Binding in a Template](https://developer.salesforce.com/docs/platform/lwc/guide/js-props-getter).\n\n#### Event Handling\n\nThe native HTML `<input>` element provides two events, `input` and `change`. The `lightning-input` component provides\ntwo custom events, `change` and `commit`.\n\nThe component's `change` event behaves the same as the native `input` and `change` events together.\nIt fires whenever you change the input value, as the `<input>` element's `input` event does.\nIt also fires when you finish changing the input, as the `<input>` element's `change` event does.\n\nThe component's `commit` event fires only when you finish changing the input,\nwhich is the same behavior as the HTML `<input>` element's `change` event.\n\nThe component doesn't provide an `input` event because the behavior is provided in the `change` event.\n\nTo summarize, the component's `change` event is equivalent to the `input` and `change` events of\nthe `<input>` element. The component's `commit` event is equivalent to the `change` event of\nthe `<input>` element.\n\nThe `change` event fires at different times, depending on the specific input type.\nFor information about the `change` event for the `<input>` element, see\n[developer.mozilla.org](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event).\n\nSee the **Custom Events** section for more information about the component's events.\n\n#### Handling Number Input\n\nIn general, use `oncommit` to handle changes to number inputs. Use `onchange` for use cases where you want to process each character entered right away. For example, use `onchange` if you want to echo the content entered in another field as it is entered.\n\nFor input type `number`, the component sets the `value` to '' (an empty string) when the number input becomes invalid. The `change` event is fired each time the value changes, even when the value is set to an empty string. This enables you to reset the field in your `onchange` handler when input is invalid. Use separate variables to set the value of the number input and retrieve it.\n\n#### Handling Selections\n\nWhen working with checkboxes and toggle\nswitches, use `this.template.querySelectorAll` to retrieve the array of components. You can\nuse `.filter` to determine which elements are checked or unchecked. The following\nexample displays the values of the selected checkboxes.\n\n```html\n<template>\n    <lightning-input\n        type=\"checkbox\"\n        label=\"Red\"\n        onchange={handleCheckboxChange}\n    >\n    </lightning-input>\n    <lightning-input\n        type=\"checkbox\"\n        label=\"Blue\"\n        onchange={handleCheckboxChange}\n    >\n    </lightning-input>\n    <lightning-input\n        type=\"checkbox\"\n        label=\"Green\"\n        onchange={handleCheckboxChange}\n    >\n    </lightning-input>\n\n    <p>Checked items: {selection}</p>\n</template>\n```\n\nWhen you select a checkbox, the `handleCheckboxChange` function updates the `selection` property\nto display a list of selected checkboxes.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class CheckboxExample extends LightningElement {\n    selection;\n\n    handleCheckboxChange() {\n        // Query the DOM\n        const checked = Array.from(\n            this.template.querySelectorAll('lightning-input')\n        )\n            // Filter down to checked items\n            .filter((element) => element.checked)\n            // Map checked items to their labels\n            .map((element) => element.label);\n        this.selection = checked.join(', ');\n    }\n}\n```\n\nTo programmatically set a checkbox or checkbox button to `checked`, query the element using a custom data attribute. You can't query the internal elements of a Lightning web component. This example uses a custom attribute `data-element` to query the element. The checkbox is selected by clicking a button.\n\n```html\n<template>\n    <lightning-input\n        type=\"checkbox\"\n        data-element=\"subscribe-checkbox\"\n        label=\"Subscribe\"\n    >\n    </lightning-input>\n    <lightning-button\n        label=\"Subscribe\"\n        onclick={handleSubscribe}\n    ></lightning-button>\n</template>\n```\n\nSet the element's `checked` property to `true`.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class CheckboxExample extends LightningElement {\n    handleSubscribe(event) {\n        this.template\n            .querySelectorAll('[data-element=\"subscribe-checkbox\"]')\n            .forEach((element) => {\n                element.checked = true;\n            });\n    }\n}\n```\n\n#### Set and Read Selection Indexes\n\nThe `selection-start` and `selection-end` attribute values are passed through to the `<input>` element. Only the input type `text` is currently supported. The `selection-start` value specifies the index of the first character selected in the input element, while the `selection-end` value specifies the index of the last character selected. Index values start at 0.\n\nThis example selects the characters from index 0 to the end when you click the button.\n\n```html\n<template>\n    <lightning-input\n        type=\"text\"\n        label=\"Enter some text\"\n        value={textvalue}\n        onchange={handleChange}\n    ></lightning-input>\n    <lightning-button\n        label=\"Focus selection\"\n        onclick={handleClick}\n    ></lightning-button>\n</template>\n```\n\nIn JavaScript, the `selectionEnd` property\nis set to the length of the current input value.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class DemoInputSelection extends LightningElement {\n    textvalue = 'initial value';\n    handleChange(event) {\n        this.textvalue = event.detail.value;\n    }\n    handleClick(event) {\n        let input = this.template.querySelector('lightning-input');\n        let end = input.value.length;\n        input.selectionStart = 0;\n        input.selectionEnd = end;\n        // Optionally, focus to highlight the selected characters\n        // input.focus();\n    }\n}\n```\n\n#### Design Guidelines\n\nFor a single line of plain text input, use `lightning-input`. For multiple lines of plain text input, use `lightning-textarea` instead. For more specific input such as with numbers or email addresses, use the `type` attribute. Specifying `type` ensures that built-in validation can be applied to your data input.\n\nIn most contexts, a stacked label (`standard` or `label-stacked` variant) results in better readability and clarity. Use horizontal labels (`label-inline` variant) only if you need to conserve vertical space and have fewer than 10 fields.\n\nTo group related fields together, such as individual parts of an address, use compound input components like `lightning-input-address` or `lightning-input-location`. For name fields, use `lightning-input-name`.\n\n#### Component Styling\n\n`lightning-input` implements the\n[input](https://www.lightningdesignsystem.com/components/input/) blueprint in the Salesforce Lightning Design System (SLDS).\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example creates two fields using `lightning-input` in a compound row similar to the [SLDS form fields](https://www.lightningdesignsystem.com/components/form-element/#Fields).\n\n```html\n<fieldset class=\"slds-form-element slds-form-element_compound\">\n    <legend class=\"slds-form-element__legend slds-form-element__label\">\n        Name\n    </legend>\n    <div class=\"slds-form-element__control\">\n        <div class=\"slds-form-element__row\">\n            <div class=\"slds-size_1-of-2\">\n                <lightning-input label=\"First Name\"></lightning-input>\n            </div>\n            <div class=\"slds-size_1-of-2\">\n                <lightning-input label=\"Last Name\"></lightning-input>\n            </div>\n        </div>\n    </div>\n</fieldset>\n```\n\nTo apply custom styling, use the `:host` selector. Use SLDS styling hooks to customize the component's styles. For example, change the background color of the input fields using the `--slds-c-input-color-background` custom property.\n\n```css\n:host {\n    --slds-c-input-color-background: orange;\n}\n```\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/input/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\n#### Usage Considerations\n\n`maxlength` limits the number of characters you can enter. The\n`message-when-too-long` error message isn't triggered because you can't type more\nthan the number of characters allowed. However, you can use the\n`message-when-pattern-mismatch` and `pattern` attributes to\ntrigger a message on blur when too many characters are entered.\n\n```html\n<template>\n    <lightning-input\n        type=\"text\"\n        message-when-pattern-mismatch=\"Too many characters\"\n        pattern=\".{0,5}\"\n        label=\"Enter up to 5 characters\"\n    >\n    </lightning-input>\n</template>\n```\n\nYou can use custom labels that display translated values on input fields. For more information,\nsee [Access Labels](https://developer.salesforce.com/docs/platform/lwc/guide/create-labels).\n\nThe `lightning-input` component has these limitations when running in the Playground and the Mini-Playground in the Examples tab of this Component Reference.\n\n-   The `timezone` attribute currently doesn't work, so the time is formatted using the runtime system's timezone.\n-   The input types `date`, `time`, and `datetime` are limited to the en-US locale. Other locales are currently not supported in Playground.\n\n#### Accessibility\n\nYou must provide a text label for accessibility to make the information\navailable to assistive technology. The `label` attribute creates an HTML\n`<label>` element for your input component. To hide a label from view and make\nit available to assistive technology, use the `label-hidden` variant.\n\nSpecify the `aria-labelledby` attribute and `variant=\"label-hidden\"` to\nprovide a custom label for assistive devices. Although the `label` attribute is\nstill required, the `<label>` element is not rendered in this case.\n\n```html\n<template>\n    <p id=\"otherlabel\">\n        Your Event Name\n        <lightning-input\n            label=\"Event\"\n            variant=\"label-hidden\"\n            aria-labelledby=\"otherlabel\"\n        >\n        </lightning-input>\n    </p>\n</template>\n```\n\n`lightning-input` sets the `aria-invalid` attribute to match the validity state of the input field for assistive technology. If the `validity` attribute returns a true value for the `valid` property, then `aria-invalid` is false. If the `validity` attribute returns a true value for any property other than `valid`, then `aria-invalid` is true. When the component is initially loaded, `aria-invalid` is set to false. This prevents fields that are marked required from being announced as invalid before you enter anything.\n\nWhen a field-level error is displayed, `lightning-input` links the input field to the error message using the `aria-describedby` attribute, which enables assistive technology to announce the error message on the input field.\n\n#### Custom Events\n\n**`change`**\n\nThe event fired when a value is changed in the input field.\n\nThe `change` event returns one of the following `event.target` parameters, depending on input type.\n\n| Parameter | Type    | Description                                                                                                                                                                |\n| --------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| checked   | boolean | For input types `checkbox` and `checkbox-button`, the value of `checked` attribute. See **Change Event Handling** for an example of working with an array of inputs.       |\n| files     | Object  | For input type `file`, the list of selected files returned in a `FileList` object, each specified as a `File` object with the `size` and `type` attributes. See **Files**. |\n| value     | string  | For other input types, returns the input value.                                                                                                                            |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                                                    |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | true  | This event propagates outside of the component in which it was dispatched.                                |\n\n**`commit`**\n\nThe event fired when you press Enter after interacting with the input, or move away from the input so it loses focus. For the input type `search` the event is also fired when you click the \"x\" button to clear the search. For the input type `number` the event is also fired when you press Up/Down arrow keys to change the number.\n\nThe `commit` event doesn’t return any parameters.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                               |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside of the component in which it was dispatched.                        |\n\n#### LWC Recipes\n\nThe [LWC Recipes GitHub repository](https://github.com/trailheadapps/lwc-recipes) contains code examples for Lightning Web Components that you can test in an org.\n\nFor a recipe that uses `lightning-input`, see the following components in the LWC Recipes repo.\n\n-   `c-lds-create-record`\n-   `c-misc-modal`\n-   `c-wire-get-picklist-values`\n\n#### See Also\n\n[Access Elements the Component Owns](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-dom-work)\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputCheckboxBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-box\">\n        <h2 class=\"header\">Basic Input Checkbox</h2>\n        <lightning-input type=\"checkbox\" label=\"Basic option\" name=\"input1\"></lightning-input>\n        <lightning-input type=\"checkbox\" label=\"Required option\" name=\"input2\" checked required></lightning-input>\n        <lightning-input type=\"checkbox\" label=\"Disabled option\" name=\"input3\" checked disabled></lightning-input>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputCheckboxButton extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-box\">\n        <h2 class=\"header\">Input Checkbox Button</h2>\n        <lightning-input type=\"checkbox-button\" label=\"Input One\" name=\"input1\"></lightning-input>\n        <lightning-input type=\"checkbox-button\" label=\"Input Two\" name=\"input2\" checked required></lightning-input>\n        <lightning-input type=\"checkbox-button\" label=\"Input Three\" name=\"input3\" disabled></lightning-input>\n        <lightning-input type=\"checkbox-button\" label=\"Input Four\" name=\"input3\" checked disabled></lightning-input>\n    </div>\n</template>\n",
        "css": "      .slds-box {\n        padding: 1rem;\n        margin: 0;\n        border-radius: .25rem;\n        border: 1px solid lightgrey;\n      }\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputColor extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An input field with a color picker. Type a valid hex color value such as <code>#8DC141</code> or click the menu to select a color.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"color\" name=\"input-color\" label=\"Favorite color\"></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An input field with a color picker that's set to a predefined value.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"color\" name=\"input-color\" label=\"Favorite color\" value=\"#8DC141\"></lightning-input>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleInputDate extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-around_medium\">\n        <h1 class=\"slds-text-heading_small\">Input Date Example</h1>\n        <p class=\"slds-text-body_regular\">The following examples show various ways to create an input date component.</p>\n    </div>\n    <div>\n        <h2>Basic Input Date</h2>\n        <lightning-input type=\"date\" name=\"input1\" label=\"Enter a date\" ></lightning-input>\n        <lightning-input type=\"date\" name=\"input2\" label=\"Date field with a predefined value\" value=\"2020-09-07\"></lightning-input>\n        <lightning-input type=\"date\" name=\"input3\" label=\"Date field with ISO8601 formatted value\" value=\"2020-09-07T00:00:00Z\"></lightning-input>\n        <lightning-input type=\"date\" name=\"input4\" label=\"Date field with placeholder\" placeholder=\"type here...\"></lightning-input>\n    </div>\n\n    <div>\n        <h2>Advanced Input Date</h2>\n        <lightning-input type=\"date\" name=\"input5\" label=\"Required date field\" required value=\"2020-09-07\" ></lightning-input>\n        <lightning-input type=\"date\" name=\"input6\" label=\"Read-only date field\" readonly value=\"2020-09-07\" ></lightning-input>\n        <lightning-input type=\"date\" name=\"input7\" label=\"Disabled date field\" disabled value=\"2020-09-07\" ></lightning-input>\n        <lightning-input type=\"date\" name=\"input8\" label=\"Date field with min and max values\" value=\"2020-09-07\" min=\"2020-09-05\" max=\"2020-09-22\" ></lightning-input>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleInputDateTime extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-around_medium\">\n        <h1 class=\"slds-text-heading_small\">Input DateTime Example</h1>\n        <p class=\"slds-text-body_regular\">The following examples show various ways to create an input date/time component.</p>\n    </div>\n    <div>\n        <h2>Basic Input Date Time</h2>\n        <lightning-input type=\"datetime\" name=\"input1\" label=\"Enter a date/time value\" ></lightning-input>\n        <lightning-input type=\"datetime\" name=\"input2\" label=\"Date Time field with a predefined value\" value=\"2020-09-12T18:13:41Z\"></lightning-input>\n    </div>\n\n    <div>\n        <h2>Advanced Input Date Time</h2>\n        <lightning-input type=\"datetime\" name=\"input3\" label=\"Required Date Time field\" required value=\"2020-09-12T18:13:41Z\" ></lightning-input>\n        <lightning-input type=\"datetime\" name=\"input4\" label=\"Disabled Date Time field\" disabled value=\"2020-09-12T18:13:41Z\" ></lightning-input>\n        <lightning-input type=\"datetime\" name=\"input5\" label=\"Date Time field with min and max values\" value=\"2020-09-12T18:13:41Z\" min=\"2020-08-03T08:20:44Z\" max=\"2020-09-25T22:33:44Z\" ></lightning-input>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputEmail extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An email input field.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"email\" label=\"Email address\"></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An email input field with an initial value.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"email\" label=\"Email address\" value=\"alpha@beta.com\"></lightning-input>\n            <lightning-input type=\"email\" label=\"Email field without a top-level domain\" value=\"alpha@beta\"></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An email input field with an invalid value.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"email\" label=\"Email address\" value=\"alpha-not-valid\"></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An email input field with placeholder text.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"email\" label=\"Email address\" placeholder=\"type here...\"></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An email input field that is required.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"email\" label=\"Email address\" placeholder=\"type here...\" required></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An email input field that is disabled.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"email\" label=\"Email address\" placeholder=\"type here...\" disabled></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An email input field that is read-only.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"email\" label=\"Email address\" value=\"tony@starkindustries.com\" readonly></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An email input field that supports multiple email addresses.\n        </h2>\n\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"email\" label=\"Email addresses\" value=\"ceo@example.com, cto@example.com\" multiple></lightning-input>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputFile extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An input field with a file selector that accepts a single file.\n        </h2>\n\n        <!-- Single file -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"file\" label=\"Attachment\"></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An input field with a file selector that accepts multiple files.\n        </h2>\n\n        <!-- Multiple files -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"file\" label=\"Attachments\" multiple></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A required input field with a file selector that accepts a single file.\n        </h2>\n\n        <!-- Required -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"file\" label=\"Attachment\" required message-when-value-missing=\"Please upload a file\"></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A disabled input field with a file selector. You cannot interact with a disabled field.\n        </h2>\n\n        <!-- Disabled -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"file\" label=\"Attachment\" disabled></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            An input field with a file selector that accepts a single PNG, JPG, or ZIP file.\n        </h2>\n\n        <!-- Single file of restricted type -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"file\" label=\"Attachment\" accept=\"image/png, image/jpg, .zip\"></lightning-input>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputFileOnChange extends LightningElement {\n    filesCount = 0;\n    filesList = [];\n\n    handleFilesChange(event) {\n        const filesList = event.detail.files;\n        this.filesCount = filesList.length;\n        this.filesList = filesList;\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            File input field that accepts multiple files. Click the <b>upload files</b> button to add files, the information block below will update as the content changes.\n        </h2>\n\n        <!-- Multiple file with change event -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"file\" label=\"Attachment\" multiple onchange={handleFilesChange}></lightning-input>\n        </div>\n\n        <div class=\"slds-m-vertical_medium\">\n            <p>The number of files selected to upload is: <span class=\"slds-text-heading_small\">{filesCount}</span></p>\n            <p>The files selected are:</p>\n            <ul class=\"slds-list_dotted\">\n                <template for:each={filesList} for:item=\"file\">\n                    <li key={file.lastModified}>{file.name}</li>\n                </template>\n            </ul>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleInputNumber extends LightningElement {\n    amount = 0;\n\n    handleAmountChange(e) {\n        this.amount = e.detail.value;\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-around_medium\">\n        <h1 class=\"slds-text-heading_small\">Input Number Example</h1>\n        <p class=\"slds-text-body_regular\">The following examples show various ways to create an input number component.</p>\n    </div>\n    <div>\n        <h2>Basic Input Number</h2>\n        <lightning-input type=\"number\" name=\"input1\" label=\"Enter a number\" ></lightning-input>\n        <lightning-input type=\"number\" name=\"input2\" label=\"Number field with a predefined value\" value=\"12345\"></lightning-input>\n        <lightning-input type=\"number\" name=\"input3\" label=\"Number field with placeholder\" placeholder=\"type here...\"></lightning-input>\n    </div>\n\n    <div>\n        <h2>Advanced Input Number</h2>\n        <lightning-input type=\"number\" name=\"input4\" readonly value=\"123\" label=\"Read-only number field\" ></lightning-input>\n        <lightning-input type=\"number\" name=\"input5\" disabled value=\"12345\" label=\"Disabled number field\" ></lightning-input>\n        <lightning-input type=\"number\" name=\"input6\" label=\"Number field with percentage formatter\" value=\"0.5\" formatter=\"percent\" step=\"0.01\"></lightning-input>\n        <lightning-input type=\"number\" name=\"input7\" label=\"Number field with currency formatter\" value=\"123.45\" formatter=\"currency\" step=\"0.01\"></lightning-input>\n        <lightning-input type=\"number\" name=\"input8\" required value=\"5\" label=\"Required number field with a maximum value of 99\" max=\"99\"></lightning-input>\n    </div>\n\n    <div>\n        <h2>Live Input Number</h2>\n        <lightning-input type=\"number\" name=\"seven\" value={amount} onchange={handleAmountChange} placeholder=\"type the number of items...\" label=\"Enter a number\" ></lightning-input>\n        <p>\n            Number of Items: {amount}\n        </p>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleInputPassword extends LightningElement {\n    pattern = '.{6,}';\n}\n",
        "html": "<template>\n    <div class=\"slds-m-around_medium\">\n        <h1 class=\"slds-text-heading_small\">Input Password Example</h1>\n        <p class=\"slds-text-body_regular\">The following examples show various ways to create an input password component.</p>\n    </div>\n    \n    <div>\n        <h2>Basic Input Password</h2>\n        <lightning-input type=\"password\" label=\"Enter your password\" name=\"input1\"  ></lightning-input>\n        <lightning-input type=\"password\" label=\"Password field with predefined value\" name=\"input2\" value=\"pre-filled password\"></lightning-input>\n        <lightning-input type=\"password\" label=\"Password field with placeholder\" name=\"input3\" placeholder=\"Enter Password\"></lightning-input>\n    </div>\n\n    <div>\n        <h2>Advanced Input Password</h2>\n        <lightning-input type=\"password\" label=\"Read-only password field\" name=\"input4\" readonly value=\"initial value\" ></lightning-input>\n        <lightning-input type=\"password\" label=\"Disabled password field\" name=\"input5\" disabled value=\"initial value\" ></lightning-input>\n        <lightning-input type=\"password\" label=\"Required password field\" name=\"input6\" required value=\"initial value\" ></lightning-input>\n        <lightning-input type=\"password\" label=\"Required password field with a minimum of 6 characters\" name=\"input7\" pattern={pattern} required value=\"initial value\" ></lightning-input>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleInputSearch extends LightningElement {\n    queryTerm;\n\n    handleKeyUp(evt) {\n        const isEnterKey = evt.keyCode === 13;\n        if (isEnterKey) {\n            this.queryTerm = evt.target.value;\n        }\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-around_medium\">\n        <h1 class=\"slds-text-heading_small\">Input Search Example</h1>\n        <p class=\"slds-text-body_regular\">The following examples show various ways to create an input search component.</p>\n    </div>\n    <div onkeyup={handleKeyUp}>\n        <lightning-input\n            name=\"enter-search\"\n            label=\"Search when user hits the 'enter' key\"\n            type=\"search\"\n        ></lightning-input>\n    </div>\n    <p if:true={queryTerm}>\n        Searched for {queryTerm}!\n    </p>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleInputTelephone extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-around_medium\">\n        <h1 class=\"slds-text-heading_small\">Input Telephone Example</h1>\n        <p class=\"slds-text-body_regular\">The following examples show various ways to create an input telephone component.</p>\n    </div>\n    <div>\n        <h2>Basic Input Telephone</h2>\n        <lightning-input type=\"tel\" label=\"Read-only phone field\" name=\"phone1\" value=\"345987345\" readonly></lightning-input>\n        <lightning-input type=\"tel\" label=\"Basic phone field\" name=\"phone2\" placeholder=\"areacode-phone\"></lightning-input>\n        <lightning-input type=\"tel\" label=\"Phone field with pattern matching\" name=\"phone3\" value=\"343-343-3434\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"></lightning-input>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputText extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A text input field.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"text\" label=\"Enter some text\"></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A text input field with an initial value.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"text\" label=\"Enter some text\" value=\"ACME Inc.\"></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A text input field with placeholder text.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"text\" label=\"Enter some text\" placeholder=\"type here...\"></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A text input field that is required.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"text\" label=\"Enter some text\" placeholder=\"type here...\" required></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A text input field that is disabled.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"text\" label=\"Enter some text\" placeholder=\"type here...\" disabled></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A text input field that is read-only.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"text\" label=\"Enter some text\" value=\"Stark Industries\" readonly></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A text input field that requires a minimum of 6 characters.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"text\" label=\"Enter some text\" placeholder=\"type here...\" minlength=\"6\"></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A text input field that cannot have more than 10 characters.\n        </h2>\n\n        <!-- Default/basic -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"text\" label=\"Enter some text\" placeholder=\"type here...\" maxlength=\"10\"></lightning-input>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputTextAdvanced extends LightningElement {\n    textValue;\n\n    handleInputFocus(event) {\n        // modify parent to properly highlight visually\n        const classList = event.target.parentNode.classList;\n        classList.add('lgc-highlight');\n    }\n\n    handleInputBlur(event) {\n        // modify parent to properly remove highlight\n        const classList = event.target.parentNode.classList;\n        classList.remove('lgc-highlight');\n    }\n\n    handleInputChange(event) {\n        this.textValue = event.detail.value;\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A text input field that becomes highlighted when focused and returns to default when focus is moved away.\n        </h2>\n\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"text\" label=\"Enter some text\" onfocus={handleInputFocus} onblur={handleInputBlur}></lightning-input>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A text input field that live updates a variable.\n        </h2>\n\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-input type=\"text\" label=\"Enter some text\" onchange={handleInputChange}></lightning-input>\n        </div>\n\n        <div class=\"slds-m-vertical_medium\">\n            <p>The value of the input field is: <span class=\"slds-text-heading_small\">{textValue}</span></p>\n        </div>\n    </div>\n\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n\n.lgc-highlight {\n    background-color: rgb(255 255 0);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputTimeAdvanced extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-box\">\n        <h2 class=\"header\">Advanced Input Time</h2>\n        <lightning-input type=\"time\" name=\"input4\" label=\"Required Time field\" required\n                         value=\"18:30:00.000Z\"></lightning-input>\n        <lightning-input type=\"time\" name=\"input5\" label=\"Disabled Time field\" disabled\n                         value=\"18:30:00.000Z\"></lightning-input>\n        <lightning-input type=\"time\" name=\"input6\" label=\"Time field with min and max values\" value=\"18:30:00.000Z\"\n                         min=\"10:30:00.000Z\" max=\"22:00:00.000Z\"></lightning-input>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputTimeBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-box\">\n        <h2 class=\"header\">Basic Input Time</h2>\n        <lightning-input type=\"time\" name=\"input1\" label=\"Enter a time\"></lightning-input>\n        <lightning-input type=\"time\" name=\"input2\" label=\"Time field with a predefined value\"\n                         value=\"18:30:00.000Z\"></lightning-input>\n        <lightning-input type=\"time\" name=\"input3\" label=\"Time field with placeholder\"\n                         placeholder=\"type here...\"></lightning-input>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Toggle extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-box\">\n        <h2 class=\"header\">Toggle</h2>\n        <lightning-input type=\"toggle\" label=\"Basic option\" name=\"input1\"></lightning-input>\n        <lightning-input type=\"toggle\" label=\"Required option\" name=\"input2\" checked required></lightning-input>\n        <lightning-input type=\"toggle\" label=\"Disabled option\" name=\"input3\" checked disabled></lightning-input>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleInputURL extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-around_medium\">\n        <h1 class=\"slds-text-heading_small\">Input URL Example</h1>\n        <p class=\"slds-text-body_regular\">The following examples show various ways to create an input URL component.</p>\n    </div>\n    <div>\n        <h2>Basic Input URL</h2>\n        <lightning-input type=\"url\" label=\"Enter a URL\" name=\"input1\" ></lightning-input>\n        <lightning-input type=\"url\" label=\"URL field with a predefined value\" name=\"input2\" value=\"http://www.google.com\" ></lightning-input>\n        <lightning-input type=\"url\" label=\"URL field with a placeholder\" name=\"input3\" placeholder=\"Enter valid URL here...\" ></lightning-input>\n    </div>\n\n    <div>\n        <h2>Advanced Input URL</h2>\n        <lightning-input type=\"url\" label=\"Read-only URL field\" name=\"input4\" readonly value=\"file://someFile\" ></lightning-input>\n        <lightning-input type=\"url\" label=\"Disabled URL field\" name=\"input5\" disabled value=\"www.google.com\" ></lightning-input>\n        <lightning-input type=\"url\" label=\"Required URL field with a predefined value\" name=\"input6\" required value=\"www.google.com\" ></lightning-input>\n        <lightning-input type=\"url\" label=\"Required URL field with pattern matching\" name=\"input6\" pattern=\"^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$\" required value=\"www.google.com\" ></lightning-input>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-input-address",
    "shortDescription": "This component is a compound field that allows users to input an address, with options for prepopulating fields, marking fields as required, and supporting predefined lists of states and countries, providing an interactive and customizable user experience.",
    "relatedComponents": {
      "lightning-button": "optional",
      "lightning-record-form": "optional",
      "lightning-record-view-form": "optional",
      "lightning-record-edit-form": "optional"
    },
    "publicApi": [
      {
        "name": "address-label",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address address-label='Address'>",
          "<lightning-input-address address-label={addressLabel}>"
        ]
      },
      {
        "name": "street-label",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address street-label='Street'>",
          "<lightning-input-address street-label={streetLabel}>"
        ]
      },
      {
        "name": "city-label",
        "typeSignature": "string",
        "examples": ["<lightning-input-address city-label='City'>", "<lightning-input-address city-label={cityLabel}>"]
      },
      {
        "name": "country-label",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address country-label='Country'>",
          "<lightning-input-address country-label={countryLabel}>"
        ]
      },
      {
        "name": "province-label",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address province-label='Province'>",
          "<lightning-input-address province-label={provinceLabel}>"
        ]
      },
      {
        "name": "postal-code-label",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address postal-code-label='PostalCode'>",
          "<lightning-input-address postal-code-label={postalCodeLabel}>"
        ]
      },
      {
        "name": "street",
        "typeSignature": "string",
        "examples": ["<lightning-input-address street='1 Market St.'>", "<lightning-input-address street={street}>"]
      },
      {
        "name": "city",
        "typeSignature": "string",
        "examples": ["<lightning-input-address city='San Francisco'>", "<lightning-input-address city={city}>"]
      },
      {
        "name": "country",
        "typeSignature": "string",
        "examples": ["<lightning-input-address country='US'>", "<lightning-input-address country={country}>"]
      },
      {
        "name": "province",
        "typeSignature": "string",
        "examples": ["<lightning-input-address province='CA'>", "<lightning-input-address province={province}>"]
      },
      {
        "name": "postal-code",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address postal-code='94105'>",
          "<lightning-input-address postal-code={postalCode}>"
        ]
      },
      {
        "name": "field-level-help",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address field-level-help='Enter your billing address'>",
          "<lightning-input-address field-level-help={fieldLevelHelp}>"
        ]
      },
      {
        "name": "onchange",
        "typeSignature": "(ev: CustomEvent & { detail: { street: string, city: string, province: string, country: string, postalCode: string, validity: object } }) => void",
        "examples": ["<lightning-input-address onchange={handleChange}>"]
      },
      {
        "name": "country-options",
        "typeSignature": "{ label: string, value: string }[]",
        "examples": ["<lightning-input-address country-options={getCountryOptions}>"]
      },
      {
        "name": "province-options",
        "typeSignature": "{ label: string, value: string }[]",
        "examples": ["<lightning-input-address province-options={getProvinceOptions}>"]
      },
      {
        "name": "required",
        "typeSignature": "boolean",
        "examples": ["<lightning-input-address required>", "<lightning-input-address required={isRequired}>"]
      },
      {
        "name": "show-address-lookup",
        "typeSignature": "boolean",
        "examples": [
          "<lightning-input-address show-address-lookup>",
          "<lightning-input-address show-address-lookup={showAddressLookup}>"
        ]
      },
      {
        "name": "disabled",
        "typeSignature": "boolean",
        "examples": ["<lightning-input-address disabled>", "<lightning-input-address disabled={isDisabled}>"]
      },
      {
        "name": "country-disabled",
        "typeSignature": "boolean",
        "examples": [
          "<lightning-input-address country-disabled>",
          "<lightning-input-address country-disabled={isCountryDisabled}>"
        ]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address variant='label-hidden'>",
          "<lightning-input-address variant={variantType}>"
        ]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address class='slds-p-top_small'>",
          "<lightning-input-address class={className}>"
        ]
      },
      {
        "name": "locale",
        "typeSignature": "string",
        "examples": ["<lightning-input-address locale='en-US'>", "<lightning-input-address locale={locale}>"]
      },
      {
        "name": "address-lookup-placeholder",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address address-lookup-placeholder='Search Address'>",
          "<lightning-input-address address-lookup-placeholder={addressLookupPlaceholder}>"
        ]
      },
      {
        "name": "street-placeholder",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address street-placeholder='Enter Street'>",
          "<lightning-input-address street-placeholder={streetPlaceholder}>"
        ]
      },
      {
        "name": "city-placeholder",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address city-placeholder='Enter City'>",
          "<lightning-input-address city-placeholder={cityPlaceholder}>"
        ]
      },
      {
        "name": "province-placeholder",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address province-placeholder='Enter Province'>",
          "<lightning-input-address province-placeholder={provincePlaceholder}>"
        ]
      },
      {
        "name": "country-placeholder",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address country-placeholder='Enter Country'>",
          "<lightning-input-address country-placeholder={countryPlaceholder}>"
        ]
      },
      {
        "name": "postal-code-placeholder",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-address postal-code-placeholder='Enter Postal Code'>",
          "<lightning-input-address postal-code-placeholder={postalCodePlaceholder}>"
        ]
      }
    ],
    "useCases": [
      "A user could use the <lightning-input-address> component when filling out a form to register for a new account on a website. The component would allow the user to input their street, city, province, country, and postal code. The website could then use this information to send the user physical mail, such as a welcome package or promotional materials.",
      "A user could use the <lightning-input-address> component when checking out from an online store. The component would allow the user to input their shipping address, which the store would then use to send the user their purchased items. The component could also be used to input a billing address, which the store would use for payment verification purposes.",
      "A user could use the <lightning-input-address> component when signing up for a service that requires a physical location, such as a food delivery service. The component would allow the user to input their address, which the service would then use to determine if they are within the delivery area and to send the user their orders.",
      "A user could use the <lightning-input-address> component when filling out a form to apply for a job. The component would allow the user to input their address, which the employer could then use to send the user important documents or to determine if the user lives within a reasonable commuting distance.",
      "A user could use the <lightning-input-address> component when registering for a local event or activity. The component would allow the user to input their address, which the event organizers could then use to send the user tickets or other necessary materials, or to verify that the user is eligible to participate based on their location.",
      "A user could use the <lightning-input-address> component when filling out a form to request information from a university or other educational institution. The component would allow the user to input their address, which the institution could then use to send the user brochures, application materials, or other requested information."
    ],
    "docs": "---\nexamples:\n    - name: base\n      label: Basic Address Input\n      description: Address fields can be prepopulated and marked as required.\n    - name: stateAndCountryPicklists\n      label: Address With State and Country Picklists\n      description: Address fields support predefined lists of states and countries.\n    - name: customLocale\n      label: Address With Custom Locale\n      description: Address input fields ordered depending on custom locale value.\n---\n\nA `lightning-input-address` component creates a compound field that includes the following constituent fields.\n\n-   Street\n-   City\n-   Province\n-   Country\n-   Postal code\n\nThe street field is displayed as a multi-line text field. The other fields are displayed as a text input field by default. The country and province fields are displayed as dropdown menus if you specify `country-options` and `province-options` to provide options for menu items.\n\nThis example creates an address compound field with attributes to specify values for the constituent fields. The initial values are set directly with the attributes.\n\n```html\n<template>\n    <div>\n        <lightning-input-address\n            address-label=\"Address\"\n            street-label=\"Street\"\n            city-label=\"City\"\n            country-label=\"Country\"\n            province-label=\"State\"\n            postal-code-label=\"PostalCode\"\n            street=\"1 Market St.\"\n            city=\"San Francisco\"\n            country=\"US\"\n            province=\"CA\"\n            postal-code=\"94105\"\n            field-level-help=\"Enter your billing address\"\n        >\n        </lightning-input-address>\n    </div>\n</template>\n```\n\n`lightning-input-address` uses the `onchange` event handler to listen to a change to its field values.\n\n```html\n<p>You are located in: {city}</p>\n    <lightning-input-address\n        address-label=\"Address\"\n        street-label=\"Street\"\n        city-label=\"City\"\n        country-label=\"Country\"\n        province-label=\"Province\"\n        postal-code-label=\"PostalCode\"\n        city={city}\n        onchange={handleChange} ></lightning-input-address>\n```\n\nTo bind the input value on the address fields, use the `event.target` property.\n\n```js\nimport { LightningElement } from 'lwc';\n\nexport default class AddressCityExample extends LightningElement {\n    city = \"San Francisco\";\n\n    handleChange(event) {\n        this.city = event.target.city;\n    }\n}\n```\n\nSee the __Custom Events__ section for a list of `event.target` properties. For more information, see [Data Binding in a Template](https://developer.salesforce.com/docs/platform/lwc/guide/js-props-getter).\n\n#### Creating Dropdown Menus for Country and Province\n\nTo create a dropdown menu for the country and province, pass in an array of\nlabel-value pairs to `country-options` and `province-options`. Use the `country` and\n`province` attributes to specify the default values on the dropdown menus.\n\n```html\n<template>\n    <div>\n        <lightning-input-address\n            address-label=\"Address\"\n            street-label=\"Street\"\n            city-label=\"City\"\n            country-label=\"Country\"\n            province-label=\"Province/State\"\n            postal-code-label=\"PostalCode\"\n            street=\"1 Market St.\"\n            city=\"San Francisco\"\n            province=\"CA\"\n            country=\"US\"\n            country-options={getCountryOptions}\n            province-options={getProvinceOptions}\n            postal-code=\"94105\"\n            required\n            onchange={handleChange}\n        >\n        </lightning-input-address>\n    </div>\n</template>\n```\n\nJavaScript file:\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class DemoInputAddress extends LightningElement {\n    provinceOptions = [\n        { label: 'California', value: 'CA' },\n        { label: 'Texas', value: 'TX' },\n        { label: 'Washington', value: 'WA' },\n    ];\n\n    countryOptions = [\n        { label: 'United States', value: 'US' },\n        { label: 'Japan', value: 'JP' },\n        { label: 'China', value: 'CN' },\n    ];\n\n    get getProvinceOptions() {\n        return this.countryProvinceMap[this._country];\n    }\n    get getCountryOptions() {\n        return this.countryOptions;\n    }\n\n    handleChange(event) {\n        this._country = event.detail.country;\n    }\n}\n```\n\nAlternatively, you can enable state and country picklists in your org, and\naccess the values by using a wire adapter.\nSee [Let Users Select State and Country from Picklists](https://help.salesforce.com/articleView?id=admin_state_country_picklists_overview.htm) in Salesforce Help and [getPicklistValues](https://developer.salesforce.com/docs/platform/lwc/guide/reference-wire-adapters-picklist-values) in the Lightning Web Components Developer Guide.\n\n#### Using Lookup to Find and Autofill an Address\n\nTo enable autocompletion of the address fields using an address lookup field, include the `show-address-lookup` attribute. The address lookup field is placed above the address fields you provide.\n\n```html\n<template>\n    <lightning-input-address\n        address-label=\"Address\"\n        street-label=\"Street\"\n        city-label=\"City\"\n        country-label=\"Country\"\n        province-label=\"State\"\n        postal-code-label=\"Zip Code\"\n        street=\"1 Market St.\"\n        city=\"San Francisco\"\n        country=\"US\"\n        province=\"CA\"\n        show-address-lookup\n    >\n    </lightning-input-address>\n</template>\n```\n\nWhen you start typing an address in the lookup field, a dropdown menu displays matching addresses returned by the Google Maps Places API. Select an address from the dropdown to populate the address fields.\n\nUsing `show-address-lookup` is not supported in Playground, Experience Builder sites, Lightning Out,\nLightning Components for Visualforce, and standalone apps. While it may work, these targets are not optimized and not officially supported.\n\n#### Validating Required Fields\n\nWhen you set `required`, a red asterisk is displayed on every address\nfield to indicate that an entry in each field is required. An error message is displayed below\na field if a user interacted with it and left it blank. The `required`\nattribute is not enforced and you must validate it before submitting a form\nthat contains an address compound field.\n\nLet's say you have a `lightning-button` component that calls the `handleClick`\nfunction. You can display the error message when a user clicks the\nbutton without providing a value on a field.\n\n```javascript\n    handleClick(e) {\n        const address =\n            this.template.querySelector('lightning-input-address');\n        const isValid = address.checkValidity();\n        if(isValid) {\n            alert(\"Creating a new address\");\n        } else {\n            alert(\"Complete all address fields\");\n        }\n    }\n```\n\n#### Working with Labels and Placeholders\n\nA label is associated with an address field and it enables screen readers to navigate the form correctly. Include a label for each field you're using, with the following attributes.\n\n-   `address-label`\n-   `street-label`\n-   `city-label`\n-   `province-label`\n-   `country-label`\n-   `postal-code-label`\n\nYou can hide the `address-label` visually and still make them accessible to screen readers by using `variant=\"label-hidden\"`.\n\nAdditionally, the `show-address-lookup` boolean attribute creates a search field that doesn't have an associated label. See **Using Lookup to Find and Autofill an Address** for more information.\n\nYour Salesforce locale setting determines the order and layout of the input address fields by default. Use the `locale` attribute to override the default. Specify any locale code from the list of [Supported Number, Name, and Address Formats (ICU)](https://help.salesforce.com/s/articleView?id=sf.admin_supported_locales.htm&type=5\").\n\nYou can also use custom labels that display translated values. For more information, see\n[Access Labels](https://developer.salesforce.com/docs/platform/lwc/guide/create-labels).\n\nWe recommend that you provide a label even when you provide placeholder text for an address field. Without field labels, users can lose context when the placeholder text disappears as they type in the field.\n\nSpecify placeholder text to give users a hint about the content they're expected to enter in the field. Avoid repeating the field label in the placeholder for better accessibility. Consider the width of your address field as the placeholder text is cut off if it's too long, especially on mobile devices.\n\nInclude an optional placeholder for each field you're using, with the following attributes.\n\n-   `address-lookup-placeholder`\n-   `street-placeholder`\n-   `city-placeholder`\n-   `province-placeholder`\n-   `country-placeholder`\n-   `postal-code-placeholder`\n\n#### Component Styling\n\n`lightning-input-address` implements the\n[form element](https://lightningdesignsystem.com/components/form-element/#Address) address blueprint in the\nSalesforce Lightning Design System (SLDS).\n\nYou can use a combination of the `variant` and `class` attributes to customize the address fields.\n\n##### Variants\n\nUse the `variant` attribute with one of these values to apply different label positioning.\n\n-   `label-hidden` hides the compound field label but make it available to assistive technology. This variant does not hide the constituent field labels.\n-   `label-inline` horizontally aligns the compound field label and address fields.\n-   `label-stacked` places the label above the address fields.\n-   `standard` is the default value, which displays the label above the address fields.\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds padding on top of address fields using an SLDS class.\n\n```html\n<lightning-input-address\n    class=\"slds-p-top_small\"\n    address-label=\"Address\"\n    street-label=\"Street\"\n    city-label=\"City\"\n    country-label=\"Country\"\n    province-label=\"Province\"\n    postal-code-label=\"PostalCode\"\n>\n</lightning-input-address>\n```\n\nTo apply custom styling, use the `:host` selector. Use SLDS styling hooks to customize the component's styles. The Street field renders a [textarea](https://www.lightningdesignsystem.com/components/textarea) and the other fields render [input](https://www.lightningdesignsystem.com/components/input/) fields.\n\nFor example, change the minimum height of the textarea and change the background color of the input fields.\n\n```css\n:host {\n    --slds-c-textarea-sizing-min-height: 200px;\n    --slds-c-input-color-background: orange;\n}\n```\n\nSee [Input: Styling Hooks Overview](https://www.lightningdesignsystem.com/components/input/#Styling-Hooks-Overview) and [Textarea: Styling Hooks Overview](https://www.lightningdesignsystem.com/components/textarea/#CSS-Class-Overview) for a list of CSS custom properties.\n\n#### Usage Considerations\n\nUsing `show-address-lookup` is not supported in Playground, Experience Builder sites, Lightning Out,\nLightning Components for Visualforce, and standalone apps.\n\nWhen working with address fields such as with the `MailingAddress` field on Salesforce records, consider using the record form components. The `lightning-record-form`, `lightning-record-view-form`, and `lightning-record-edit-form` components provide a form-based UI that's metadata-driven. The components are automatically wired up to your record data, labels, and field-level help text. For more information, see [Work with Records Using Base Components](https://developer.salesforce.com/docs/platform/lwc/guide/data-get-user-input-intro).\n\nTo create your own custom UI to work with Salesforce records, use `lightning-input-address` with the `lightning/ui*Api` wire adapters and functions, such as `getRecord` and `updateRecord`. For more information, see [Use the Wire Service with Base Components](https://developer.salesforce.com/docs/platform/lwc/guide/data-wire-base-components).\n\nTo disable the fields so that users cannot interact with it, use the `disabled` attribute. If you want to prevent users from interacting with the country field only,\ndisable it using the `country-disabled` attribute.\n\n#### Accessibility\n\nYou must provide a text label for accessibility to make the information available to assistive technology.\nThe `label` attribute creates an HTML `<label>` element for your address.\nTo hide the compound field label from view and make it available to assistive technology, use the `label-hidden` variant.\nThis variant keeps the constituent field labels in view.\n\nThis component uses `button` elements for picklists to comply with the [Lightning Design System combobox blueprint](https://www.lightningdesignsystem.com/components/combobox/#%22Input%22-markup) for select-only comboboxes.\n\n#### Custom Events\n\n**`change`**\n\nThe event fired when an item is changed in the `lightning-input-address` component.\n\nThe `change` event returns the following parameters.\n\n| Parameter  | Type   | Description                        |\n| ---------- | ------ | ---------------------------------- |\n| street     | string | The number and name of street.     |\n| city       | string | The name of the city.              |\n| province   | string | The name of the province/state.    |\n| country    | string | The name of the country.           |\n| postalCode | string | The postal code for the address.   |\n| validity   | object | The validity state of the element. |\n\nThe `change` event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                                                    |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | true  | This event propagates outside of the component in which it was dispatched.                                |\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputAddressBase extends LightningElement {}\n",
        "html": "<template>\n    <lightning-input-address\n        address-label=\"Address\"\n        street-label=\"Street\"\n        city-label=\"City\"\n        country-label=\"Country\"\n        province-label=\"Province\"\n        postal-code-label=\"PostalCode\"\n        street=\"121 Spear St.\"\n        city=\"San Francisco\"\n        country=\"US\"\n        province=\"CA\"\n        postal-code=\"94105\"\n        required\n        field-level-help=\"Help Text for inputAddress field\" ></lightning-input-address>\n</template>\n    "
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputAddressCustomLocale extends LightningElement {}\n",
        "html": "<template>\n    <lightning-input-address\n        address-label=\"Address\"\n        street-label=\"Street\"\n        city-label=\"City\"\n        country-label=\"Country\"\n        province-label=\"Prefecture\"\n        postal-code-label=\"Postal Code\"\n        locale=\"ja-JP\"\n        field-level-help=\"Help Text for input address field\" >\n    </lightning-input-address>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputAddressBase extends LightningElement {\n    address = {\n        street: '121 Spear St.',\n        city: 'San Francisco',\n        province: 'CA',\n        postalCode: '94105',\n        country: 'US',\n    };\n\n    _country = 'US';\n\n    countryProvinceMap = {\n        US: [\n            { label: 'California', value: 'CA' },\n            { label: 'Texas', value: 'TX' },\n            { label: 'Washington', value: 'WA' },\n        ],\n        CN: [\n            { label: 'GuangDong', value: 'GD' },\n            { label: 'GuangXi', value: 'GX' },\n            { label: 'Sichuan', value: 'SC' },\n        ],\n        VA: [],\n    };\n\n    countryOptions = [\n        { label: 'United States', value: 'US' },\n        { label: 'China', value: 'CN' },\n        { label: 'Vatican', value: 'VA' },\n    ];\n\n    get getProvinceOptions() {\n        return this.countryProvinceMap[this._country];\n    }\n    get getCountryOptions() {\n        return this.countryOptions;\n    }\n\n    handleChange(event) {\n        this._country = event.detail.country;\n    }\n}\n",
        "html": "<template>\n    <lightning-input-address\n        address-label=\"Address\"\n        street-label=\"Street\"\n        city-label=\"City\"\n        country-label=\"Country\"\n        province-label=\"Province\"\n        postal-code-label=\"PostalCode\"\n        street={address.street}\n        city={address.city}\n        country={address.country}\n        province={address.province}\n        postal-code={address.postalCode}\n        field-level-help=\"Help Text for inputAddress field\" \n        country-options={getCountryOptions}\n        province-options={getProvinceOptions}\n        onchange={handleChange} ></lightning-input-address>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-input-location",
    "shortDescription": "This component is a geolocation field that allows users to input latitude and longitude values, providing an interactive experience for identifying specific geographic locations.",
    "relatedComponents": {
      "lightning-input": "optional"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-input-location label='My Coordinates'>"]
      },
      {
        "name": "latitude",
        "typeSignature": "string",
        "examples": ["<lightning-input-location latitude='37.7938460'>"]
      },
      {
        "name": "longitude",
        "typeSignature": "string",
        "examples": ["<lightning-input-location longitude='-122.3948370'>"]
      },
      {
        "name": "required",
        "typeSignature": "boolean",
        "examples": ["<lightning-input-location required>"]
      },
      {
        "name": "validity",
        "typeSignature": "ValidityState",
        "examples": ["<lightning-input-location validity={myValidityState}>"]
      },
      {
        "name": "onchange",
        "typeSignature": "(ev: CustomEvent & { detail: { latitude: string, longitude: string } }) => void",
        "examples": ["<lightning-input-location onchange={handleChange}>"]
      }
    ],
    "useCases": [
      "A travel agency could use the <lightning-input-location> component on their website to allow customers to input their current location. This would allow the agency to suggest nearby travel destinations or calculate distances to potential destinations.",
      "A weather website could use the <lightning-input-location> component to allow users to input their location. The website could then provide weather forecasts for that specific location.",
      "A delivery service could use the <lightning-input-location> component on their website to allow customers to input their delivery location. This would allow the service to calculate delivery times and costs.",
      "A real estate website could use the <lightning-input-location> component to allow users to input their desired location for a new home. The website could then show listings in and around that location.",
      "A car rental service could use the <lightning-input-location> component on their website to allow customers to input their pick-up and drop-off locations. This would allow the service to calculate rental costs based on distance and availability of vehicles at those locations.",
      "A job search website could use the <lightning-input-location> component to allow users to input their desired job location. The website could then show job listings in and around that location."
    ],
    "docs": "---\nexamples:\n    - name: base\n      label: Basic Geolocation Fields\n      description: Geolocation fields include a latitude and longitude field.\n    - name: defaultValues\n      label: Default Coordinates\n      description: Geolocation fields can include predefined coordinates.\n    - name: required\n      label: Required Geolocation Fields\n      description: Geolocation fields marked as required throw an error if you don't enter a latitude and longitude.\n    - name: disabled\n      label: Disabled Geolocation Fields\n      description: Disabled geolocation fields are grayed out and you cannot interact with them.\n    - name: readOnly\n      label: Read-Only Geolocation Fields\n      description: Read-only geolocation fields are not editable.\n    - name: fieldLevelHelp\n      label: Geolocation Fields with Field-Level Help\n      description: Field-level help guides users with information about the geolocation fields.\n---\n\nA `lightning-input-location` component represents a geolocation compound field\nthat accepts user input for a latitude and longitude value. Latitude and\nlongitude are geographic coordinates specified in decimal degrees. The\ngeolocation compound field allows you to identify locations by their latitude\nand longitude. The latitude field accepts values within -90 and 90, and the\nlongitude field accepts values within -180 and 180. An error message is\ndisplayed when you enter a value outside of the accepted range.\n\nHere are a few examples of latitudes: -30, 45, 37.12345678, -10.0. Values such\nas 90.5 or -90.5 are not valid latitudes.\n\nHere are a few examples of\nlongitudes: -100, -120.9762, 115.84. Values such as 180.5 or -180.5 are not\nvalid longitudes.\n\nThis example displays a geolocation compound field with a latitude of\n37.7938460 and a longitude of -122.3948370.\n\n```html\n<template>\n    <lightning-input-location\n        label=\"My Coordinates\"\n        latitude=\"37.7938460\"\n        longitude=\"-122.3948370\"\n    >\n    </lightning-input-location>\n</template>\n```\n\n#### Input Validation\n\nClient-side input validation is available for this component. You can require\nthe user to make a selection by including the `required` attribute. An error message\nis automatically displayed when a user interacts with the field but leaves it empty.\n\nTo check the validity states of an input, use the `validity` attribute, which\nis based on the `ValidityState` object. You can access the validity states in\nyour JavaScript. This `validity` attribute returns an object with\n`boolean` properties. For more information, see the\n[`lightning-input`](bundle/lightning-input/documentation) documentation.\n\n#### Custom Events\n\n**`change`**\n\nThe event fired when a value is changed in the `lightning-input-location` component.\n\nThe `change` event returns the following parameters.\n\n| Parameter | Type   | Description                    |\n| --------- | ------ | ------------------------------ |\n| latitude  | string | The latitude of the location.  |\n| longitude | string | The longitude of the location. |\n\nThe `change` event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                                                    |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | true  | This event propagates outside of the component in which it was dispatched.                                |\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputLocationBase extends LightningElement {}\n",
        "html": "<template>\n    <lightning-input-location label=\"No default coordinates\" ></lightning-input-location>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputLocationDefaultValues extends LightningElement {}\n",
        "html": "<template>\n    <lightning-input-location label=\"Default coordinates\" latitude=\"-15.1234\" longitude=\"99.5517\"></lightning-input-location>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputLocationDisabled extends LightningElement {}\n",
        "html": "<template>\n    <lightning-input-location label=\"Disabled\" latitude=\"-15.1234\" longitude=\"99.5517\" disabled ></lightning-input-location>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputLocationFieldLevelHelp extends LightningElement {}\n",
        "html": "<template>\n    <lightning-input-location label=\"fieldLevelHelp presents\" field-level-help=\"Field level text example\"></lightning-input-location>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputLocationReadOnly extends LightningElement {}\n",
        "html": "<template>\n    <lightning-input-location label=\"Read-only\" latitude=\"-15.1234\" longitude=\"99.5517\" readonly></lightning-input-location>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputLocationRequired extends LightningElement {}\n",
        "html": "<template>\n    <lightning-input-location label=\"Required\" latitude=\"-15.1234\" longitude=\"99.5517\" required ></lightning-input-location>\n</template>"
      }
    ]
  },
  {
    "tagName": "lightning-input-name",
    "shortDescription": "This component is a customizable input field for names, allowing users to input and edit various parts of a name, such as the salutation, first name, and last name, with options for field-level help, required fields, and disabled fields for a user-friendly experience.",
    "relatedComponents": {
      "lightning-input": "optional",
      "lightning-button": "optional"
    },
    "publicApi": [
      {
        "name": "fields-to-display",
        "typeSignature": "string[]",
        "examples": ["<lightning-input-name fields-to-display={fields}>"]
      },
      {
        "name": "first-name",
        "typeSignature": "string",
        "examples": ["<lightning-input-name first-name='John'>", "<lightning-input-name first-name={firstName}>"]
      },
      {
        "name": "middle-name",
        "typeSignature": "string",
        "examples": [
          "<lightning-input-name middle-name='Middleton'>",
          "<lightning-input-name middle-name={middleName}>"
        ]
      },
      {
        "name": "last-name",
        "typeSignature": "string",
        "examples": ["<lightning-input-name last-name='Doe'>", "<lightning-input-name last-name={lastName}>"]
      },
      {
        "name": "informal-name",
        "typeSignature": "string",
        "examples": ["<lightning-input-name informal-name='Jo'>", "<lightning-input-name informal-name={informalName}>"]
      },
      {
        "name": "suffix",
        "typeSignature": "string",
        "examples": ["<lightning-input-name suffix='The 3rd'>", "<lightning-input-name suffix={suffix}>"]
      },
      {
        "name": "salutation",
        "typeSignature": "string",
        "examples": ["<lightning-input-name salutation='Mr.'>", "<lightning-input-name salutation={salutation}>"]
      },
      {
        "name": "options",
        "typeSignature": "Array<{ label: string, value: string }>",
        "examples": ["<lightning-input-name options={salutationOptions}>"]
      },
      {
        "name": "onchange",
        "typeSignature": "(ev: CustomEvent & { detail: { salutation: string, firstName: string, middleName: string, lastName: string, informalName: string, suffix: string, validity: object } }) => void",
        "examples": ["<lightning-input-name onchange={handleChange}>"]
      }
    ],
    "useCases": [
      "Imagine you're filling out a form to register for a new service. The form asks for your full name, including your first name, middle name, last name, and any suffixes or titles you might have. The <lightning-input-name> component would be used to create this part of the form, allowing you to enter all parts of your name in separate fields.",
      "You're a customer service representative updating a customer's profile. The customer recently got married and changed their last name. You would use the <lightning-input-name> component to update the customer's last name in their profile.",
      "You're a user on a social media platform updating your profile. You want to add your nickname (informal name) to your profile. The <lightning-input-name> component would be used to add this new field to the profile editing interface."
    ],
    "docs": "---\nexamples:\n    - name: base\n      label: Basic Name Fields\n      description: Name fields can have predefined values.\n    - name: required\n      label: Required Name Fields\n      description: When name fields are marked as required, a field-level error is thrown if Last Name is blank.\n    - name: disabled\n      label: Disabled Name Fields\n      description: Disabled name fields are grayed out and you cannot interact with them.\n    - name: readOnly\n      label: Read-Only Name Fields\n      description: Read-only name fields are not editable.\n    - name: fieldLevelHelp\n      label: Name Fields with Field-Level Help\n      description: Field-level help guides users with information about the name fields.\n---\n\nA `lightning-input-name` component is a name compound field represented by HTML\n`input` elements of type `text`. The Salutation field is a dropdown menu that\naccepts an array of label-value pairs.\n\nBy default, `lightning-input-name` displays Salutation, First Name, and Last Name fields.\nUse the `fields-to-display` attribute to specify a different list of fields to display. The component supports these field names for `fields-to-display`.\n\n-   `firstName`\n-   `lastName`\n-   `middleName`\n-   `informalName`\n-   `suffix`\n-   `salutation`\n\nThe locale set in Salesforce user preferences determines the order the fields are presented.\n\nTo provide initial values for fields, specify the field names as attributes in the component, using the dash-separated format of the field names. For example, specify `first-name` instead of `firstName`. Use the `options` attribute to specify the values to display in the Salutation dropdown menu.\n\nThis example creates a simple input name, consisting of just the First Name and Last Name fields, without specifying initial values. The rendered fields display default placeholder text.\n\n```html\n<template>\n    <div>\n        <lightning-input-name label=\"My Name\" fields-to-display={fields}>\n        </lightning-input-name>\n    </div>\n</template>\n```\n\nJavaScript file:\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class InputName extends LightningElement {\n    fieldList = ['firstName', 'lastName'];\n    get fields() {\n        return this.fieldList;\n    }\n}\n```\n\nThis example creates an input name that specifies values for first name, middle\nname, last name, informal name, suffix. The Salutation dropdown menu is set to display\n\"Mr.\" by default. The `fields-to-display` attribute determines which fields are\nrendered. Although all possible fields are specified inside the component, only the\nFirst Name and Last Name display.\n\n```html\n<template>\n    <div>\n        <lightning-input-name\n            label=\"Contact Name\"\n            first-name=\"John\"\n            middle-name=\"Middleton\"\n            last-name=\"Doe\"\n            informal-name=\"Jo\"\n            suffix=\"The 3rd\"\n            salutation=\"Mr.\"\n            options={salutationOptions}\n            fields-to-display={fields}\n        >\n        </lightning-input-name>\n    </div>\n</template>\n```\n\nJavaScript file:\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class InputName extends LightningElement {\n    salutationsList = [\n        { label: 'Mr.', value: 'Mr.' },\n        { label: 'Ms.', value: 'Ms.' },\n        { label: 'Mrs.', value: 'Mrs.' },\n        { label: 'Dr.', value: 'Dr.' },\n        { label: 'Prof.', value: 'Prof.' },\n    ];\n\n    get salutationOptions() {\n        return this.salutationsList;\n    }\n\n    fieldList = ['firstName', 'lastName'];\n    get fields() {\n        return this.fieldList;\n    }\n}\n```\n\n`lightning-input-name` uses the `onchange` event handler to listen to a change to its field values.\n\n```html\n<p>Your first name: {firstname}</p>\n<lightning-input-name\n    label=\"Name\"\n    first-name={firstname}\n    middle-name=\"Middleton\"\n    last-name=\"Doe\"\n    options={salutationOptions}\n    onchange={handleChange}></lightning-input-name>\n```\n\nTo bind the input value on the name fields, use the `event.target` property.\n\n```js\nimport { LightningElement } from 'lwc';\n\nexport default class InputNameBase extends LightningElement {\n    firstname = 'John';\n    salutationsList = [\n        { label: 'Mr.', value: 'Mr.' },\n        { label: 'Ms.', value: 'Ms.' },\n        { label: 'Mrs.', value: 'Mrs.' },\n        { label: 'Dr.', value: 'Dr.' },\n        { label: 'Prof.', value: 'Prof.' },\n    ];\n\n    get salutationOptions() {\n        return this.salutationsList;\n    }\n\n    handleChange(event) {\n        this.firstname = event.target.firstName;\n    }\n}\n```\n\nSee the __Custom Events__ section for a list of `event.target` properties. For more information, see [Data Binding in a Template](https://developer.salesforce.com/docs/platform/lwc/guide/js-props-getter).\n\n#### Usage Considerations\n\nYou can use custom labels that display translated values. For more information, see the\n[Access Static Resources, Labels, Internationalization Properties, and User IDs](https://developer.salesforce.com/docs/platform/lwc/guide/create-global-value-providers).\n\nThis component uses `button` elements for dropdown menus to comply with the [Lightning Design System combobox blueprint](https://www.lightningdesignsystem.com/components/combobox/#%22Input%22-markup) for select-only comboboxes.\n\n#### Input Validation\n\nWhen you set `required`, a red asterisk is displayed on the Last Name\nfield to indicate that it's required. An error message is displayed below the\nLast Name field if a user interacted with it and left it blank. The `required`\nattribute is not enforced and you must validate it before submitting a form\nthat contains a name compound field.\n\nTo check the validity states of an input, use the `validity` attribute, which\nis based on the `ValidityState` object of the Constraint Validation API. You can access the validity states in\nyour JavaScript. This `validity` attribute returns an object with\n`boolean` properties. For more information, see the\n[`lightning-input`](bundle/lightning-input/documentation) documentation.\n\nLet's say you have a `lightning-button` component that calls the `handleClick`\nmethod. You can display the error message when a user clicks the\nbutton without providing a value for the Last Name field.\n\n```javascript\nhandleClick: () => {\n    var name = this.template.querySelector('lightning-input-name');\n    var isValid = name.checkValidity();\n    if (isValid) {\n        alert('Creating new contact for ' + this.name);\n    } else {\n        name.showHelpMessageIfInvalid();\n    }\n};\n```\n\nYou can override the default message by providing your own value for `messageWhenValueMissing`.\n\nTo programmatically display error messages on invalid fields, use the `reportValidity()` method. For custom validity error messages, display the message using `setCustomValidityForField()` and `reportValidity()`. For more information, see the [`lightning-input`](/docs/component-library/bundle/lightning-input/documentation) documentation.\n\n#### Custom Events\n\n**`change`**\n\nThe event fired when an item is changed in the `lightning-input-name` component.\n\nThe `change` event returns the following parameters.\n\n| Parameter    | Type   | Description                           |\n| ------------ | ------ | ------------------------------------- |\n| salutation   | string | The value of the salutation field.    |\n| firstName    | string | The value of the first name field.    |\n| middleName   | string | The value of the middle name field.   |\n| lastName     | string | The value of the last name field.     |\n| informalName | string | The value of the informal name field. |\n| suffix       | string | The value of the suffix field.        |\n| validity     | object | The validity state of the element.    |\n\nThe `change` event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                                                    |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | true  | This event propagates outside of the component in which it was dispatched.                                |\n\n#### See Also\n\n[Use Wire Service with Base Components](https://developer.salesforce.com/docs/platform/lwc/guide/data-wire-base-components)\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputNameBase extends LightningElement {\n    salutationsList = [\n        { label: 'Mr.', value: 'Mr.' },\n        { label: 'Ms.', value: 'Ms.' },\n        { label: 'Mrs.', value: 'Mrs.' },\n        { label: 'Dr.', value: 'Dr.' },\n        { label: 'Prof.', value: 'Prof.' },\n    ];\n\n    get salutationOptions() {\n        return this.salutationsList;\n    }\n}\n",
        "html": "<template>\n        <lightning-input-name\n        label=\"Default Input Name Field\"\n        first-name=\"John\"\n        middle-name=\"Middleton\"\n        last-name=\"Doe\"\n        informal-name=\"Jo\"\n        suffix=\"The 3rd\"\n        salutation=\"Mr.\"\n        options={salutationOptions} ></lightning-input-name>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputNameFieldLevelHelp extends LightningElement {\n    salutationsList = [\n        { label: 'Mr.', value: 'Mr.' },\n        { label: 'Ms.', value: 'Ms.' },\n        { label: 'Mrs.', value: 'Mrs.' },\n        { label: 'Dr.', value: 'Dr.' },\n        { label: 'Prof.', value: 'Prof.' },\n    ];\n\n    get salutationOptions() {\n        return this.salutationsList;\n    }\n}\n",
        "html": "<template>\n        <lightning-input-name\n        label=\"Disabled Input Name Field\"\n        disabled\n        first-name=\"John\"\n        middle-name=\"Middleton\"\n        last-name=\"Doe\"\n        informal-name=\"Jo\"\n        suffix=\"The 3rd\"\n        salutation=\"Mr.\"\n        options={salutationOptions} ></lightning-input-name>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputNameFieldLevelHelp extends LightningElement {\n    salutationsList = [\n        { label: 'Mr.', value: 'Mr.' },\n        { label: 'Ms.', value: 'Ms.' },\n        { label: 'Mrs.', value: 'Mrs.' },\n        { label: 'Dr.', value: 'Dr.' },\n        { label: 'Prof.', value: 'Prof.' },\n    ];\n\n    get salutationOptions() {\n        return this.salutationsList;\n    }\n}\n",
        "html": "<template>\n        <lightning-input-name\n        label=\"Input Name Field with field level help\"\n        first-name=\"John\"\n        middle-name=\"Middleton\"\n        last-name=\"Doe\"\n        informal-name=\"Jo\"\n        suffix=\"The 3rd\"\n        salutation=\"Mr.\"\n        options={salutationOptions}\n        field-level-help=\"Help Text for input-name field\" ></lightning-input-name>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputNameReadOnly extends LightningElement {\n    salutationsList = [\n        { label: 'Mr.', value: 'Mr.' },\n        { label: 'Ms.', value: 'Ms.' },\n        { label: 'Mrs.', value: 'Mrs.' },\n        { label: 'Dr.', value: 'Dr.' },\n        { label: 'Prof.', value: 'Prof.' },\n    ];\n\n    get salutationOptions() {\n        return this.salutationsList;\n    }\n}\n",
        "html": "<template>\n        <lightning-input-name\n        label=\"Readonly Input Name Field\"\n        readonly\n        first-name=\"John\"\n        middle-name=\"Middleton\"\n        last-name=\"Doe\"\n        informal-name=\"Jo\"\n        suffix=\"The 3rd\"\n        salutation=\"Mr.\"\n        options={salutationOptions} ></lightning-input-name>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class InputNameRequired extends LightningElement {\n    salutationsList = [\n        { label: 'Mr.', value: 'Mr.' },\n        { label: 'Ms.', value: 'Ms.' },\n        { label: 'Mrs.', value: 'Mrs.' },\n        { label: 'Dr.', value: 'Dr.' },\n        { label: 'Prof.', value: 'Prof.' },\n    ];\n\n    fieldsList = ['firstName', 'lastName'];\n\n    get salutationOptions() {\n        return this.salutationsList;\n    }\n\n    get fields() {\n        return this.fieldsList;\n    }\n}\n",
        "html": "<template>\n        <lightning-input-name\n        label=\"Required Input Name Field\"\n        required\n        first-name=\"John\"\n        middle-name=\"Middleton\"\n        last-name=\"Doe\"\n        informal-name=\"Jo\"\n        suffix=\"The 3rd\"\n        salutation=\"Mr.\"\n        options={salutationOptions}\n        fields-to-display={fields} ></lightning-input-name>\n</template>"
      }
    ]
  },
  {
    "tagName": "lightning-internationalization-library",
    "shortDescription": "This component is a utility that aids in the transition from Aura's localization service to a universal solution based on standards, providing a seamless experience in formatting and parsing dates/times regardless of the environment in which a component is run.",
    "relatedComponents": {
      "lightning-i18n-service": "required",
      "lightning-i18n-cldr-options": "required"
    },
    "publicApi": [],
    "useCases": [
      "Imagine you're using a web application that displays dates and times. If you're in the United States, you might see the date as 'MM/DD/YYYY', but if you're in the United Kingdom, you'd expect to see 'DD/MM/YYYY'. The <lightning-internationalization-library> component helps the application display the date in the format that's familiar to you, based on your location.",
      "Consider a web application that shows prices of products. If you're in the United States, you'd expect to see the price in dollars, but if you're in Japan, you'd expect to see the price in yen. The <lightning-internationalization-library> component helps the application display the price in the currency that's relevant to you, based on your location.",
      "Suppose you're using a web application that displays numbers. In some countries, a comma is used to separate thousands, while in others, a period is used. The <lightning-internationalization-library> component helps the application display numbers in the format that's familiar to you, based on your location."
    ],
    "docs": "# internationalizationLibrary\n\nCurrently, the code base contains logic that directs execution in two different paths, depending whether a component is being executed on the platform vs off. That logic, was intented to aid the migration off the current Aura's localization service, in favor of an unified and universal solution based on standards, that could be consumed on any enviroment.\n\nSuch logic can be detailed, on a high level as follows, at run time a path execution decides that:\n\nif a component is run on the platform, it will make use of Aura's localization Service to format and parse dates/times.\nif a component is run anywhere else, it will use the globalization i18n-service\n\n## When to use this utility\n\nBecause of our legacy support and backward compatiblity contracts, we use this utility as a facade, with the hope that once we are able to fully deprecate Aura's Localization service, this utility will help us to transition into [localizerjs](https://git.soma.salesforce.com/Globalization/localizerjs).\n\nIf you have an existing component that maps to any of the Aura's localization service methods, this module will aid with that.\n\n## Our recommmended approach\n\n- For declarative usage, use our localization specific components, they will work both off/on platform.\n- For low level, programatic usage, dealing with dates/times/numbers etc. use [localizerjs](https://git.soma.salesforce.com/Globalization/localizerjs). The next section covers more on usage and how these utiltiies are exposed.\n\n## Access/Exposure/Usage\n\n1. [internationalizationLibrary](https://github.com/salesforce-experience-platform-emu/lightning-components/tree/master/ui-lightning-components/src/main/modules/lightning/internationalizationLibrary) as a module is not exposed on the platform, but it's part of our NPM package.\n2. [localizerjs](https://git.soma.salesforce.com/Globalization/localizerjs) is maintained by the Globalization team, however, we expose it as part of Lightning. For example [i18nService](https://github.com/salesforce-experience-platform-emu/lightning-components/tree/master/ui-lightning-components/src/main/modules/lightning/i18nService). All usage of `localizerjs` should be consumed as `lightning/i18nService` and `lightning/i18nCldrOptions`. This is exposed on the platform internally and available as part of our NPM package.\n",
    "examples": []
  },
  {
    "tagName": "lightning-layout",
    "shortDescription": "This component is a flexible grid system that allows for the arrangement of containers within a page or another container, providing a customizable layout experience with options for horizontal and vertical alignment, boundary pulling, and column creation.",
    "relatedComponents": {
      "lightning-layout-item": "required"
    },
    "publicApi": [
      {
        "name": "horizontal-align",
        "typeSignature": "string",
        "examples": [
          "<lightning-layout horizontal-align='center'>",
          "<lightning-layout horizontal-align='space'>",
          "<lightning-layout horizontal-align='spread'>",
          "<lightning-layout horizontal-align='end'>"
        ]
      },
      {
        "name": "vertical-align",
        "typeSignature": "string",
        "examples": [
          "<lightning-layout vertical-align='start'>",
          "<lightning-layout vertical-align='center'>",
          "<lightning-layout vertical-align='end'>",
          "<lightning-layout vertical-align='stretch'>"
        ]
      },
      {
        "name": "pull-to-boundary",
        "typeSignature": "string",
        "examples": [
          "<lightning-layout pull-to-boundary='small'>",
          "<lightning-layout pull-to-boundary='medium'>",
          "<lightning-layout pull-to-boundary='large'>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're designing a webpage for a news site. You want to have a main column for the news articles, and a smaller side column for advertisements and additional information. You could use the <lightning-layout> component to create these two columns, setting the size attribute on the <lightning-layout-item> to control the width of each column.",
      "On a company's internal website, there's a page where employees can view and update their personal information. The page is divided into several sections, such as contact information, emergency contacts, and employment history. Each section is a separate column, and within each column, the individual pieces of information are arranged vertically. The <lightning-layout> component could be used to create this layout, with the vertical-align attribute set to 'start' so that the information in each column starts at the top.",
      "Consider a photography website where the homepage displays a grid of thumbnails of the photographer's best work. When the page is viewed on a larger screen, the thumbnails are arranged in four columns, but on a smaller screen, they stack into a single column. The <lightning-layout> component could be used to create this responsive layout, with the flexibility attribute set to 'auto' on the <lightning-layout-item> components.",
      "On an e-commerce site, there's a product page that displays a large image of the product, a title, a price, a description, and a 'Buy Now' button. All of these elements are centered vertically and horizontally on the page. The <lightning-layout> component could be used to create this layout, with the horizontal-align and vertical-align attributes both set to 'center'.",
      "In a blog site, there's a page that displays a list of all the blog posts. Each post is represented by a card that includes a title, a short excerpt, and a 'Read More' button. The cards are arranged in a grid with three columns, and there's space between each card. The <lightning-layout> component could be used to create this layout, with the horizontal-align attribute set to 'space' to create the space between the cards."
    ],
    "docs": "---\nexamples:\n    - name: simple\n      label: Simple Layout\n      description: A layout can include layout items as columns.\n    - name: nested\n      label: Nested Page Layout\n      description: A layout item can contain nested layouts.\n    - name: horizontalAlignSpace\n      label: Layout with a Horizontal Align (Space)\n      description: Position layout items horizontally across the container, with space before, between, and after the items.\n    - name: horizontalAlignSpread\n      label: Layout with a Horizontal Align (Spread)\n      description: Position layout items horizontally across the container, with space between the items.\n    - name: verticalAlignCenter\n      label: Layout with a Vertical Align (Center)\n      description: Position layout items vertically in the center of the container.\n    - name: verticalAlignStretch\n      label: Layout with a Vertical Align (Stretch)\n      description: Stretch out layout items vertically to fill the container.\n    - name: pullToBoundary\n      label: Layout with PullToBoundary Attribute\n      description: Pull layout items to the edges of the container.\n---\n\nA `lightning-layout` is a flexible grid system for arranging containers within\na page or inside another container. The default layout is mobile-first and can\nbe easily configured to work on different devices.\n\nCreate the content of the layout by including `lightning-layout-item` components\nwithin `lightning-layout`. You can place HTML tags and text between the `lightning-layout-item`\ncomponents, but you can't place other components or expressions between them.\n\nThis component inherits styling from the\n[grid utility classes](https://lightningdesignsystem.com/utilities/grid/) in the\nLightning Design System.\n\nThe layout can be customized by setting the following attributes.\n\n#### `horizontal-align`\n\nSpread layout items out horizontally based on the following values.\n\n-   `center`: Appends the `slds-grid_align-center` class to the grid. This attribute orders the layout items into a horizontal line without any spacing, and places the group into the center of the container.\n-   `space`: Appends the `slds-grid_align-space` class to the grid. The layout items are spaced horizontally across the container, starting and ending with a space.\n-   `spread`: Appends the `slds-grid_align-spread` class to the grid. The layout items are spaced horizontally across the container, starting and ending with a layout item.\n-   `end`: Appends the `slds-grid_align-end` class to the grid. The layout items are grouped together and aligned horizontally on the right side of the container.\n\n#### `vertical-align`\n\nSpread layout items out vertically based on the following values.\n\n-   `start`: Appends the `slds-grid_vertical-align-start` class to the grid. The layout items are aligned at the top of the container.\n-   `center`: Appends the `slds-grid_vertical-align-center` class to the grid. The layout items are aligned in the center of the container.\n-   `end`: Appends the `slds-grid_vertical-align-end` class to the grid. The layout items are aligned at the bottom of the container.\n-   `stretch`: Appends the `slds-grid_vertical-stretch` class to the grid. The layout items extend vertically to fill the container.\n\n#### `pull-to-boundary`\n\nPull layout items to the layout boundaries based on the following values. If\npadding is used on layout items, this attribute pulls the elements on either\nside of the container to the boundary. Choose the size that corresponds to the\npadding on your layout items. For instance, if\n`lightning-layout-item padding=\"horizontalSmall\"`, choose `pull-to-boundary=\"small\"`.\n\n-   `small`: Appends the `slds-grid_pull-padded` class to the grid.\n-   `medium`: Appends the `slds-grid_pull-padded-medium` class to the grid.\n-   `large`: Appends the `slds-grid_pull-padded-large` class to the grid.\n\nUse the `class` or `multiple-rows` attributes to customize the styling in other\nways.\n\n#### Creating Columns\n\n`lightning-layout` enables you to create several types of columns.\n\n-   Flexible widths that adjust based on their content\n-   Fixed widths that take up a percentage of the container\n\nCreate a simple layout by enclosing single or multiple `lightning-layout-item` components within `lightning-layout`. `lightning-layout-item` creates a column within `lightning-layout`.\n\nTo create columns with widths that are based on their content, use `flexibility=\"auto\"`. The `horizontal-align` attribute determines how to spread the layout items horizontally. Here is an example that creates columns with flexible widths.\n\n```html\n<template>\n    <div class=\"c-container\">\n        <lightning-layout horizontal-align={horizontalAlign}>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                1\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                2\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                3\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                4\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n```\n\nSet the horizontal alignment to `space`, which evenly distributes columns horizontally with an equal amount of space separating the columns.\n\n```javascript\nimport { LightningElement, api } from 'lwc';\n\nexport default class MyLayout extends LightningElement {\n    @api horizontalAlign = 'space';\n}\n```\n\nTo create columns with fixed widths, use the `size` attribute on `lightning-layout-item`. For example, to create two columns where the width of the first column is 33% of the grid container and the second column is 66% of the grid container, use `size=\"4\"` and `size=\"8\"`.\n\n```html\n<lightning-layout>\n    <lightning-layout-item size=\"4\"> Column 1 content </lightning-layout-item>\n    <lightning-layout-item size=\"8\"> Column 2 content </lightning-layout-item>\n</lightning-layout>\n```\n\nFor more information, see the [SLDS grid utility classes](https://lightningdesignsystem.com/utilities/grid/), and [SLDS sizing utility classes](https://www.lightningdesignsystem.com/utilities/sizing/).\n\n#### Usage Considerations\n\n`lightning-layout` is not supported in IE11. To create a flexible grid system for IE11, use `<div>` containers with SLDS grid classes.\n\nThis example creates the same layout shown in **Creating Columns**,\nwhich creates two columns with fixed widths.\n\n```html\n<div class=\"slds-grid\">\n    <div class=\"slds-col slds-size_1-of-3\">Column 1 content</div>\n    <div class=\"slds-col slds-size_2-of-3\">Columns 2 content</div>\n</div>\n```\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutSpace extends LightningElement {}\n",
        "html": "<template>\n        <p>The layout items are spaced horizontally across the container, starting and ending with a space, using attribute <code>horizontal-align=\"space\"</code>.</p>\n    <div class=\"c-container\">\n        <lightning-layout horizontal-align=\"space\">\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">1</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">2</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">3</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">4</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">5</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">6</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">7</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">8</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".c-container {\n    border: 1px solid #d8dde6;\n    margin: 10px 0 20px;\n}\n\n.custom-box {\n    text-align: center;\n    background-color: #f4f6f9;\n    padding: 1rem;\n    border: 1px solid #d8dde6;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutSpread extends LightningElement {}\n",
        "html": "<template>\n        <p>The layout items are spaced horizontally across the container, starting and ending with a layout item using attribute <code>horizontal-align=\"spread\"</code>.</p>\n    <div class=\"c-container\">\n        <lightning-layout horizontal-align=\"spread\">\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">1</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">2</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">3</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">4</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">5</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">6</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">7</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box\">8</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".c-container {\n    border: 1px solid #d8dde6;\n    margin: 10px 0 20px;\n}\n\n.custom-box {\n    text-align: center;\n    background-color: #f4f6f9;\n    padding: 1rem;\n    border: 1px solid #d8dde6;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutNested extends LightningElement {}\n",
        "html": "<template>\n        <p>This example creates a three column page layout with a container-wide header using nested <code>lightning-layout</code> components. A <code>lightning-layout-item</code> of size=\"12\" wraps the <code>lightning-layout</code> that contains multiple layout items.</p>\n    <div class=\"c-container\">\n            <lightning-layout multiple-rows=\"true\">\n                <lightning-layout-item padding=\"around-small\" size=\"12\">\n                    <div class=\"page-section page-header\">\n                        <h2>Header</h2>\n                    </div>\n                </lightning-layout-item>\n                <lightning-layout-item padding=\"around-small\" size=\"12\">\n                    <lightning-layout>\n                        <lightning-layout-item padding=\"around-small\" size=\"3\">\n                            <div class=\"page-section page-right\">\n                                <h2>Left Sidebar</h2>\n                                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n                                    ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n                                    ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit\n                                    in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n                                    cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n                                </p>\n                            </div>\n                        </lightning-layout-item>\n                        <lightning-layout-item padding=\"around-small\" size=\"6\">\n                            <div class=\"page-section page-main\">\n                                <h2>Main</h2>\n                                <p>Donec viverra pellentesque aliquet. Praesent quis tristique mauris, ac tincidunt ante.\n                                    Nulla lectus nisi, tempor quis malesuada ac, consequat in velit. Nullam aliquam mauris eu magna\n                                    dictum, in ornare risus convallis. Nunc condimentum ornare libero sit amet rhoncus. Aliquam tellus nisl,\n                                    tristique sit amet congue in, tristique vel risus. Morbi leo ligula, blandit nec commodo at, pulvinar\n                                    vitae libero. Mauris ipsum erat, aliquam a turpis vitae, faucibus viverra arcu. Donec id purus\n                                    luctus enim elementum molestie sit amet ac libero.\n                                </p>\n                                <p>Mauris cursus felis elementum ipsum placerat, in maximus justo pretium. Nam nec sapien\n                                    maximus justo feugiat tristique. Mauris viverra erat vitae arcu feugiat, sed posuere purus vulputate.\n                                    Sed et nulla ut magna iaculis fringilla. Integer eget blandit elit. Phasellus nulla augue, lobortis a\n                                    elementum tempus, auctor et felis. Fusce quis lorem tincidunt risus ullamcorper pharetra. Sed elit\n                                    nulla, efficitur a lorem quis, mollis tristique elit. Etiam odio libero, ornare sed vehicula\n                                    in, sagittis et erat. Integer at justo molestie, suscipit dui vel, scelerisque ex. Nulla non metus\n                                    pulvinar, egestas neque et, tincidunt tellus. Praesent egestas scelerisque tristique. Nullam\n                                    sodales ex acmetus tincidunt accumsan. Cras vitae consequat odio. Pellentesque facilisis lobortis\n                                    lorem, at placerat mauris sagittis a.\n                                </p>\n                            </div>\n                        </lightning-layout-item>\n                        <lightning-layout-item padding=\"around-small\" size=\"3\">\n                            <div class=\"page-section page-right\">\n                                <h2>Right Sidebar</h2>\n                                <ul>\n                                    <li><a href=\"#\">Archive 1</a>\n                                    </li>\n                                    <li><a href=\"#\">Archive 2</a>\n                                    </li>\n                                    <li><a href=\"#\">Archive 3</a>\n                                    </li>\n                                    <li><a href=\"#\">Archive 4</a>\n                                    </li>\n                                    <li><a href=\"#\">Archive 5</a>\n                                    </li>\n                                </ul>\n                            </div>\n                        </lightning-layout-item>\n                    </lightning-layout>\n                </lightning-layout-item>\n                <lightning-layout-item flexibility=\"auto\" padding=\"around-small\" size=\"12\">\n                    <div class=\"page-footer page-section\">\n                        <h2>Footer</h2>\n                    </div>\n                </lightning-layout-item>\n            </lightning-layout>\n        </div>\n</template>\n",
        "css": ".c-container {\n    border: 1px solid #d8dde6;\n    margin: 10px 0 20px;\n}\n\n.page-section {\n    border: solid 1px #ccc;\n    padding: 1rem;\n}\n\n.page-header,\n.page-footer {\n    height: 50px;\n}\n\n.page-main {\n    background: #f8f8f8;\n}\n\n.page-left,\n.page-right {\n    background: #f0efef;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutPullToBoundary extends LightningElement {}\n",
        "html": "<template>\n        <p>The <code>pull-to-boundary</code> attribute pulls the items to each side of the container. Element 1 and 4 display without padding on their outer edges and go all the way to the edges of the container.</p>\n    <div class=\"c-container\">\n        <lightning-layout pull-to-boundary=\"medium\">\n            <lightning-layout-item flexibility=\"auto\" padding=\"horizontal-medium\">\n                <div class=\"custom-box\">1</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"horizontal-medium\">\n                <div class=\"custom-box\">2</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"horizontal-medium\">\n                <div class=\"custom-box\">3</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"horizontal-medium\">\n                <div class=\"custom-box\">4</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".c-container {\n    border: 1px solid #d8dde6;\n    margin: 10px 0 20px;\n}\n\n .custom-box {\n    text-align: center;\n    background-color: #f4f6f9;\n    padding: 1rem;\n    border: 1px solid #d8dde6;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutSimple extends LightningElement {}\n",
        "html": "<template>\n        <p>This example creates a simple layout with field headers.</p>\n    <div class=\"c-container\">\n        <lightning-layout>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"header-column\">\n                    <p class=\"field-title\" title=\"Field 1\">Field 1</p>\n                    <p>Name</p>\n                </div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"header-column\">\n                    <p class=\"field-title\" title=\"Field2 (3)\">Field 2 (3)\n                        <lightning-button-icon icon-name=\"utility:down\" variant=\"border-filled\" size=\"small\" alternative-text=\"More Actions\"></lightning-button-icon>\n                    </p>\n                    <p>Eligibility</p>\n                </div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"header-column\">\n                    <p class=\"field-title\" title=\"Field 3\">Field 3</p>\n                    <a href=\"#\">Website</a>\n                </div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"header-column\">\n                    <p class=\"field-title\" title=\"Field 4\">Field 4</p>\n                    <p>\n                        <span title=\"\">Address</span>\n                    </p>\n                </div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".c-container {\n    border: 1px solid #d8dde6;\n    margin: 10px 0 20px;\n}\n\n.header-column {\n    padding: 0 2rem;\n}\n\n.field-title {\n    font-size: .75rem;\n    line-height: 1.25;\n    color: #54698d;\n    margin-bottom: .25rem;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutCenter extends LightningElement {}\n",
        "html": "<template>\n        <p>The layout items are aligned in the center of the container.</p>\n    <div class=\"c-container\">\n        <lightning-layout vertical-align=\"center\" class=\"x-large\">\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box\">1</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box\">2</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box\">3</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box\">4</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box\">5</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box\">6</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box\">7</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box\">8</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".c-container {\n    border: 1px solid #d8dde6;\n    margin: 10px 0 20px;\n}\n\n .large {\n    height: 200px;\n}\n\n .x-large {\n    height: 300px;\n}\n\n .custom-box {\n    text-align: center;\n    background-color: #f4f6f9;\n    padding: 1rem;\n    border: 1px solid #d8dde6;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutStretch extends LightningElement {}\n",
        "html": "<template>\n        <p>The layout items extend vertically to fill the container.</p>\n    <div class=\"c-container\">\n        <lightning-layout vertical-align=\"stretch\" multiple-rows=\"true\" class=\"x-large\">\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\" class=\"custom-box\">\n                1\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\" class=\"custom-box\">\n                2\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\" class=\"custom-box\">\n                3\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\" class=\"custom-box\">\n                4\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".c-container {\n    border: 1px solid #d8dde6;\n    margin: 10px 0 20px;\n}\n\n .large {\n    height: 200px;\n}\n\n .x-large {\n    height: 300px;\n}\n\n .custom-box {\n    text-align: center;\n    background-color: #f4f6f9;\n    padding: 1rem;\n    border: 1px solid #d8dde6;\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-layout-item",
    "shortDescription": "This component is used to define and arrange content within a layout, with the ability to configure the size and flexibility of the layout item, allowing for adaptive design across different device sizes.",
    "relatedComponents": {
      "lightning-layout": "required"
    },
    "publicApi": [
      {
        "name": "size",
        "typeSignature": "string",
        "examples": ["<lightning-layout-item size=\"12\">", "<lightning-layout-item size={itemSize}>"]
      },
      {
        "name": "small-device-size",
        "typeSignature": "string",
        "examples": [
          "<lightning-layout-item small-device-size=\"6\">",
          "<lightning-layout-item small-device-size={smallDeviceSize}>"
        ]
      },
      {
        "name": "medium-device-size",
        "typeSignature": "string",
        "examples": [
          "<lightning-layout-item medium-device-size=\"8\">",
          "<lightning-layout-item medium-device-size={mediumDeviceSize}>"
        ]
      },
      {
        "name": "large-device-size",
        "typeSignature": "string",
        "examples": [
          "<lightning-layout-item large-device-size=\"10\">",
          "<lightning-layout-item large-device-size={largeDeviceSize}>"
        ]
      },
      {
        "name": "flexibility",
        "typeSignature": "string",
        "examples": [
          "<lightning-layout-item flexibility=\"auto\">",
          "<lightning-layout-item flexibility={flexibilityValue}>"
        ]
      },
      {
        "name": "padding",
        "typeSignature": "string",
        "examples": [
          "<lightning-layout-item padding=\"around-small\">",
          "<lightning-layout-item padding={paddingValue}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're browsing a clothing website on your phone. The website uses the <lightning-layout-item> component to display different clothing items side by side. As you rotate your phone to landscape mode, the layout automatically adjusts to show more items side by side, making use of the extra space.",
      "On a news website, articles are displayed in a grid format. Each article is a <lightning-layout-item> component. When you open the website on your tablet, the layout adjusts to show more articles side by side. If you open the same website on your desktop, even more articles are displayed side by side, making efficient use of the larger screen.",
      "You're using a project management app on your laptop. The app uses <lightning-layout-item> components to display different tasks. Each task takes up a certain amount of space depending on its content. If a task has a lot of details, it takes up more space. If a task has few details, it takes up less space.",
      "On a music streaming website, each song in the playlist is a <lightning-layout-item> component. The song title, artist name, and album cover are displayed side by side. There's also some space between each song in the playlist, making it easy to distinguish between different songs.",
      "You're browsing a photo gallery app on your tablet. Each photo is a <lightning-layout-item> component. The photos are displayed in a grid, with some padding around each photo. This padding helps separate the photos from each other, making the gallery easy to browse.",
      "On a weather app, each day's forecast is a <lightning-layout-item> component. The forecast for today takes up more space, showing more details. The forecasts for the next few days take up less space, showing only the most important details. As you switch from your phone to your tablet, the layout adjusts to show more details for each day."
    ],
    "docs": "---\nexamples:\n    - name: default\n      label: Layout Items with Default Attributes\n      description: Layout items take the size of their content by default.\n    - name: flexibility\n      label: Layout Items with Auto Flexibility\n      description: Layout items can take the entire width of the container.\n    - name: flexibilityValues\n      label: Layout Items with no-grow Flexibility\n      description: Layout items can remove additional space in the container beyond the content width.\n    - name: size\n      label: Layout Items with Size Attribute\n      description: Layout items can occupy different widths relative to the viewport.\n    - name: sizePerDevice\n      label: Layout Items With Device-Specific Sizes\n      description: Layout items can vary their widths depending on the device.\n    - name: sizeOverriddenForTablets\n      label: Layout Item Sizes for Tablets and Above\n      description: Layout items can specify widths for tablet devices and larger.\n    - name: padding\n      label: Layout Items with Side Padding\n      description: Layout items can enforce padding on their sides.\n    - name: alignmentBump\n      label: Layout Items with Horizontal Margin\n      description: Layout items can enforce a margin to bump the alignment of adjacent layout items.\n---\n\nA `lightning-layout-item` defines content to display within `lightning-layout`. You\ncan arrange one or more `lightning-layout-item` components inside `lightning-layout`.\n\nThe `lightning-layout-item` components must be adjacent, with no other components or expressions between them.\n\nUse the attributes\nof `lightning-layout-item` to configure the size of the layout item,\nand change how the layout is configured on different device sizes.\n\nThe layout system is mobile-first. Typically, the `small-device-size` attribute indicates a smart phone,\n`medium-device-size` indicates a tablet, and `large-device-size` indicates a desktop or larger device.\n\nIf you specify the `small-device-size`, `medium-device-size`, or `large-device-size` attributes, you must also\nspecify the `size` attribute.\n\nIf you specify the `size` and `small-device-size`\nattributes, the `size` attribute applies to small mobile\nphones, and the `small-device-size` applies to smart phones. The device sizing\nattributes are additive and apply to devices of the specified size and larger. For\nexample, if you set `medium-device-size=10` and don't set `large-device-size`, then\nthe `medium-device-size` setting applies to tablets, desktops, and larger\ndevices. You'd also have to set `size` to apply to devices smaller than tablets.\n\nFor general information on sizing, see [Lightning Design System](https://www.lightningdesignsystem.com/utilities/sizing/#overview).\n\nUse the `flexibility` attribute to specify how the layout item adapts to the size of its container.\nWith default attribute values of size and flexibility, layout items take the size of their content and don't\noccupy the entire width of the container.\n\nHere is an example using default values.\n\n```html\n<template>\n    <div>\n        <lightning-layout>\n            <lightning-layout-item padding=\"around-small\">\n                <div>1</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div>2</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div>3</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div>4</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n```\n\n#### Usage Considerations\n\nThis component has usage differences from its Aura counterpart. See [Base Components: Aura Vs Lightning Web Components](https://developer.salesforce.com/docs/platform/lwc/guide/migrate-map-aura-lwc-components) in the Lightning Web Components Developer Guide.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutItemAlignmentBump extends LightningElement {}\n",
        "html": "<template>\n        <p>The third layout items specify <code>alignment-bump=\"left\"</code> to create a margin to its left. The margin is the width of the unused horizontal space.</p>\n    <div class=\"slds-m-top_x-small slds-m-bottom_medium slds-m-horizontal_none slds-box slds-p-around_none\">\n        <lightning-layout>\n            <lightning-layout-item>\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">1</div>\n            </lightning-layout-item>\n            <lightning-layout-item>\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">2</div>\n            </lightning-layout-item>\n            <lightning-layout-item alignment-bump=\"left\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">3</div>\n            </lightning-layout-item>\n            <lightning-layout-item>\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">4</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".custom-box {\n    background-color: #f4f6f9;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutItemDefault extends LightningElement {}\n",
        "html": "<template>\n        <p>With default attribute values of <code>size</code> and <code>flexibility</code>, layout items take the size of their content and don't occupy entire width of the container.</p>\n    <div class=\"slds-box slds-p-around_none slds-m-top_x-small slds-m-bottom_medium slds-m-horizontal_none\">\n        <lightning-layout>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">1</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">2</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">3</div>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">4</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".custom-box {\n    background-color: #f4f6f9;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutItemFlexibility extends LightningElement {}\n",
        "html": "<template>\n        <p>The layout items below become as wide as necessary to occupy the entire width of the container with <code>flexibility=\"auto\"</code>.</p>\n    <div class=\"slds-box slds-p-around_none slds-m-top_x-small slds-m-bottom_medium slds-m-horizontal_none\">\n        <lightning-layout>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">1</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">2</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">3</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">4</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".custom-box {\n    background-color: #f4f6f9;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutItemFlexibilityValues extends LightningElement {}\n",
        "html": "<template>\n        <p>The third layout item adds a value of <code>\"no-grow\"</code> to the <code>flexibility</code> attribute. No space is assigned to that item in the container beyond the width of the content.</p>\n    <div class=\"slds-box slds-p-around_none slds-m-top_x-small slds-m-bottom_medium slds-m-horizontal_none\">\n        <lightning-layout>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">1</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">2</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto, no-grow\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">3</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">4</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".custom-box {\n    background-color: #f4f6f9;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutItemPadding extends LightningElement {}\n",
        "html": "<template>\n        <p>These layout items specify <code>padding=\"horizontal-medium\"</code> to give each item medium padding on its left and right sides.</p>\n    <div class=\"slds-box slds-p-around_none slds-m-top_x-small slds-m-bottom_medium slds-m-horizontal_none\">\n        <lightning-layout>\n            <lightning-layout-item flexibility=\"auto\" padding=\"horizontal-medium\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">1</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"horizontal-medium\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">2</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"horizontal-medium\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">3</div>\n            </lightning-layout-item>\n            <lightning-layout-item flexibility=\"auto\" padding=\"horizontal-medium\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">4</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".custom-box {\n    background-color: #f4f6f9;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutItemSize extends LightningElement {}\n",
        "html": "<template>\n        <p>These layout items specify <code>size=\"4\"</code>, or 4 columns of a 12 column grid. Each item occupies 33.33% of the width.</p>\n    <div class=\"slds-box slds-p-around_none slds-m-top_x-small slds-m-bottom_medium slds-m-horizontal_none\">\n        <lightning-layout multiple-rows>\n            <lightning-layout-item size=\"4\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">1</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"4\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">2</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"4\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">3</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"4\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">4</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".custom-box {\n    background-color: #f4f6f9;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutItemSizeOverriddenForTablets extends LightningElement {}\n",
        "html": "<template>\n        <p>Layout with items having default size 6 and and size set to 3 for medium. The medium size is used for devices like tablets and wider than tablets, such as desktop monitors. The default size is used for devices narrower than tablets, such as smart phones. For more information about device sizes, see the <a href=\"https://lightningdesignsystem.com/utilities/grid/\" target=\"_blank\">Lightning Design System website</a>.</p>\n    <div class=\"slds-box slds-p-around_none slds-m-top_x-small slds-m-bottom_medium slds-m-horizontal_none\">\n        <lightning-layout multiple-rows>\n            <lightning-layout-item size=\"6\" medium-device-size=\"3\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">1</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"6\" medium-device-size=\"3\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">2</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"6\" medium-device-size=\"3\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">3</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"6\" medium-device-size=\"3\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">4</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".custom-box {\n    background-color: #f4f6f9;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleLayoutItemSizePerDevice extends LightningElement {}\n",
        "html": "<template>\n        <p>These layout items specify size with device sizes. The value <code>size=\"12\"</code> is applied to a small mobile phone and the <code>device-size</code> attributes are applied to larger devices progressively. For more information about device sizes, see the <a href=\"https://lightningdesignsystem.com/utilities/grid/\" target=\"_blank\">Lightning Design System website</a>.</p>\n\n    <div class=\"slds-box slds-p-around_none slds-m-top_x-small slds-m-bottom_medium slds-m-horizontal_none\">\n        <lightning-layout multiple-rows>\n            <lightning-layout-item size=\"12\" small-device-size=\"6\" medium-device-size=\"4\" large-device-size=\"3\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">1</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"12\" small-device-size=\"6\" medium-device-size=\"4\" large-device-size=\"3\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">2</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"12\" small-device-size=\"6\" medium-device-size=\"4\" large-device-size=\"3\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">3</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"12\" small-device-size=\"6\" medium-device-size=\"4\" large-device-size=\"3\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">4</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"12\" small-device-size=\"6\" medium-device-size=\"4\" large-device-size=\"3\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">5</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"12\" small-device-size=\"6\" medium-device-size=\"4\" large-device-size=\"3\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">6</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"12\" small-device-size=\"6\" medium-device-size=\"4\" large-device-size=\"3\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">7</div>\n            </lightning-layout-item>\n            <lightning-layout-item size=\"12\" small-device-size=\"6\" medium-device-size=\"4\" large-device-size=\"3\" padding=\"around-small\">\n                <div class=\"custom-box slds-box slds-p-around_medium slds-text-align_center\">8</div>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".custom-box {\n    background-color: #f4f6f9;\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-media-utils",
    "shortDescription": "This component provides utility functions for processing media files, allowing developers to resize, compress, and modify images according to specified parameters, enhancing the user's experience by optimizing image uploads and reducing bandwidth usage.",
    "relatedComponents": {
      "lightning-input": "optional"
    },
    "publicApi": [],
    "useCases": [
      "Imagine you're a photographer who wants to upload a batch of high-resolution photos to a website for your clients to view. However, you're concerned about the large file sizes of your photos and the potential for slow upload and download speeds. The <lightning-media-utils> component can be used to automatically resize and compress your photos before they're uploaded, ensuring a smoother and faster experience for both you and your clients.",
      "You're a graphic designer who needs to upload a series of images to a web-based portfolio. Some of these images have different dimensions and you want them all to appear uniform on your portfolio page. The <lightning-media-utils> component can be used to resize all your images to a specific width and height, ensuring they all fit perfectly within your portfolio layout.",
      "You're a blogger who frequently uses GIFs in your posts. However, you've noticed that the transparency in some of your GIFs is not preserved when you upload them, causing them to have an unsightly white background. The <lightning-media-utils> component can be used to preserve the transparency in your GIFs, ensuring they look exactly as you intended when you upload them to your blog."
    ],
    "docs": "The `mediaUtils` library contains utility functions that can be used by an LWC developer to process media files. The following functions are contained in the `mediaUtils` library:\n\n## processImage\n\nYou can use `processImage` function to resize and compress image files. To use this function, simply import it in your LWC first:\n```\nimport { processImage } from 'lightning/mediaUtils';\n```\n\nYou can then call this function by passing in an input image and a set of options to be used to process the input image, as further described below. It will return a promise that will resolve to a `Blob` object containing the output image data.\n\n#### Parameters\n\n* `input`: Defines the input image, which can either be a `File` or `Blob` object\n* `options`: An object that defines the options to be used when processing the input image. It is an optional parameter containing a number of flags. If this parameter or any of its flags are omitted, default values will be used as further described below.\n    * `resizeMode`: A string that determines how the image will be resized. It can contain one of the below values\n        * `fill`: This is default. The image will be resized to fill the target dimension. If necessary, the image will be stretched or squished to fit.\n        * `contain`: The image keeps its aspect ratio but will be resized to fit within the target dimension.\n        * `none`: The image will not be resized and will retain its original dimension.\n    * `resizeStrategy`: A string that determines how to resize the image. If `resizeMode` is set to `none` this flag will be ignored.\n        * `reduce`: Only resize if the image is larger than the target size (smaller images won't be resized).\n        * `enlarge`: Only resize if the image is smaller than the target size (larger images won't be resized).\n        * `always`: This is default. Always resize the image to the target size regardless of the original image dimensions.\n    * `targetWidth`: The target width when resizing an image. If omitted, defaults to the original image width. If `resizeMode` is set to `none` this flag will be ignored.\n    * `targetHeight`: The target height when resizing an image. If omitted, defaults to the original image height. If `resizeMode` is set to `none` this flag will be ignored.\n    * `compressionQuality`: A number between 0-1 that determines the compression quality. If omitted then the browser/webview picks a default value as it sees fit. Note that this parameter will be considered as a suggested compression quality, however the browser/webview may choose to override this value if it deems it necessary. For example if the value is larger than 1 or if it is considered to be too small by the browser/webview, then it will override the value to something that it deems more appropriate.\n    * `imageSmoothingEnabled`: A boolean that determines whether scaled images are smoothed or not. Defaults to `true`.\n    * `preserveTransparency`: A boolean that determines whether the transparency info of the input image (if any) should be preserved or not. Defaults to `true`. If the input image is a GIF/PNG and this flag is set to `true` the output image will be a PNG. For all other cases the output will be a JPEG.\n    * `backgroundColor`: A string that defines a CSS color as described [here](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Defaults to `white`. When `preserveTransparency` is set to `false`, the output image will have its background set to this color before the input image is resized and drawn on top.\n\n#### Example\n\nAs an example, consider the scenario where you would like to upload files to a Salesforce org using a [`lightning-input`](bundle/lightning-input/documentation) component. In your HTML code, you may have:\n```\n.\n.\n.\n<lightning-input\n    type=\"file\"\n    label=\"Select Files to Upload\"\n    accept=\"image/*\"\n    multiple\n    onchange={handleFilesSelected}>\n</lightning-input>\n.\n.\n.\n```\n\nIn your Javascript file, you can now use `processImage` from `mediaUtils`, for example to reduce image sizes and hence reduce the bandwidth used to upload the images, as illustrated below:\n```\nimport { processImage } from 'lightning/mediaUtils';\n.\n.\n.\nasync handleFilesSelected(event) {\n    try {\n        // Using the below options we resize images to a maximum of 2048x2048 pixels\n        // while containing their aspect ratio. By setting 'resizeStrategy' to 'reduce'\n        // we ensure that only images that have either width or height larger than\n        // 2048 pixels will be resized. Moreover, we've chosen not to preserve transparency\n        // in the input images and instead convert transparent pixels to white. Lastly,\n        // the images will be compressed with a 75% compression quality to reduce their byte size.\n        let options = {\n            resizeMode: 'contain',\n            resizeStrategy: 'reduce',\n            targetWidth: 2048,\n            targetHeight: 2048,\n            compressionQuality: 0.75,\n            imageSmoothingEnabled: true,\n            preserveTransparency: false,\n            backgroundColor: 'white'\n        };\n\n        for (const file of event.target.files) {\n            let blob = await processImage(file, options);\n            // here we can upload the data contained in the blob that is returned by processImage\n        }\n    } \n    catch (error) {\n        console.error(\"ERROR: \", error)\n    }\n}\n.\n.\n.\n```\n",
    "examples": []
  },
  {
    "tagName": "lightning-menu-divider",
    "shortDescription": "This component creates a dividing line in a menu, allowing for the separation of items into groups or categories, enhancing user navigation and organization.",
    "relatedComponents": {
      "lightning-button-menu": "required",
      "lightning-menu-item": "required",
      "lightning-menu-subheader": "optional"
    },
    "publicApi": [
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": [
          "<lightning-menu-divider variant=\"compact\">",
          "<lightning-menu-divider variant={myVariantValue}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're using a website to order groceries. When you click on the 'Produce' section, a dropdown menu appears with different categories of fruits and vegetables. The <lightning-menu-divider> component could be used to separate these categories, making it easier for you to find what you're looking for.",
      "In an online clothing store, when you hover over the 'Women's Clothing' section, a dropdown menu appears with different types of clothing like 'Tops', 'Bottoms', 'Dresses', etc. The <lightning-menu-divider> component could be used to separate these different types of clothing, making the menu more organized and easier to navigate.",
      "Consider a music streaming website where you can browse different genres of music. When you click on the 'Genres' section, a dropdown menu appears with different music genres like 'Pop', 'Rock', 'Classical', etc. The <lightning-menu-divider> component could be used to separate these genres, making it easier for you to find the type of music you want to listen to.",
      "On a news website, when you hover over the 'News' section, a dropdown menu appears with different categories like 'Local', 'National', 'International', 'Business', etc. The <lightning-menu-divider> component could be used to separate these categories, making it easier for you to find the news you're interested in.",
      "In a restaurant's online menu, when you click on the 'Menu' section, a dropdown appears with different categories like 'Appetizers', 'Main Courses', 'Desserts', etc. The <lightning-menu-divider> component could be used to separate these categories, making it easier for you to browse the menu."
    ],
    "docs": "---\nexamples:\n    - name: divider\n      label: Button Menus With Dividers\n      description: Button menus can include lines between menu items.\n    - name: withSubhead\n      label: Button Menus With Dividers and Subheaders\n      description: Button menus with subheaders, dividers, and compact variant.\n---\n\nThe `lightning-menu-divider` component creates a dividing line after a menu item in a\n[`lightning-button-menu`](bundle/lightning-button-menu/documentation) component.\nUse a menu divider to introduce a break between item categories or separate items into groups,\nfor example.\n\nTo draw a line after a menu item, nest the component inside `lightning-button-menu` after the `lightning-menu-item` where you want the line. Use `lightning-menu-divider` as a sibling of `lightning-menu-item`, not as a child component.\n\nThis example shows a dropdown menu with two dividers.\n\n```html\n<template>\n    <lightning-button-menu label=\"Veggies\">\n        <lightning-menu-item label=\"Spinach\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Kale\"> </lightning-menu-item>\n        <lightning-menu-divider> </lightning-menu-divider>\n        <lightning-menu-item label=\"Zucchini\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Yellow Squash\"> </lightning-menu-item>\n        <lightning-menu-divider> </lightning-menu-divider>\n        <lightning-menu-item label=\"Carrot\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Parsnip\"> </lightning-menu-item>\n    </lightning-button-menu>\n</template>\n```\n\nBy default, space is added above and below the divider. Use `variant=\"compact\"` with `lightning-menu-divider` to reduce the space.\n\n```html\n<template>\n    <lightning-button-menu label=\"Veggies\">\n        <lightning-menu-item label=\"Spinach\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Kale\"> </lightning-menu-item>\n        <lightning-menu-divider variant=\"compact\"> </lightning-menu-divider>\n        <lightning-menu-item label=\"Zucchini\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Yellow Squash\"> </lightning-menu-item>\n        <lightning-menu-divider variant=\"compact\"> </lightning-menu-divider>\n        <lightning-menu-item label=\"Carrot\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Parsnip\"> </lightning-menu-item>\n    </lightning-button-menu>\n</template>\n```\n\nFor further customization of button menus, use [`lightning-menu-subheader`](bundle/lightning-menu-subheader/documentation) to create subheaders in the list of items. You can place dividers under subheaders or menu items.\n\n```html\n<template>\n    <lightning-button-menu label=\"Veggies\">\n        <lightning-menu-subheader label=\"Leafy Greens\">\n        </lightning-menu-subheader>\n        <lightning-menu-item label=\"Spinach\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Kale\"> </lightning-menu-item>\n        <lightning-menu-divider variant=\"compact\"> </lightning-menu-divider>\n        <lightning-menu-subheader label=\"Summer Squash\">\n        </lightning-menu-subheader>\n        <lightning-menu-item label=\"Zucchini\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Yellow Squash\"> </lightning-menu-item>\n        <lightning-menu-divider variant=\"compact\"> </lightning-menu-divider>\n        <lightning-menu-subheader label=\"Root Vegetables\">\n        </lightning-menu-subheader>\n        <lightning-menu-item label=\"Carrot\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Parsnip\"> </lightning-menu-item>\n    </lightning-button-menu>\n</template>\n```\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonMenuBasic extends LightningElement {}\n",
        "html": "<template>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menus using <code>lightning-menu-divider</code> components. The <code>lightning-menu-divider</code> components use <code>standard</code> and <code>compact</code> variants.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu tooltip=\"Dividers use default variant\" alternative-text=\"Show menu\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-divider></lightning-menu-divider>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-divider></lightning-menu-divider>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu tooltip=\"Dividers use compact variant\" alternative-text=\"Show menu\" class=\"slds-m-left_xx-small\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-divider variant=\"compact\"></lightning-menu-divider>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-divider variant=\"compact\"></lightning-menu-divider>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonMenuBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menus with <code>lightning-menu-subheader</code> and <code>lightning-menu-divider</code> components. The <code>lightning-menu-divider</code> components use default <code>standard</code> and <code>compact</code> variants.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu tooltip=\"Subheadings with dividers using default variant\" alternative-text=\"Show menu\">\n                <lightning-menu-subheader label=\"Header Alpha\"></lightning-menu-subheader>\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-divider></lightning-menu-divider>\n                <lightning-menu-subheader label=\"Header Beta\"></lightning-menu-subheader>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-divider></lightning-menu-divider>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu tooltip=\"Subheadings with dividers using compact variant\" alternative-text=\"Show menu\" class=\"slds-m-left_xx-small\">\n                <lightning-menu-subheader label=\"Header Alpha\"></lightning-menu-subheader>\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-divider variant=\"compact\"></lightning-menu-divider>\n                <lightning-menu-subheader label=\"Header Beta\"></lightning-menu-subheader>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-divider variant=\"compact\"></lightning-menu-divider>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-menu-item",
    "shortDescription": "This component is a customizable menu item within a dropdown menu, which can hold different states, display icons, and provide navigation through URLs, enhancing user interaction and experience.",
    "relatedComponents": {
      "lightning-button-menu": "required"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-menu-item label='Menu Item 1'>", "<lightning-menu-item label={menuItemLabel}>"]
      },
      {
        "name": "value",
        "typeSignature": "string",
        "examples": ["<lightning-menu-item value='menuitem1'>", "<lightning-menu-item value={menuItemValue}>"]
      },
      {
        "name": "icon-name",
        "typeSignature": "string",
        "examples": ["<lightning-menu-item icon-name='utility:table'>", "<lightning-menu-item icon-name={iconName}>"]
      },
      {
        "name": "checked",
        "typeSignature": "boolean",
        "examples": ["<lightning-menu-item checked>", "<lightning-menu-item checked={isChecked}>"]
      },
      {
        "name": "prefix-icon-name",
        "typeSignature": "string",
        "examples": [
          "<lightning-menu-item prefix-icon-name='utility:user'>",
          "<lightning-menu-item prefix-icon-name={prefixIconName}>"
        ]
      },
      {
        "name": "href",
        "typeSignature": "string",
        "examples": ["<lightning-menu-item href='https://www.google.com'>", "<lightning-menu-item href={url}>"]
      },
      {
        "name": "target",
        "typeSignature": "string",
        "examples": ["<lightning-menu-item target='_blank'>", "<lightning-menu-item target={target}>"]
      },
      {
        "name": "is-draft",
        "typeSignature": "boolean",
        "examples": ["<lightning-menu-item is-draft>", "<lightning-menu-item is-draft={isDraft}>"]
      },
      {
        "name": "draft-alternative-text",
        "typeSignature": "string",
        "examples": [
          "<lightning-menu-item draft-alternative-text='Unsaved changes'>",
          "<lightning-menu-item draft-alternative-text={draftText}>"
        ]
      }
    ],
    "useCases": [
      "In a project management application, a <lightning-menu-item> could be used in a dropdown menu to navigate to different sections of the project. Each menu item could represent a different aspect of the project, such as 'Tasks', 'Team Members', 'Timeline', etc. Clicking on a menu item would take the user to the corresponding section of the project.",
      "In a social media application, a <lightning-menu-item> could be used in a user's profile settings menu. The menu items could include options like 'Edit Profile', 'Privacy Settings', 'Log Out', etc. Each menu item could have an icon next to it representing the action, making it easier for the user to find what they're looking for.",
      "In an e-commerce application, a <lightning-menu-item> could be used in a product's 'More Options' menu. The menu items could include actions like 'Add to Wishlist', 'Compare with Similar Products', 'Share', etc. If the user hasn't saved their changes to the product options, the 'Add to Wishlist' menu item could show a draft indicator to remind the user to save their changes.",
      "In a news website, a <lightning-menu-item> could be used in a menu to navigate to different news categories. Each menu item could represent a different news category, such as 'World News', 'Sports', 'Entertainment', etc. Clicking on a menu item would take the user to the page with news articles from that category.",
      "In a music streaming application, a <lightning-menu-item> could be used in a menu for each song. The menu items could include actions like 'Add to Playlist', 'Share', 'Download', etc. Each menu item could have an icon next to it, making it visually appealing and easy to understand.",
      "In a blogging platform, a <lightning-menu-item> could be used in a menu for each blog post. The menu items could include actions like 'Edit Post', 'Delete Post', 'View Statistics', etc. If the user hasn't saved their changes to the blog post, the 'Edit Post' menu item could show a draft indicator to remind the user to save their changes."
    ],
    "docs": "---\nexamples:\n    - name: menuItems\n      label: Button Menu with Styled Items\n      description: Button menu items can display icons to the left or right of the item label, or both.\n    - name: iteration\n      label: Button Menus Using for:each Iteration for Menu Items\n      description: Button menu items can be created from a data source using iteration.\n---\n\nA `lightning-menu-item` is a menu item within the `lightning-button-menu`\ndropdown component. It can hold state such as checked or unchecked, and can\ncontain icons.\n\nUse the `class` attribute to customize the styling.\n\nThis component inherits styling from\n[menus](https://www.lightningdesignsystem.com/components/menus/) in the\nLightning Design System.\n\nWhen applying Lightning Design System classes or icons, check that they are\navailable in the Lightning Design System release tied to your org. The\nLightning Design System site shows the latest Lightning Design System\nresources, and these become available only when the new release is available\nin your org.\n\nHere is an example.\n\n```html\n<template>\n    <lightning-button-menu alternative-text=\"Toggle menu\">\n        <lightning-menu-item\n            label=\"Menu Item 1\"\n            value=\"menuitem1\"\n            icon-name=\"utility:table\"\n        >\n        </lightning-menu-item>\n    </lightning-button-menu>\n</template>\n```\n\n#### Multi-select Menus\n\nTo implement a multi-select menu, use the `checked` attribute. The following\nJavaScript example handles selection via the `onselect` event on\nthe `lightning-button-menu` component. Selecting a menu item applies the\nselected state to that item.\n\n```javascript\nhandleSelect (event) {\n        const selectedItemValue = event.detail.value;\n        const menuItem = this.privateMenuItems.find(function(item) {\n            return item.value === selectedItemValue;\n        });\n\n        menuItem.checked = !menuItem.checked;\n    }\n```\n\n#### Adding Icons to Menu Items\n\nUse the `icon-name` attribute to add an icon after the text of the menu item.\nUse the `prefix-icon-name` attribute to add an icon before the text of the menu\nitem. For each attribute, specify a utility icon from\n[utility icons](https://www.lightningdesignsystem.com/icons/#utility) in Lightning\nDesign System.\n\nThis example specifies an icon to display before the menu item text.\n\n```html\n<template>\n    <lightning-button-menu>\n        <lightning-menu-item prefix-icon-name=\"utility:user\" label=\"Menu item\">\n        </lightning-menu-item>\n        <lightning-menu-item label=\"Another menu item\"> </lightning-menu-item>\n    </lightning-button-menu>\n</template>\n```\n\n#### Using URLs in Menu Items\n\nThe `href` attribute allows you to use the button menu for navigation. This\nexample specifies a URL in the menu item's `href` attribute to create a link.\nThe link is applied to the content of the menu item, including text and icons.\n\n```html\n<template>\n    <lightning-button-menu>\n        <lightning-menu-item\n            href=\"https://www.google.com\"\n            label=\"A linked menu item\"\n        >\n        </lightning-menu-item>\n    </lightning-button-menu>\n</template>\n```\n\nIf you don't provide a target, the link opens in the same frame or browser tab where it was clicked, which is the browser's default behavior.\nTo open the link in a new browser tab, set `target=\"_blank\"`.\n\n```html\n<template>\n    <lightning-button-menu>\n        <lightning-menu-item\n            href=\"https://www.google.com\"\n            target=\"_blank\"\n            label=\"A linked menu item\"\n        >\n        </lightning-menu-item>\n    </lightning-button-menu>\n</template>\n```\n\n#### Draft Indicators\n\nUse the `is-draft` and `draft-alternative-text` attributes together to indicate\nthat the menu item is in an unsaved state. The draft indicator, an asterisk,\nis shown for the menu item when `is-draft` is `true`. The\n`draft-alternative-text` attribute is required to provide text describing the\nreason the item is considered in a draft state. The draft state might be used\nto show there is unsaved state or data that could be lost, for example if\nthere's a user change in a customizable menu.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonMenuIteration extends LightningElement {\n    // basic data source with minimal content\n    myMenuItems = [\n        {\n            id: 'item-01',\n            label: 'Alpha',\n            value: 'alpha',\n        },\n        {\n            id: 'item-02',\n            label: 'Beta',\n            value: 'beta',\n        },\n        {\n            id: 'item-03',\n            label: 'Gamma',\n            value: 'gamma',\n        },\n        {\n            id: 'item-04',\n            label: 'Delta',\n            value: 'delta',\n        },\n        {\n            id: 'item-05',\n            label: 'Epsilon',\n            value: 'epsilon',\n        },\n    ];\n\n    // more complex data source with additional content\n    myComplexMenuItems = [\n        {\n            id: 'item-01',\n            label: 'Alpha',\n            value: 'alpha',\n            disabled: false,\n            prefixIconName: 'utility:bookmark',\n            iconName: 'utility:animal_and_nature',\n        },\n        {\n            id: 'item-02',\n            label: 'Beta',\n            value: 'beta',\n            disabled: true,\n            iconName: 'utility:company',\n        },\n        {\n            id: 'item-03',\n            label: 'Gamma',\n            value: 'gamma',\n            prefixIconName: 'utility:date_input',\n        },\n        {\n            id: 'item-04',\n            label: 'Delta',\n            value: 'delta',\n            checked: true,\n        },\n        {\n            id: 'item-05',\n            label: 'Epsilon',\n            value: 'epsilon',\n            iconName: 'utility:knowledge_base',\n        },\n    ];\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small\">\n            Button menu with items added from a simple data source during initialization.\n        </h2>\n        <p class=\"slds-text-heading_x-small slds-m-bottom_medium\">\n            The <code>key</code> attribute on <code>lightning-menu-item</code> is required for iterations.\n        </p>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" menu-alignment=\"auto\">\n                <template for:each={myMenuItems} for:item=\"menuItem\">\n                    <lightning-menu-item\n                        key={menuItem.id}\n                        value={menuItem.value}\n                        label={menuItem.label}>\n                    </lightning-menu-item>\n                </template>\n            </lightning-button-menu>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small\">\n            Button menu with items added from a more complex data source during initialization.\n        </h2>\n        <p class=\"slds-text-heading_x-small slds-m-bottom_medium\">\n            Data source includes <code>icon-name</code>, <code>prefix-icon-name</code>, <code>disabled</code>\n            and <code>checked</code> values.\n        </p>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\" menu-alignment=\"auto\">\n                <template for:each={myComplexMenuItems} for:item=\"menuItem\">\n                    <lightning-menu-item\n                        key={menuItem.id}\n                        value={menuItem.value}\n                        label={menuItem.label}\n                        disabled={menuItem.disabled}\n                        icon-name={menuItem.iconName}\n                        prefix-icon-name={menuItem.prefixIconName}\n                        checked={menuItem.checked}>\n                    </lightning-menu-item>\n                </template>\n            </lightning-button-menu>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonMenuMenuItems extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with some <code>lightning-menu-item</code> components disabled.\n        </h2>\n\n        <!-- Disabled -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" menu-alignment=\"auto\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\" disabled></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\" disabled></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with <code>lightning-menu-item</code> components that use the <code>icon-name</code> attribute.\n        </h2>\n\n        <!-- With icon-name -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" menu-alignment=\"auto\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\" icon-name=\"utility:description\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\" icon-name=\"utility:date_input\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\" icon-name=\"utility:custom_apps\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\" icon-name=\"utility:metrics\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with <code>lightning-menu-item</code> components that use the <code>prefix-icon-name</code> attribute.\n        </h2>\n\n        <!-- With icon-name -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" menu-alignment=\"auto\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\" prefix-icon-name=\"utility:bookmark\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\" prefix-icon-name=\"utility:send\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\" prefix-icon-name=\"utility:connected_apps\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\" prefix-icon-name=\"utility:italic\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with <code>lightning-menu-item</code> components that use <code>prefix-icon-name</code> and <code>icon-name</code> attributes.\n        </h2>\n\n        <!-- With icon-name -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\" menu-alignment=\"auto\">\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\" prefix-icon-name=\"utility:bookmark\" icon-name=\"utility:description\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\" prefix-icon-name=\"utility:send\" icon-name=\"utility:date_input\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\" prefix-icon-name=\"utility:connected_apps\" icon-name=\"utility:custom_apps\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\" prefix-icon-name=\"utility:italic\" icon-name=\"utility:metrics\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-menu-subheader",
    "shortDescription": "This component creates a bold, slightly larger heading within a list of menu items, helping to categorize items and improve usability for long lists.",
    "relatedComponents": {
      "lightning-button-menu": "required",
      "lightning-menu-item": "required",
      "lightning-menu-divider": "optional"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": [
          "<lightning-menu-subheader label='Leafy Greens'>",
          "<lightning-menu-subheader label='Summer Squash'>",
          "<lightning-menu-subheader label='Root Vegetables'>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're using a website for a grocery store, and you're looking at a dropdown menu of all the different types of produce they offer. The <lightning-menu-subheader> component could be used to categorize the produce into different types, like 'Fruits', 'Vegetables', and 'Herbs', making it easier for you to find what you're looking for.",
      "On a music streaming website, you might see a dropdown menu that lists all the different genres of music you can listen to. The <lightning-menu-subheader> component could be used to divide these genres into broader categories, like 'Popular', 'Classical', and 'World Music', helping you navigate the menu more easily.",
      "Suppose you're using an online learning platform that offers courses in a variety of subjects. When you click on a dropdown menu to browse the courses, the <lightning-menu-subheader> component could be used to group the courses into categories like 'Arts & Humanities', 'Computer Science', and 'Business & Management', making it easier for you to find courses in your area of interest."
    ],
    "docs": "---\nexamples:\n    - name: subheader\n      label: Button Menus With Subheaders\n      description: Button menu items can include headers among menu items.\n    - name: withDividers\n      label: Button Menus With Dividers and Subheaders\n      description: Button menus with subheaders, dividers, and compact variant.\n---\n\nThe `lightning-menu-subheader` component creates a heading in the list of menu items in a\n[`lightning-button-menu`](bundle/lightning-button-menu/documentation) component.\nThe heading appears in bold text and is slightly larger than menu item text.\nSubheaders can help categorize items and improve usability for long lists.\n\nSpecify the text of the heading using the `label` attribute.\n\nNest the component inside `lightning-button-menu` before the `lightning-menu-item` where you want the header. Use `lightning-menu-subheader` as a sibling of `lightning-menu-item`, not as a child component.\n\nThis example shows a dropdown menu with subheaders.\n\n```html\n<template>\n    <lightning-button-menu label=\"Veggies\">\n        <lightning-menu-subheader label=\"Leafy Greens\">\n        </lightning-menu-subheader>\n        <lightning-menu-item label=\"Spinach\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Kale\"> </lightning-menu-item>\n        <lightning-menu-subheader label=\"Summer Squash\">\n        </lightning-menu-subheader>\n        <lightning-menu-item label=\"Zucchini\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Yellow Squash\"> </lightning-menu-item>\n        <lightning-menu-subheader label=\"Root Vegetables\">\n        </lightning-menu-subheader>\n        <lightning-menu-item label=\"Carrot\"> </lightning-menu-item>\n        <lightning-menu-item label=\"Parsnip\"> </lightning-menu-item>\n    </lightning-button-menu>\n</template>\n```\n\nFor further customization of button menus, use [`lightning-menu-divider`](bundle/lightning-menu-divider/documentation) to create divider lines in the list of items. You can place dividers under subheaders or menu items.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonMenuBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menu with <code>lightning-menu-subheader</code> components.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu alternative-text=\"Show menu\">\n                <lightning-menu-subheader label=\"Header Alpha\"></lightning-menu-subheader>\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-subheader label=\"Header Beta\"></lightning-menu-subheader>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ButtonMenuBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_small slds-m-bottom_medium\">\n            Button menus with <code>lightning-menu-subheader</code> and <code>lightning-menu-divider</code>\n            components. The <code>lightning-menu-divider</code> components use <code>standard</code> and <code>compact</code> variants.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-button-menu tooltip=\"Subheadings with dividers using standard variant\" alternative-text=\"Show menu\">\n                <lightning-menu-subheader label=\"Header Alpha\"></lightning-menu-subheader>\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-divider></lightning-menu-divider>\n                <lightning-menu-subheader label=\"Header Beta\"></lightning-menu-subheader>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-divider></lightning-menu-divider>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n\n            <lightning-button-menu tooltip=\"Subheadings with dividers using compact variant\" alternative-text=\"Show menu\" class=\"slds-m-left_xx-small\">\n                <lightning-menu-subheader label=\"Header Alpha\"></lightning-menu-subheader>\n                <lightning-menu-item value=\"MenuItemOne\" label=\"Menu Item One\"></lightning-menu-item>\n                <lightning-menu-item value=\"MenuItemTwo\" label=\"Menu Item Two\"></lightning-menu-item>\n                <lightning-menu-divider variant=\"compact\"></lightning-menu-divider>\n                <lightning-menu-subheader label=\"Header Beta\"></lightning-menu-subheader>\n                <lightning-menu-item value=\"MenuItemThree\" label=\"Menu Item Three\"></lightning-menu-item>\n                <lightning-menu-divider variant=\"compact\"></lightning-menu-divider>\n                <lightning-menu-item value=\"MenuItemFour\" label=\"Menu Item Four\"></lightning-menu-item>\n            </lightning-button-menu>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-message-dispatcher",
    "shortDescription": "This component enables communication with an iframe, providing a seamless interaction experience between the user interface and embedded content.",
    "relatedComponents": {
      "lightning-map": "optional",
      "lightning-lookup-address": "optional"
    },
    "publicApi": [],
    "useCases": [
      "Imagine you're using a website for online shopping and you've added a few items to your cart. When you go to the checkout page, which is a separate page, it still knows what items you have in your cart. This is because the <lightning-message-dispatcher> component is used to communicate between the shopping and checkout pages.",
      "Consider a scenario where you're using an online form to apply for a job. The form is split across multiple pages, but the information you enter on one page is remembered when you move to the next. This is possible because the <lightning-message-dispatcher> component is used to pass your information from one page to the next.",
      "Imagine you're using an online banking website. You navigate from the homepage to your account details page. Despite being a different page, it still knows who you are and can display your account details. This is because the <lightning-message-dispatcher> component is used to communicate your user information from the homepage to the account details page."
    ],
    "docs": "# Message Dispatcher\n\n`lightning/messageDispatcher` enables your component to communicate with an iframe. It's supported on the Salesforce platform and outside the platform.\n\nImport functions from the `lightning/messageDispatcher` module.\n\n```js\nimport {\n    registerMessageHandler,\n    unregisterMessageHandler,\n    createMessage,\n    postMessage,\n} from 'lightning/messageDispatcher';\n```\n\nFor examples, see the `lightning-map` and `lightning-lookup-address` components.\n\nAdditionally, `one:iframeMessageManager` handles all event post from the iframe. It uses `lightning/messageDispatcher` to dispatch to a component.\n",
    "examples": []
  },
  {
    "tagName": "lightning-mixin-builder",
    "shortDescription": "This component is a mixin builder that allows for the combination of multiple classes or functionalities into a single class, enhancing the user experience by providing more precise and detailed information.",
    "relatedComponents": {},
    "publicApi": [],
    "useCases": [
      "Imagine you're using a social media app and you want to check in at a location. The <lightning-mixin-builder> component could be used to provide your exact location, like '50 Fremont San Francisco, CA 94105', and post it on your profile.",
      "Suppose you're using a ride-hailing app and you want to book a ride. The <lightning-mixin-builder> component could be used to automatically detect your current location and fill it in the 'Pickup Location' field, saving you the trouble of typing it in manually.",
      "Consider a scenario where you're using a food delivery app and you want to order food. The <lightning-mixin-builder> component could be used to automatically detect your current location and show you restaurants that deliver to your area."
    ],
    "docs": "# Usage\n\n```javascript\nimport { LightningElement, api } from 'lwc';\nimport mix from 'lightning/mixinBuilder';\n\nconst IphoneX = (superclass) =>\n    class extends superclass {\n        getCurrentLocation() {\n            return '50 Fremont San Francisco, CA 94105';\n        }\n    };\n\nconst Logger = (superclass) =>\n    class extends superclass {\n        log(...args) {\n            console.log(...args);\n        }\n    };\n\nclass Person {\n    whereAreYou() {\n        return 'Iam in San Francisco.';\n    }\n}\n\nclass SuperPerson extends mix(Person).with(IphoneX, Logger) {\n    whereAreYou() {\n        log(super.whereAreYour());\n        log(`Exactly at ${this.getCurrentLocation}`);\n    }\n}\n\nnew SuperPerson().whereAreYou();\n```\n\nit's going to print\n\n```\nIam in San Fracisco\nExactly at: 50 Fremont San Francisco, CA 94105\n```\n",
    "examples": []
  },
  {
    "tagName": "lightning-modal-body",
    "shortDescription": "This component is used to render the content of a modal, providing an interactive user experience with automatic scrolling and customizable styling options.",
    "relatedComponents": {
      "lightning-modal-header": "optional",
      "lightning-modal-footer": "optional"
    },
    "publicApi": [],
    "useCases": [
      "Imagine you're shopping online and you've added a few items to your cart. When you're ready to check out, a pop-up window appears with a summary of your order. This pop-up window is a modal, and the summary of your order is displayed in the <lightning-modal-body> component.",
      "When you're using a web application and you need to fill out a form, sometimes the form appears in a pop-up window or modal. The form that you fill out is contained within the <lightning-modal-body> component.",
      "Suppose you're using a web application and you click on a button to view more information about a particular item. The detailed information about the item appears in a pop-up window or modal. The detailed information is displayed in the <lightning-modal-body> component.",
      "Imagine you're using a web application and you click on a button to delete an item. A pop-up window appears asking you to confirm your action. The confirmation message is displayed in the <lightning-modal-body> component.",
      "When you're using a web application and you click on a button to edit an item, a form appears in a pop-up window or modal. The form that you fill out to edit the item is contained within the <lightning-modal-body> component.",
      "Suppose you're using a web application and you click on a button to view a video. The video appears in a pop-up window or modal. The video is displayed in the <lightning-modal-body> component."
    ],
    "docs": "The `lightning-modal-body` component renders the content of a modal.\n\nThe modal components render in the order they appear in the template. Place the `lightning-modal-body`\ncomponent after `lightning-modal-header` and before `lightning-modal-footer` components, if you're providing them.\n\nThis sample code shows the expected order of the modal components. The modal content is\ncreated in a separate component extended from `LightningModal`. See\n[Lightning Web Components Developer Guide](https://developer.salesforce.com/docs/platform/lwc/guide/)\n\n```html\n<!-- my/modalDialog.html -->\n<template>\n    <lightning-modal-header label=\"My Modal Heading\">\n        Tagline content with <a href=\"https://salesforce.com\">Salesforce.com link</a>\n    </lightning-modal-header>\n    <lightning-modal-body>\n        <!-- modal content specified in LightningModal component -->\n        { content }\n        <!-- alternatively, add content here directly -->\n    </lightning-modal-body>\n    <lightning-modal-footer>\n        Footer Content\n    </lightning-modal-footer>\n</template>\n```\n\nYou can nest content in `lightning-modal-body` or\n`lightning-modal-body` automatically scrolls the modal's content when necessary.\nThe modal's maximum height is calculated to prevent the content from exceeding the screen height,\nand scroll bars are automatically added.\n#### Component Styling\n\n`lightning-modal-body` implements the [modals](https://www.lightningdesignsystem.com/components/modals/) blueprint in the Salesforce Lightning Design System (SLDS).\n\nTo apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n```html\n<lightning-modal-body class=\"my-modal-body\">\n\n</lightning-modal-body>\n```\n\nUse SLDS styling hooks to customize the component's styles. The `--slds-c-modal-content-*` hooks\nenable you to customize the background color and text color of the modal body.\n\nFor example, specify the background color on the modal using the `sds-c-modal-content-color-background` custom property.\n\n```css\n.my-modal-body {\n    --slds-c-modal-content-color-background: LightBlue;\n}\n```\n\nSee the modal blueprint's [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/modals/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\n#### Accessibility\n\nSee [Lightning Web Components Developer Guide](https://developer.salesforce.com/docs/platform/lwc/guide/) for more information about accessibility in modals.\n\n",
    "examples": []
  },
  {
    "tagName": "lightning-modal-footer",
    "shortDescription": "This component is used to create an optional footer at the bottom of a modal dialog, providing an organized space for interactive elements like buttons, and offering customization options for styling and accessibility.",
    "relatedComponents": {
      "lightning-modal-body": "required",
      "lightning-modal-header": "optional",
      "lightning-button": "optional"
    },
    "publicApi": [],
    "useCases": [
      "In an online shopping website, when a user adds an item to their cart, a pop-up window might appear confirming the action. At the bottom of this window, the <lightning-modal-footer> component could be used to display two buttons: one to continue shopping and another to proceed to checkout.",
      "On a job application website, after filling out an application form, a confirmation window might pop up. The <lightning-modal-footer> component could be used at the bottom of this window to display a 'Submit' button to finalize the application and a 'Cancel' button to discard the application.",
      "On a social media website, when a user attempts to delete a post, a confirmation window might appear. The <lightning-modal-footer> component could be used at the bottom of this window to display a 'Delete' button to confirm the action and a 'Cancel' button to abort the action.",
      "In an email client, when composing a new email, a window might pop up for the user to write their message. The <lightning-modal-footer> component could be used at the bottom of this window to display a 'Send' button to send the email and a 'Save Draft' button to save the email for later.",
      "On a movie booking website, after selecting a movie and showtime, a window might pop up for the user to select their seats. The <lightning-modal-footer> component could be used at the bottom of this window to display a 'Confirm Selection' button to finalize the seat selection and a 'Cancel' button to start over."
    ],
    "docs": "The `lightning-modal-footer` component creates a footer at the bottom of a modal dialog.\nUse of a footer is optional.\n\nThe modal components render in the order they appear in the template.\nPlace the `lightning-modal-footer` component after the `lightning-modal-body` component.\n\nThis sample code shows the expected order of the modal components. The modal content is\ncreated in a separate component extended from `LightningModal`. See\n[Lightning Web Components Developer Guide](https://developer.salesforce.com/docs/platform/lwc/guide/)\n\nThis sample's `lightning-modal-footer` includes two `lightning-button` components,\nbut you can also use `<button>` elements.\n\n```html\n<!-- my/modalDialog.html -->\n<template>\n    <lightning-modal-header label=\"My Modal\">\n    </lightning-modal-header>\n    <lightning-modal-body>\n        <!-- modal content specified in LightningModal component -->\n    </lightning-modal-body>\n    <lightning-modal-footer>\n        <lightning-button\n            class=\"slds-button\"\n            variant=\"neutral\"\n            label=\"Cancel\"\n            onclick={handleDismiss}\n        ></lightning-button>\n        <lightning-button\n            class=\"slds-button slds-m-left_x-small\"\n            variant=\"brand\"\n            label=\"Save\"\n        ></lightning-button>\n    </lightning-modal-footer>\n</template>\n```\n#### Component Styling\n\n`lightning-modal-footer` implements the [modals](https://www.lightningdesignsystem.com/components/modals/) blueprint in the Salesforce Lightning Design System (SLDS).\n\nTo apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n```html\n<lightning-modal-footer class=\"my-modal-footer\">\n\n</lightning-modal-footer>\n```\n\nUse SLDS styling hooks to customize the component's styles. Several `--slds-c-modal-footer-*` hooks\nenable you to customize the footer spacing, background color, and text color.\n\nFor example, specify the background color on the footer using the `sds-c-modal-footer-color-background` custom property.\n\n```css\n.my-modal-footer {\n    --slds-c-modal-footer-color-background: LightGray;\n}\n```\n\nSee the modal blueprint's [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/modals/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\n#### Accessibility\n\nIf you add buttons to the footer, you can use the accessibility attributes described in [`lightning-button`](bundle/lightning-button/documentation).\n\nWhen the modal opens, focus goes to the first interactive element in the modal. If there are no links in the header or any interactive elements\nin the modal body, the first footer button gets initial focus.\n\nSee [Lightning Web Components Developer Guide](https://developer.salesforce.com/docs/platform/lwc/guide/) for more information about accessibility in modals.\n\n",
    "examples": []
  },
  {
    "tagName": "lightning-modal-header",
    "shortDescription": "This component is used to display a header text in a panel at the top of a modal dialog, providing an optional tagline and custom styling, enhancing the user's experience with clear labeling and accessible design.",
    "relatedComponents": {
      "lightning-modal-body": "required"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-modal-header label='My Modal'>", "<lightning-modal-header label={modalLabel}>"]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": ["<lightning-modal-header label='My Modal' class='my-modal-header'>"]
      }
    ],
    "useCases": [
      "Imagine you're shopping online and you've added a few items to your cart. When you're ready to check out, a pop-up window appears with a summary of your order. At the top of this window, there's a title that says 'Order Summary' and a smaller text underneath that says 'Please review your order before proceeding'. This is an example of where the <lightning-modal-header> component might be used.",
      "When you're using a project management tool, you might need to create a new project. When you click on 'New Project', a pop-up window appears where you can enter the details of the project. At the top of this window, there's a title that says 'Create New Project' and a smaller text underneath that says 'Enter the details of your project'. This is another scenario where the <lightning-modal-header> component might be used.",
      "Suppose you're using a fitness app and you want to log a new workout. When you click on 'Log Workout', a pop-up window appears where you can enter the details of your workout. At the top of this window, there's a title that says 'Log New Workout' and a smaller text underneath that says 'Enter the details of your workout'. This is a scenario where the <lightning-modal-header> component might be used."
    ],
    "docs": "The `lightning-modal-header` component displays header text in a panel at the top of a modal dialog.\nUse of a header is optional, but when you provide a header you must specify the header text with the `label` attribute.\n\nIf you don't use the `lightning-modal-header` component, you must set a label\nin the modal you create by extending `LightningModal`. A label is required for accessibility.\n\nThe modal components render in the order they appear in the template. Place the `lightning-modal-header`\ncomponent before the `lightning-modal-body` component in the template.\n\n`lightning-modal-header` supports optional tagline text, which displays in smaller text below the heading. Enclose the\ntagline text directly in the `lightning-modal-header` component, no HTML tag or attribute is needed. You can include links with `<a>`\ntags, which are the only HTML elements permitted. If the header text is too long to fit on one line, it wraps in the modal header.\n\nThis sample code shows the expected order of the modal components. The modal content is\ncreated in a separate component extended from `LightningModal`. See\n[Lightning Web Components Developer Guide](https://developer.salesforce.com/docs/platform/lwc/guide/)\n\n```html\n<!-- my/modalDialog.html -->\n<template>\n    <lightning-modal-header label=\"My Modal\">\n        Tagline can be descriptive content with <a href=\"https://www.example.com\">links</a> and can wrap to multiple lines.\n    </lightning-modal-header>\n    <lightning-modal-body>\n        <!-- modal content specified in LightningModal component -->\n    </lightning-modal-body>\n</template>\n```\n#### Component Styling\n\n`lightning-modal-header` implements the [modals](https://www.lightningdesignsystem.com/components/modals/) blueprint in the Salesforce Lightning Design System (SLDS).\n\nTo apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n```html\n<lightning-modal-header label=\"My Modal\" class=\"my-modal-header\">\n\n</lightning-modal-header>\n```\n\nUse SLDS styling hooks to customize the component's styles. Several `--slds-c-modal-header-*` and `--slds-c-modal-heading-*` hooks\nenable you to customize the header.\n\nFor example, specify the background color on the button using the `sds-c-modal-header-color-background` custom property.\n\n```css\n.my-modal-header {\n    --slds-c-modal-header-color-background: LightGray;\n}\n```\n\nSee the modal blueprint's [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/modals/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\n#### Accessibility\n\nWhen you use `lightning-modal-header` in your modal, the rendered modal provides an `aria-labelledby` attribute set to the ID of the header element.\nIf you don't use `lightning-modal-header`, the accessible label is provided using `aria-label` set to the label you provide in the modal.\n\nWhen the modal opens, focus goes to the first interactive element in the modal. If the header includes a link in tagline text, the link\ngets initial focus.\n\nSee [Lightning Web Components Developer Guide](https://developer.salesforce.com/docs/platform/lwc/guide/) for more information about accessibility in modals.\n",
    "examples": []
  },
  {
    "tagName": "lightning-navigation",
    "shortDescription": "This component provides the functionality to generate URLs or navigate to different pages within an application, offering a seamless navigation experience to the end user.",
    "relatedComponents": {
      "lightning-navigation": "required"
    },
    "publicApi": [],
    "useCases": [
      "Imagine you're using a Salesforce application and you're on a page that displays a list of all your customers. You see a customer's name and you want to view more details about them. When you click on the customer's name, the <lightning-navigation> component is used to take you to a new page that shows all the details about that customer.",
      "You're using a Salesforce application and you're on a page that shows detailed information about a specific customer. You see a button that says 'Go to Home'. When you click on this button, the <lightning-navigation> component is used to take you back to the home page of the application.",
      "You're using a Salesforce application and you're on a page that shows a list of all your tasks for the day. You see a task that you want to edit. When you click on the 'Edit' button next to the task, the <lightning-navigation> component is used to take you to a new page where you can edit the details of the task.",
      "You're using a Salesforce application and you're on a page that shows a list of all your sales leads. You see a button that says 'Add New Lead'. When you click on this button, the <lightning-navigation> component is used to take you to a new page where you can enter the details of a new sales lead.",
      "You're using a Salesforce application and you're on a page that shows a list of all your products. You see a product that you want to view more details about. When you click on the product's name, the <lightning-navigation> component is used to take you to a new page that shows all the details about that product.",
      "You're using a Salesforce application and you're on a page that shows a list of all your employees. You see a button that says 'Add New Employee'. When you click on this button, the <lightning-navigation> component is used to take you to a new page where you can enter the details of a new employee."
    ],
    "docs": "To generate a URL or navigate to a page reference, use the `lightning-navigation` service wire adapters and functions.\n\nNote: The playground doesn't support the `lightning-navigation` service.\n\n#### CurrentPageReference\n\nGet a reference to the current page in Salesforce. Page URL formats can change in future releases. To future proof your apps, use page references instead of URLs. Use the page reference to create a deep link to the page.\n\n```javascript\nimport { CurrentPageReference } from 'lightning/navigation';\n@wire(CurrentPageReference)\npageRef;\n```\n\nThe key-value pairs of the PageReference `state` property are serialized to URL query parameters. To create a deep link that describes the page and that a user can bookmark, update the `state` property. See [Add Query Parameters](https://developer.salesforce.com/docs/platform/lwc/guide/use-navigate-add-params-url).\n\n#### NavigationMixin\n\nApply the `NavigationMixin` to the component's base class to gain access to its APIs.\n\n```javascript\nimport { NavigationMixin } from 'lightning/navigation';\nexport default class MyCustomElement extends NavigationMixin(\n    LightningElement\n) {}\n```\n\nThe `NavigationMixin` adds two APIs to your component's class. Invoking these functions before the element is connected to the DOM can have unexpected results.\n\n-   `[NavigationMixin.Navigate](pageReference, [replace])` - A component calls this API to navigate to another page in the application.\n-   `[NavigationMixin.GenerateUrl](pageReference)` - A component calls this API to get a `promise` that resolves to the resulting URL. The component can use the URL in the `href` attribute of an anchor. It can also use the URL to open a new window using the `window.open(url)` browser API.\n\nThis example shows how to invoke these API methods from `this`:\n\n```javascript\nimport { LightningElement } from 'lwc';\nimport { NavigationMixin } from 'lightning/navigation';\n\nexport default class Example extends NavigationMixin(LightningElement) {\n    navigateToObjectHome() {\n        // Navigate to the Account home page\n        this[NavigationMixin.Navigate]({\n            type: 'standard__objectPage',\n            attributes: {\n                objectApiName: 'Account',\n                actionName: 'home',\n            },\n        });\n    }\n\n    recordPageUrl;\n\n    connectedCallback() {\n        // Generate a URL to a User record page\n        this[NavigationMixin.GenerateUrl]({\n            type: 'standard__recordPage',\n            attributes: {\n                recordId: '005B0000001ptf1IAE',\n                actionName: 'view',\n            },\n        }).then((url) => {\n            this.recordPageUrl = url;\n        });\n    }\n}\n```\n\n#### LWC Recipes\n\nThe [LWC Recipes GitHub repository](https://github.com/trailheadapps/lwc-recipes) contains code examples for Lightning Web Components that you can test in an org.\n\nFor a recipe that uses `lightning/navigation`, see the `c-nav-to-*` components in the LWC Recipes repo.\n\n#### See Also\n\n[Navigate to Pages](https://developer.salesforce.com/docs/platform/lwc/guide/use-navigate)\n\n[PageReference Types](https://developer.salesforce.com/docs/platform/lwc/guide/reference-page-reference-type)\n",
    "examples": []
  },
  {
    "tagName": "lightning-overlay",
    "shortDescription": "This component is a foundational element in the overlay library, primarily used by developers to create new overlay types, providing a simple or advanced overlay experience depending on the need for wrapping HTML.",
    "relatedComponents": {
      "lightning-modal": "optional",
      "lightning-menu": "optional",
      "lightning-menu-base": "optional"
    },
    "publicApi": [],
    "useCases": [
      "Imagine you're using a website to book a hotel room. When you click on a room to view more details, a <lightning-overlay> could be used to display a pop-up window with pictures and information about the room. This allows you to view more details without leaving the page you're on.",
      "Consider a scenario where you're using an online shopping website. When you add an item to your cart, a <lightning-overlay> could be used to show a confirmation message, letting you know that the item has been successfully added to your cart.",
      "Suppose you're using a web application to manage your tasks. When you click on a task to edit it, a <lightning-overlay> could be used to display a form where you can update the task's details. This allows you to edit the task without navigating to a different page.",
      "Imagine you're using a website to apply for a job. When you click on a job listing to view more details, a <lightning-overlay> could be used to display a pop-up window with the job description and application form. This allows you to apply for the job directly from the job listings page.",
      "Consider a scenario where you're using a website to order food. When you click on a menu item to view more details, a <lightning-overlay> could be used to show a pop-up window with a picture, ingredients, and nutritional information for the item. This allows you to view more details without leaving the menu page.",
      "Suppose you're using a web application to manage your emails. When you click on an email to read it, a <lightning-overlay> could be used to display the email content. This allows you to read the email without leaving your inbox."
    ],
    "docs": "# Overlay\n\n> Note: This component is not exposed for use by internal or external developers.\n\nThis is as low level in the overlay library as one can get. For this reason the documentation below is aimed at primarily `Lightning*` developers or those creating new overlay types. The overview examples would need much more to be fully accessible.\n\n-   Simple: Contains no wrapping HTML only a host element.\n    -   `<c-custom-overlay>`\n-   Advanced: Contains a wrapping Component. Example: `LightningModal`.\n\n## Creating a Simple Overlay\n\n```js\nimport LightningOverlay from 'lightning/overlay';\nimport { instanceName } from 'lightning/overlayUtils';\n\nclass MyOverlay extends LightningOverlay {\n    static [instanceName] = 'my-overlay';\n\n    @api customProperty = 'Default';\n}\n```\n\nUsage for the `MyOverlay` in a custom app would like like below.\n\n```js\nimport { LightningElement } from 'lwc';\nimport MyOverlay from 'my/overlay';\n\nclass MyApp extends LightningElement {\n    async handleClick() {\n        const result = await MyOverlay.open({\n            customProperty: 'Hello World!';\n        });\n        console.log(result);\n    }\n}\n```\n\n## Creating an Wrapping Component\n\nOther scenarios require wrapping HTML around the overlay component. Most commonly this is used to position an element. A common example is `LightningModal`, but alternatively this can be used for writing a shared `LightningMenu`.\n\nThe `LightningMenuBase` component works as a wrapper.\n\n```html\n<template>\n    <ul data-slot lwc:dom=\"manual\"></ul>\n</template>\n```\n\n```js\n\n```\n\nThe `LightningMenu` now looks like...\n\n```html\n\n```\n\n```js\n\n```\n\nUsage for the `MyMenu` in a custom app would like like below.\n\n```html\n<template>\n    <button click={handleClick}>{label}</button>\n</template>\n```\n\n```js\nimport { LightningElement, api } from 'lwc';\nimport MyMenu from 'my/overlay';\n\nclass MyButtonMenu extends LightningElement {\n    @api label = 'Dropdown';\n\n    async handleClick(e) {\n        const result = await MyMenu.open({\n            source: e.target,\n            options: ['Item 1'];\n        });\n        // The selected item\n        console.log(result);\n    }\n}\n```\n",
    "examples": [
      {
        "js": "import { api } from 'lwc';\nimport LightningOverlay from 'lightning/overlay';\n\nexport default class OverlayAlert extends LightningOverlay {\n    @api header = 'Header';\n\n    @api body = 'Body';\n\n    @api okayText = 'Okay';\n\n    @api cancelText = 'Cancel';\n\n    handleOkay() {\n        this.close('okay');\n    }\n\n    handleCancel() {\n        this.close('cancel');\n    }\n\n    handleDismiss() {\n        this.close('dismiss');\n    }\n\n    hasFocus = false;\n    renderedCallback() {\n        if (!this.hasFocus) {\n            const close = this.template.querySelector('header > button');\n            close.focus();\n            this.hasFocus = true;\n        }\n    }\n}\n",
        "html": "<template>\n    <lightning-focus-trap>\n        <section role=\"dialog\" tabindex=\"-1\" aria-labelledby=\"modal-heading-01\" aria-modal=\"true\"\n            aria-describedby=\"modal-content-id-1\" class=\"slds-modal slds-fade-in-open slds-modal_small\">\n            <div class=\"slds-modal__container\">\n                <header class=\"slds-modal__header\">\n                    <button class=\"slds-button slds-button_icon slds-modal__close slds-button_icon-inverse\"\n                        title=\"Close\" onclick={handleDismiss}>\n                        <svg class=\"slds-button__icon slds-button__icon_large\" aria-hidden=\"true\">\n                            <use xlink:href=\"/assets/icons/utility-sprite/svg/symbols.svg#close\"></use>\n                        </svg>\n                        <span class=\"slds-assistive-text\">Close</span>\n                    </button>\n                    <h2 id=\"modal-heading-01\" class=\"slds-modal__title slds-hyphenate\">{header}</h2>\n                </header>\n                <div class=\"slds-modal__content slds-p-around_medium\" id=\"modal-content-id-1\">\n                    <p>{body}</p>\n                </div>\n                <footer class=\"slds-modal__footer\">\n                    <button class=\"slds-button slds-button_neutral\" onclick={handleCancel}>{cancelText}</button>\n                    <button class=\"slds-button slds-button_brand\" onclick={handleOkay}>{okayText}</button>\n                </footer>\n            </div>\n        </section>\n    </lightning-focus-trap>\n    <div class=\"slds-backdrop slds-backdrop_open\"></div>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nimport OverlayAlert from 'overlay/alert';\nimport OverlayDemo from 'overlay/demo';\nimport OverlayPanel from 'overlay/panel';\n\nexport default class OverlayBasic extends LightningElement {\n    confirmResult = 'unset';\n\n    handleConfirmModal() {\n        OverlayAlert.open({\n            header: 'Are you sure?',\n            body: 'Click cancel or okay below to get a string result.',\n        }).then((result) => {\n            this.confirmResult = result;\n        });\n    }\n\n    confirmAltResult = 'unset';\n\n    handleConfirmAltModal() {\n        OverlayAlert.open({\n            header: 'Do you like this demo?',\n            body: '...',\n            okayText: 'Yes',\n            cancelText: 'Also Yes',\n        }).then((result) => {\n            this.confirmAltResult = result;\n        });\n    }\n\n    demoResult = 'unset';\n\n    handleDemoModal() {\n        OverlayDemo.open({\n            header: 'Select an Option',\n            body: 'From the list below select an item',\n            options: [\n                { id: 1, label: 'Option 1' },\n                { id: 2, label: 'Option 2' },\n            ],\n        }).then((result) => {\n            if (result === 0) {\n                this.demoResult = 'dismiss';\n            } else {\n                this.demoResult = result;\n            }\n        });\n    }\n\n    panelResult = 'unset';\n\n    handlePanel() {\n        OverlayPanel.open({\n            header: 'Select an Option',\n            body: 'From the list below select an item',\n        }).then((result) => {\n            this.demoResult = result;\n        });\n    }\n}\n",
        "html": "<template>\n    <div class=\"example\">\n        <button onclick={handleConfirmModal}>Open a Confirm Modal</button> \n        <p>Result: <code>{confirmResult}</code></p>\n    </div>\n    <div class=\"example\">\n        <button onclick={handleConfirmAltModal}>Open a Confirm Modal Alt</button> \n        <p>Result: <code>{confirmAltResult}</code></p>\n    </div>\n    <div class=\"example\">\n        <button onclick={handleDemoModal}>Open a Demo Modal</button> \n        <p>Result: <code>{demoResult}</code></p>\n    </div>\n    <div class=\"example\">\n        <button onclick={handlePanel}>Open a Panel</button> \n        <p>Result: <code>{panelResult}</code></p>\n    </div>\n</template>",
        "css": ".example {\n    margin: 0.5rem;\n    border-radius: 0.5rem;\n    background: #FFF;\n    box-shadow: 0 1px 0.25rem rgb(0 0 0 / 20%);\n    padding: 1rem;\n}"
      },
      {
        "js": "import { api } from 'lwc';\n\nimport LightningOverlay from 'lightning/overlay';\nimport OverlayAlert from 'overlay/alert';\n\nexport default class OverlayDemo extends LightningOverlay {\n    @api header = 'Header';\n\n    @api body = 'Body';\n\n    @api options = [];\n\n    handleOptionClick(e) {\n        const { target } = e;\n        const id = parseInt(target.dataset.id, 10);\n        const option = this.options.find((x) => x.id === id);\n        OverlayAlert.open({\n            header: 'Are you sure?',\n            body: `You selected \"${option.label}\".`,\n            okayText: `Yes, ${option.label}`,\n        }).then((result) => {\n            if (result === 'okay') {\n                this.close(parseInt(target.dataset.id, 10));\n            }\n        });\n    }\n\n    handleDismiss() {\n        this.close(0);\n    }\n\n    hasFocus = false;\n    renderedCallback() {\n        if (!this.hasFocus) {\n            const close = this.template.querySelector('header > button');\n            close.focus();\n            this.hasFocus = true;\n        }\n    }\n}\n",
        "html": "<template>\n    <section role=\"dialog\" tabindex=\"-1\" aria-labelledby=\"modal-heading-01\" aria-modal=\"true\"\n        aria-describedby=\"modal-content-id-1\" class=\"slds-modal slds-fade-in-open\">\n        <div class=\"slds-modal__container\">\n            <header class=\"slds-modal__header\">\n                <button class=\"slds-button slds-button_icon slds-modal__close slds-button_icon-inverse\" title=\"Close\" onclick={handleDismiss}>\n                    <svg class=\"slds-button__icon slds-button__icon_large\" aria-hidden=\"true\">\n                        <use xlink:href=\"/assets/icons/utility-sprite/svg/symbols.svg#close\"></use>\n                    </svg>\n                    <span class=\"slds-assistive-text\">Close</span>\n                </button>\n                <h2 id=\"modal-heading-01\" class=\"slds-modal__title slds-hyphenate\">{header}</h2>\n            </header>\n            <div class=\"slds-modal__content slds-p-around_medium\" id=\"modal-content-id-1\">\n                <p>{body}</p>\n                <ul>\n                    <template for:each={options} for:item=\"option\">\n                        <li key={option.id}>\n                            <button onclick={handleOptionClick} data-id={option.id}>\n                                {option.label}\n                            </button>\n                        </li>\n                    </template>\n                </ul>\n            </div>\n        </div>\n    </section>\n    <div class=\"slds-backdrop slds-backdrop_open\"></div>\n</template>"
      },
      {
        "js": "import { api } from 'lwc';\nimport LightningOverlay from 'lightning/overlay';\n\nexport default class OverlayPanel extends LightningOverlay {\n    @api header = 'Header';\n\n    @api body = 'Body';\n\n    handleDismiss() {\n        this.close('dismiss');\n    }\n\n    hasFocus = false;\n    renderedCallback() {\n        if (!this.hasFocus) {\n            const close = this.template.querySelector('div > button');\n            close.focus();\n            this.hasFocus = true;\n        }\n    }\n}\n",
        "html": "<template>\n    <lightning-focus-trap>\n        <div class=\"slds-panel slds-size_medium slds-panel_docked slds-panel_docked-left slds-is-open\" aria-hidden=\"false\">\n            <div class=\"slds-panel__header\">\n                <h2 class=\"slds-panel__header-title slds-text-heading_small slds-truncate\" title=\"Panel Header\">{header}</h2>\n                <button class=\"slds-button slds-button_icon slds-button_icon-small slds-panel__close\" title=\"Collapse Panel Header\" onclick={handleDismiss}>\n                <svg class=\"slds-button__icon\" aria-hidden=\"true\">\n                    <use xlink:href=\"/assets/icons/utility-sprite/svg/symbols.svg#close\"></use>\n                </svg>\n                <span class=\"slds-assistive-text\">Collapse Panel Header</span>\n                </button>\n            </div>\n            <div class=\"slds-panel__body\">{body}</div>\n        </div>\n    </lightning-focus-trap>\n    <!-- <div class=\"slds-backdrop slds-backdrop_open\"></div>-->\n</template>"
      }
    ]
  },
  {
    "tagName": "lightning-picklist",
    "shortDescription": "This component is a versatile selection tool that presents a combobox for single selections and a dual listbox for multiple selections, providing a user-friendly interface for choosing from a list of options.",
    "relatedComponents": {
      "lightning-combobox": "optional",
      "lightning-dual-listbox": "optional",
      "lightning-grouped-combobox": "optional",
      "lightning-grouped-mobile-combobox": "optional",
      "lightning-input-address": "optional",
      "lightning-input-field": "optional"
    },
    "publicApi": [
      {
        "name": "autocomplete",
        "typeSignature": "string",
        "examples": ["<lightning-picklist autocomplete='on'>"]
      },
      {
        "name": "disabled",
        "typeSignature": "boolean",
        "examples": ["<lightning-picklist disabled>", "<lightning-picklist disabled={isDisabled}>"]
      },
      {
        "name": "field-level-help",
        "typeSignature": "string",
        "examples": [
          "<lightning-picklist field-level-help='This is a help text'>",
          "<lightning-picklist field-level-help={helpText}>"
        ]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-picklist label='Picklist Label'>", "<lightning-picklist label={picklistLabel}>"]
      },
      {
        "name": "multiple",
        "typeSignature": "boolean",
        "examples": ["<lightning-picklist multiple>", "<lightning-picklist multiple={isMultiple}>"]
      },
      {
        "name": "name",
        "typeSignature": "string",
        "examples": ["<lightning-picklist name='picklistName'>", "<lightning-picklist name={picklistName}>"]
      },
      {
        "name": "options",
        "typeSignature": "{ label: string, value: string }[]",
        "examples": ["<lightning-picklist options={picklistOptions}>"]
      },
      {
        "name": "placeholder",
        "typeSignature": "string",
        "examples": [
          "<lightning-picklist placeholder='Select an option'>",
          "<lightning-picklist placeholder={placeholderText}>"
        ]
      },
      {
        "name": "required",
        "typeSignature": "boolean",
        "examples": ["<lightning-picklist required>", "<lightning-picklist required={isRequired}>"]
      },
      {
        "name": "size",
        "typeSignature": "number",
        "examples": ["<lightning-picklist size='5'>", "<lightning-picklist size={picklistSize}>"]
      },
      {
        "name": "show-activity-indicator",
        "typeSignature": "boolean",
        "examples": [
          "<lightning-picklist show-activity-indicator>",
          "<lightning-picklist show-activity-indicator={showIndicator}>"
        ]
      },
      {
        "name": "validity",
        "typeSignature": "object",
        "examples": ["<lightning-picklist validity={validityObject}>"]
      },
      {
        "name": "value",
        "typeSignature": "string",
        "examples": ["<lightning-picklist value='option1'>", "<lightning-picklist value={picklistValue}>"]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": ["<lightning-picklist variant='label-inline'>", "<lightning-picklist variant={picklistVariant}>"]
      },
      {
        "name": "onchange",
        "typeSignature": "(ev: CustomEvent & { detail: { value: string } }) => void",
        "examples": ["<lightning-picklist onchange={handleChange}>"]
      },
      {
        "name": "onopen",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-picklist onopen={handleOpen}>"]
      }
    ],
    "useCases": [
      "Imagine you're using a job application website. When filling out your profile, you're asked to select your highest level of education from a dropdown menu. This menu, which could be a <lightning-picklist> component, provides options like 'High School', 'Bachelor's Degree', 'Master's Degree', and 'PhD'.",
      "On a travel booking website, you're looking to book a flight. You need to select your departure city from a dropdown menu. This menu, which could be a <lightning-picklist> component, provides options like 'New York', 'Los Angeles', 'Chicago', and 'Houston'.",
      "You're using a music streaming service and want to create a new playlist. You need to select the genres for your playlist from a list. This list, which could be a <lightning-picklist> component with multiple selection enabled, provides options like 'Pop', 'Rock', 'Country', 'Jazz', and 'Classical'.",
      "On an e-commerce website, you're looking to buy a new laptop. You need to select the specifications for your laptop from a list. This list, which could be a <lightning-picklist> component with multiple selection enabled, provides options like '8GB RAM', '16GB RAM', '128GB SSD', '256GB SSD', and '1TB HDD'.",
      "You're using a food delivery app and want to order a pizza. You need to select the toppings for your pizza from a list. This list, which could be a <lightning-picklist> component with multiple selection enabled, provides options like 'Pepperoni', 'Mushrooms', 'Onions', 'Sausage', 'Bacon', and 'Extra Cheese'.",
      "On a social media platform, you're updating your profile. You need to select your interests from a list. This list, which could be a <lightning-picklist> component with multiple selection enabled, provides options like 'Music', 'Movies', 'Sports', 'Books', 'Travel', and 'Photography'."
    ],
    "docs": "# lightning-picklist\n\n> `lightning-picklist` is internal-only. It's not yet supported for use by customers on the Salesforce platform.\n\n-   [Overview](#overview)\n-   [Single Selection](#single-selection)\n-   [Multiple Selection](#multiple-selection)\n-   [Component Attributes](#component-attributes)\n-   [Option Attributes](#option-attributes)\n-   [Methods](#methods)\n-   [Custom Events](#custom-events)\n-   [Usage Considerations](#usage-considerations)\n\n## Overview\n\n`lightning-picklist` presents a [combobox](https://developer.salesforce.com/docs/component-library/bundle/lightning-combobox/example) for single selection and a [dual listbox](<(https://developer.salesforce.com/docs/component-library/bundle/lightning-dual-listbox/example)>) for multiple selection. On mobile screens, `lightning-picklist` presents a native select component.\n\n`lightning-picklist` is based on [picklist](https://lightningdesignsystem.com/components/picklist) and the [dueling picklist](https://lightningdesignsystem.com/components/picklist) blueprints in the Lightning Design System.\n\n## Single Selection\n\nTo create a dropdown menu for single selection, pass the `label` and `value` pairs to the `options` attribute. When the value is undefined or null, the `--None--` option is selected.\n\n```html\n<lightning-picklist\n    label=\"Status\"\n    value={picklistVal}\n    options={statusOptions}\n    onchange={handleChange}\n>\n</lightning-picklist>\n```\n\n```js\nimport { LightningElement } from 'lwc';\n\nexport default class SingleSelection extends LightningElement {\n    picklistVal = '';\n    statusOptions = [\n        { value: 'new', label: 'New' },\n        { value: 'in-progress', label: 'In Progress' },\n        { value: 'finished', label: 'Finished' },\n    ];\n\n    handleChange(event) {\n        this.picklistVal = event.detail.value;\n    }\n}\n```\n\n## Multiple Selection\n\nFor multiple selection, include the `multiple` attribute. Providing your own `selected-label` and `source-label` for the dual listbox is currently not supported.\n\n```html\n<lightning-picklist\n    label=\"Languages\"\n    value={picklistVal}\n    options={langOptions}\n    onchange={handleChange}\n    multiple\n>\n</lightning-picklist>\n```\n\n```js\nimport { LightningElement } from 'lwc';\n\nexport default class MultipleSelection extends LightningElement {\n    picklistVal = '';\n    langOptions = [\n        { value: 'en', label: 'English' },\n        { value: 'cn', label: 'Chinese' },\n        { value: 'de', label: 'German' },\n        { value: 'jp', label: 'Japanese' },\n    ];\n\n    handleChange(event) {\n        this.picklistVal = event.detail.value;\n    }\n}\n```\n\n## Component Attributes\n\nUse the following attributes to customize `lightning-picklist`.\n\n| Attribute Name          | Type    | Description                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| ----------------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| autocomplete            | string  | Reserved for internal use. The `readonly` attribute is used on the input field and the field cannot be autofilled.                                                                                                                                                                                                                                                                                                            |\n| disabled                | boolean | Specifies whether the menu is disabled and users cannot interact with it. The default is false. When the picklist is empty, it is disabled by default. If the picklist is explicitly set to be disabled, it stays disabled even when new options are provided.                                                                                                                                                                |\n| field-level-help        | string  | Help text detailing the purpose and function of the menu of options. The text is displayed in a tooltip above the menu.                                                                                                                                                                                                                                                                                                       |\n| label                   | string  | The text label for an option.                                                                                                                                                                                                                                                                                                                                                                                                 |\n| multiple                | boolean | Specifies whether multiple options can be selected. A dueling picklist displays with two lists. The default is false.                                                                                                                                                                                                                                                                                                         |\n| name                    | string  | The identifier for the component.                                                                                                                                                                                                                                                                                                                                                                                             |\n| options                 | object  | An array of menu options with key-value pair for `label` and `value`.                                                                                                                                                                                                                                                                                                                                                         |\n| placeholder             | string  | The placeholder text on the input field. The default is an empty string.                                                                                                                                                                                                                                                                                                                                                      |\n| required                | boolean | Specifies whether an option must be selected. The default is false. When the picklist is required only one option is available, that option is automatically selected.                                                                                                                                                                                                                                                        |\n| size                    | number  | The number of rows in the list that should be visible at one time. Use `size` with `multiple`. Valid values are between 3 to 10. The default is 4. The size is set to 4 if you provide a value not between 3 to 10.                                                                                                                                                                                                           |\n| show-activity-indicator | boolean | Displays a spinner at the bottom of the options. If `multiple` is used, the spinner is displayed in the first list. The default is false.                                                                                                                                                                                                                                                                                     |\n| validity                | object  | Represents the validity states that an element can be in, with respect to constraint validation.                                                                                                                                                                                                                                                                                                                              |\n| value                   | string  | The value of the selected option. If empty and `required` is set to true, the component is in an invalid state.                                                                                                                                                                                                                                                                                                               |\n| variant                 | string  | The variant changes the appearance of an input field. Accepted variants include standard, `label-inline`, `label-hidden`, and `label-stacked`. This value defaults to standard, which displays the label above the field. `label-hidden` hides the label but make it available to assistive technology. `label-inline` horizontally aligns the label and input field. `label-stacked` places the label above the input field. |\n\n## Option Attributes\n\nAn option represents an item in the dropdown menu. Pass in the following key-value pairs to the `options` component attribute.\n\n| Key Name | Type   | Description                            |\n| -------- | ------ | -------------------------------------- |\n| label    | string | The label for the option or menu item. |\n| value    | object | The value associated with the option.  |\n\n## Methods\n\n**`blur()`**\n\nRemoves focus from the input element.\n\n**`checkValidity()`**\n\nIndicates whether the select element has any validity errors. Returns the valid attribute value (Boolean) on the ValidityState object.\n\n**`focus()`**\n\nSets focus on the input element.\n\n**`reportValidity()`**\n\nDisplays the error messages and returns false if the input is invalid. If the input is valid, `reportValidity()` clears displayed error messages and returns true.\n\n**`setCustomValidity(message)`**\n\nSets a custom error message to be displayed when a form is submitted.\n\n-   `message` (string) - Describes the error. If `message` is an empty string, the error is reset.\n\n**`showHelpMessageIfInvalid()`**\n\nDisplays an error message on an invalid select field. An invalid field fails at least one constraint validation and returns false when `checkValidity()` is called.\n\n## Custom Events\n\n**`change`**\n\nThe event fired when an option is selected. `event.detail.value` returns the selected value.\n\n**`open`**\n\nThe event fired when the dropdown menu is opened.\n\n## Usage Considerations\n\n`lightning-picklist` displays the native `select` element on mobile devices. If you don't need to work with smaller screen sizes, use `lightning-combobox` and `lightning-dual-listbox` for desktop.\n\n`lightning-picklist` doesn't currently support autocomplete. To display dropdown options with icons and autocomplete (typeahead) support, consider using `lightning-grouped-combobox` or `lightning-grouped-mobile-combobox`.\n\n`lightning-picklist` can be used as an Aura component. For example:\n\n```html\n<aura:component>\n    <aura:attribute\n        name=\"options\"\n        type=\"List\"\n        default=\"[\n        { label: 'English', value: 'en' },\n        { label: 'German', value: 'de' },\n        { label: 'Spanish', value: 'es' },\n        { label: 'French', value: 'fr' },\n        { label: 'Italian', value: 'it' }]\"\n    />\n    <aura:attribute name=\"value\" type=\"String\" default=\"fr\" />\n    <lightning:picklist\n        label=\"Status\"\n        options={!v.options}\n        value={!v.value}\n    />\n</aura:component>\n```\n\n## Examples\n\nSee the `lightning-input-address` and `lightning-input-field` components in this repo.\n",
    "examples": []
  },
  {
    "tagName": "lightning-pill",
    "shortDescription": "This component is a user interface element that represents an item, such as an account name or case number, with optional features like a remove button, an icon or avatar, and error indication, providing an interactive experience for users to add or remove items on demand.",
    "relatedComponents": {
      "lightning-avatar": "optional",
      "lightning-icon": "optional",
      "lightning-pill-container": "optional",
      "lightning-navigation": "optional",
      "lightning-button-icon": "optional"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-pill label='Pill Label'>", "<lightning-pill label={pillLabel}>"]
      },
      {
        "name": "href",
        "typeSignature": "string",
        "examples": ["<lightning-pill href='https://www.example.com'>", "<lightning-pill href={url}>"]
      },
      {
        "name": "onremove",
        "typeSignature": "(ev: CustomEvent & { detail: { name: string } }) => void",
        "examples": ["<lightning-pill onremove={handleRemove}>"]
      },
      {
        "name": "name",
        "typeSignature": "string",
        "examples": ["<lightning-pill name='account'>", "<lightning-pill name={pillName}>"]
      },
      {
        "name": "onclick",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-pill onclick={handleClick}>"]
      },
      {
        "name": "has-error",
        "typeSignature": "boolean",
        "examples": ["<lightning-pill has-error>", "<lightning-pill has-error={isError}>"]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": ["<lightning-pill variant='plain'>", "<lightning-pill variant={pillVariant}>"]
      }
    ],
    "useCases": [
      "Imagine you're using a website to search for a new home. As you enter your search criteria, each item you add (like '3 bedrooms', '2 bathrooms', 'garage') appears as a small, removable tag or 'pill' under the search bar. This is a <lightning-pill> in action, allowing you to easily see and manage your search terms.",
      "Consider a social media platform where you can tag your friends in a post. As you start typing a friend's name, it auto-completes and when you select it, the name appears as a small, removable tag or 'pill' in the tagging area. This is another use of the <lightning-pill> component, making it easy to add, view, and remove tags.",
      "Think about an email client where you can add recipients to your email. As you type in an email address and hit enter, the address appears as a small, removable tag or 'pill' in the 'To' field. This is a <lightning-pill> component, allowing you to easily add, view, and remove email recipients.",
      "Imagine you're using a project management tool where you can assign tasks to team members. As you assign a task, the team member's name appears as a small, removable tag or 'pill' next to the task. This is a <lightning-pill> component, making it easy to add, view, and remove task assignments.",
      "Consider a music streaming service where you can create a playlist. As you add songs to your playlist, each song appears as a small, removable tag or 'pill'. This is a <lightning-pill> component, allowing you to easily add, view, and remove songs from your playlist.",
      "Think about a shopping website where you can filter products by various attributes. As you select an attribute (like 'red', 'cotton', 'large'), it appears as a small, removable tag or 'pill' under the filter section. This is a <lightning-pill> component, making it easy to add, view, and remove filters."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Pills\n      description: Pills can include links and use a handler for the remove button (X).\n    - name: avatarPill\n      label: Pill With an Avatar\n      description: A pill includes an avatar by nesting a lightning-avatar component.\n    - name: iconPill\n      label: Pill With an Icon\n      description: A pill includes an icon by nesting a lightning-icon component.\n    - name: errorPill\n      label: Pill With an Error\n      description: A pill indicates an error condition by specifying the has-error attribute.\n---\n\nA `lightning-pill` component represents an item, such as an account name or\ncase number. By default, pills are rendered with a remove button. They’re useful for displaying read-only text that can be added and removed on demand, for example, a list of email addresses or a list of keywords.\n\nThis example creates a basic pill with a link.\n\n```html\n<template>\n    <lightning-pill\n        label=\"Pill Label\"\n        href=\"https://www.example.com\"\n        onremove={handleRemove}\n    >\n    </lightning-pill>\n</template>\n```\n\nURLs without a protocol use the host domain's protocol. For example, `www.example.com` is prefixed with `https://` if the host domain's protocol is `https://`.\n\n#### Inserting an Icon or Avatar\n\nA pill can contain an icon or avatar to represent the type of object. Nest a `lightning-icon` or `lightning-avatar` component inside the `lightning-pill` component.\n\nInsert an icon on the pill using `lightning-icon`. For more information, see [lightning-icon](bundle/lightning-icon/documentation).\n\n```html\n<template>\n    <lightning-pill\n        name=\"account\"\n        label=\"Pill Label\"\n        href=\"https://www.example.com\"\n    >\n        <lightning-icon icon-name=\"standard:account\" alternative-text=\"Account\">\n        </lightning-icon>\n    </lightning-pill>\n</template>\n```\n\nInsert an avatar on the pill using `lightning-avatar`. For more information, see [lightning-avatar](bundle/lightning-avatar/documentation).\n\n```html\n<template>\n    <lightning-pill name=\"user\" label=\"User Name\">\n        <lightning-avatar\n            src=\"https://www.lightningdesignsystem.com/assets/images/avatar2.jpg\"\n            fallback-icon-name=\"standard:user\"\n            alternative-text=\"User avatar\"\n            variant=\"circle\"\n        ></lightning-avatar>\n    </lightning-pill>\n</template>\n```\n\n#### Interacting with Pills\n\nA pill has three clickable elements.\n\n-   The optional icon or avatar\n-   The text label\n-   The remove button\n\nAll three elements trigger the `onclick` handler when clicked. If you provide an `href` value, clicking the text label triggers the `onclick` handler and then takes you to the provided path.\n\nClicking the remove button on the pill fires the `remove` event and then the `click` event. Use the optional `onremove` and `onclick` handlers to remove the pill and perform an action. You must hide or remove the pill on your own using the `onremove` handler, as shown in the example below. If you don't specify a pill removal behavior, clicking the remove button doesn't have a visible effect.\n\nWhen an `href` value is present, clicking the text label navigates to a link, but clicking the icon or avatar doesn’t. To prevent your browser from navigating to a link when you click a pill's label, call `event.preventDefault()` in the `onclick` handler.\n\nWhen an `href` value is present, the default variant is `link`. If no `href` is present, the default variant is `plain`.\n\nTo disable a pill's link, set `variant=\"plain\"`, which removes the anchor element. The `plain` variant renders the pill without a link and ignores the `href` attribute.\n\nThis example hides a pill when the remove button is clicked.\n\n```html\n<template>\n    <template if:true={showPill}>\n        <lightning-pill\n            label=\"Account\"\n            href=\"https://www.example.com\"\n            onremove={handleRemoveOnly}\n            onclick={handleClick}\n        >\n        </lightning-pill>\n    </template>\n</template>\n```\n\nTo prevent navigating to the link when the remove button is clicked, call `event.preventDefault()` in the `onremove` handler. The `click` event is still fired when you click the text label. However, calling `event.preventDefault()` in the `onremove` handler prevents the `click` event from firing when you click the remove button.\n\n```javascript\nimport { LightningElement } from 'lwc';\nexport default class PillRemoveExample extends LightningElement {\n    showPill = true;\n\n    handleRemoveOnly(event) {\n        event.preventDefault();\n        this.showPill = !this.showPill;\n    }\n\n    handleClick(event) {\n        // this won't run when you click the remove button\n        alert('The pill was clicked!');\n    }\n}\n```\n\n#### Displaying an Error\n\nDisplay a pill in an error state when the containing text doesn't match a\npre-defined collection of items, such as when an email address is invalid or a\ncase number doesn't exist.\n\nUse the `has-error` attribute to denote an error on a pill. This attribute inserts an error icon next to the label and changes the label text to red. Providing an icon or avatar in this context has no effect on the pill; the error icon is still displayed.\n\n```html\n<template>\n    <lightning-pill\n        label=\"Pill with error\"\n        href=\"https://www.example.com\"\n        has-error\n    >\n    </lightning-pill>\n</template>\n```\n\n#### Component Styling\n\n`lightning-pill` implements the\n[pills](https://www.lightningdesignsystem.com/components/pills) blueprint in the\nSalesforce Lightning Design System (SLDS).\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds padding on the left of the second pill using an SLDS class.\n\n```html\n<lightning-pill label=\"Astro\"></lightning-pill>\n<lightning-pill label=\"Codey\" class=\"slds-p-left_x-small\"></lightning-pill>\n```\n\nTo apply custom styling, define a custom class using the `class` attribute.\n\n```html\n<lightning-pill label=\"Astro\" class=\"my-pill\"></lightning-pill>\n```\n\nUse SLDS styling hooks to customize the component's styles. For example, specify the background color on the pill using the `--slds-c-pill-color-background` custom property.\n\n```css\n.my-pill {\n    --slds-c-pill-color-background: orange;\n}\n```\n\nAdditionally, the remove button contains customizable elements similar to `lightning-button-icon`. You can customize the styles on the remove button using the `--slds-c-button-*` custom properties. See the [lightning-button-icon documentation](bundle/lightning-button-icon/documentation).\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/pills/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\nTo understand how we implemented SLDS in `lightning-pill`, see the **Source Code** section.\n\n#### Usage Considerations\n\nIcons are not available in Lightning Out, but they are available in Lightning Components for Visualforce and other experiences.\n\nTo create more than one pill, use the `lightning-pill-container` component, which gives you access to the pill array via the `itemremove` event.\n\nSpecifying a target to change where the link should open is not supported. The link opens on the same tab or window. To create a URL that navigates to another page in Salesforce, use\n[`lightning-navigation`](bundle/lightning-navigation/documentation).\n\nThis component has usage differences from its Aura counterpart. See [Base Components: Aura Vs Lightning Web Components](https://developer.salesforce.com/docs/platform/lwc/guide/migrate-map-aura-lwc-components) in the Lightning Web Components Developer Guide.\n\n#### Accessibility\n\nWhen using `lightning-avatar`, use the `alternative-text` attribute to describe the avatar, such as a user's initials or name. This description provides the value for the `alt` attribute in the `img` HTML tag.\n\nWhen using `lightning-icon`, use the `alternative-text` attribute to describe the icon. For example, specify \"Account\" instead of \"Pill icon\". This description is used as assistive text on the pill.\n\nPress the Tab key to move focus to a pill with a link, and tab again to move focus to the remove button. To remove a pill, press the Enter key or space bar when the focus is on the remove button. You can define your own behavior to remove the pill from view, such as using the `onremove` handler shown in **Interacting with Pills**. To navigate to the target of a link on a pill, press the Enter key when the focus is on the pill.\n\nIf a pill doesn't have a link, the only focusable item is the remove button.\n\n#### Custom Events\n\n**`remove`**\n\nThe first event fired when you click the remove button.\n\nThe `remove` event returns the following parameter.\n\n| Parameter | Type   | Description                          |\n| --------- | ------ | ------------------------------------ |\n| name      | string | The name of the pill that's removed. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                                              |\n| ---------- | ----- | ------------------------------------------------------------------------------------------------------------------------ |\n| bubbles    | false | This event does not bubble.                                                                                              |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event to prevent the `click` event from being fired. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                                           |\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class AvatarPill extends LightningElement {}\n",
        "html": "<template>\n    <lightning-pill label=\"Pill Label\">\n        <lightning-avatar src=\"https://www.lightningdesignsystem.com/assets/images/avatar2.jpg\" fallback-icon-name=\"standard:user\" variant=\"circle\"  alternative-text=\"User avatar\"></lightning-avatar>\n    </lightning-pill>\n</template>\n\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Basic extends LightningElement {\n    infoText;\n\n    handleRemove() {\n        this.infoText = 'Remove button was clicked';\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-vertical_medium\">\n        <p>Info: <span class=\"slds-text-heading_small\">{infoText}</span></p>\n    </div>\n    <lightning-pill label=\"With link\" href=\"https://www.example.com\"></lightning-pill>\n    <lightning-pill label=\"With remove handler\" onremove={handleRemove}></lightning-pill>\n</template>\n\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ErrorPill extends LightningElement {}\n",
        "html": "<template>\n        <lightning-pill label=\"Pill Label\" has-error></lightning-pill>\n</template>\n\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class IconPill extends LightningElement {}\n",
        "html": "<template>\n    <lightning-pill label=\"Pill Label\">\n        <lightning-icon icon-name=\"standard:account\" alternative-text=\"Account\"></lightning-icon>\n    </lightning-pill>\n</template>\n\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class PlainLinkPill extends LightningElement {}\n",
        "html": "<template>\n    <lightning-pill label=\"Pill Label\" href=\"/path/to/some/where\" variant=\"plainLink\">\n        <lightning-avatar src=\"/docs/component-library/app/images/examples/avatar2.jpg\" fallback-icon-name=\"standard:user\" variant=\"circle\"  alternative-text=\"User avatar\"></lightning-avatar>\n    </lightning-pill>\n</template>\n\n"
      }
    ]
  },
  {
    "tagName": "lightning-pill-container",
    "shortDescription": "This component is a user interface element that displays a list of user selections, represented as \"pills\", in a container that resembles an input field, providing an interactive experience for users to manage their selections.",
    "relatedComponents": {
      "lightning-pill": "required",
      "lightning-button": "optional"
    },
    "publicApi": [
      {
        "name": "items",
        "typeSignature": "{ label: string, name?: string, type?: string, href?: string, src?: string, fallbackIconName?: string, variant?: string, alternativeText?: string, iconName?: string }[]",
        "examples": ["<lightning-pill-container items={items}>"]
      },
      {
        "name": "onitemremove",
        "typeSignature": "(ev: CustomEvent & { detail: { item: string, index: number } }) => void",
        "examples": ["<lightning-pill-container items={items} onitemremove={handleItemRemove}>"]
      },
      {
        "name": "is-collapsible",
        "typeSignature": "boolean",
        "examples": [
          "<lightning-pill-container items={items} is-collapsible>",
          "<lightning-pill-container items={items} is-collapsible={isCollapsible}>"
        ]
      },
      {
        "name": "is-expanded",
        "typeSignature": "boolean",
        "examples": [
          "<lightning-pill-container items={items} is-expanded>",
          "<lightning-pill-container items={items} is-expanded={isExpanded}>"
        ]
      },
      {
        "name": "single-line",
        "typeSignature": "boolean",
        "examples": [
          "<lightning-pill-container items={items} single-line>",
          "<lightning-pill-container items={items} single-line={singleLine}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're using a website to book a vacation and you're selecting multiple destinations to visit. As you select each destination, it appears as a small 'pill' in a container at the top of the page. This is the <lightning-pill-container> component in action, allowing you to easily see and manage your selections.",
      "Consider a scenario where you're using a project management tool. You're assigning team members to a task, and each time you assign a member, their name appears in a <lightning-pill-container> at the top of the task. This allows you to easily see who's assigned to the task and remove members if needed.",
      "Imagine you're using an online shopping platform and you're filtering products by multiple categories. Each time you select a category, it appears as a 'pill' in a container at the top of the page. This is the <lightning-pill-container> component, allowing you to easily manage your selected filters."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Pill Container\n      description: A pill container showing pills that represent users.\n---\n\nA `lightning-pill-container` component represents a list of pills in a container\nthat resembles an input field. Use `lightning-pill-container` to display a user's\nselections when filtering a list, such as from a multi-select picklist.\n\n`lightning-pill-container` displays a pill using the `lightning-pill` component, which can display an icon or avatar next to the text label.\n\nTo specify the pills, set the `items` attribute to an array of values in your component's JavaScript.\n\nBy default, all pills in the container are displayed and wrap to additional lines if they can't fit on one line.\nFor information about changing the behavior, see **Managing Pill Layout in the Container**.\n\nThis example creates three pills: a text-only pill, a pill with a link and an avatar, and\na pill with an icon.\n\n```html\n<template>\n    <lightning-pill-container items={items}> </lightning-pill-container>\n</template>\n```\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class PillContainerExample extends LightningElement {\n    items = [\n        {\n            label: 'My Pill',\n            name: 'mypill',\n        },\n        {\n            type: 'avatar',\n            label: 'Avatar Pill',\n            href: 'https://www.example.com',\n            name: 'avatarpill',\n            src: '/my/path/avatar.jpg',\n            fallbackIconName: 'standard:user',\n            variant: 'circle',\n            alternativeText: 'User avatar',\n        },\n        {\n            type: 'icon',\n            label: 'Icon Pill',\n            name: 'iconpill',\n            iconName: 'standard:account',\n            alternativeText: 'Account',\n        },\n    ];\n}\n```\n\nA text-only pill supports the following attributes. These attributes can also\nbe used to create a pill with an avatar or icon.\n\n-   `label`: Required. The text label that displays in the pill.\n-   `name`: The name for the pill. This value is optional and can be used to identify the pill in a callback.\n\nTo create a pill with a link, use the following attribute.\n\n-  `href`: Required. The URL for the link.\n\nTo create a pill with an avatar, use the following attributes.\n\n-   `type`: The media type. Use `avatar`.\n-   `src`: Required. The URL of the avatar.\n-   `fallbackIconName`: The Lightning Design System name of the icon to use as a fallback when the image fails to load. Names are written in the format 'standard:account' where 'standard' is the category, and 'account' is the specific icon to be displayed. Only icons from the standard and custom categories are allowed.\n-   `variant`: Changes the shape of the avatar. Valid values are empty, circle, and square. This value defaults to square.\n-   `alternativeText`: The alternative text used to describe the avatar, which is displayed as hover text on the image.\n\nTo create a pill with an icon, use the following attributes.\n\n-   `type`: The media type. Use `icon`.\n-   `iconName`: Required. The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed. Only utility icons can be used for the `iconName`.\n-   `alternativeText`: The alternative text used to describe the icon. Describe what happens when you click the button, for example 'Upload File', not what the icon looks like, 'Paperclip'.\n\n`lightning-pill-container` provides two variants: `bare` and `standard` (default). They’re visually the same. However, the `standard` variant renders pills in an unordered list element. For more information, see the **Accessibility** section.\n\n#### Removing Pills\n\nClicking the remove button triggers the `onitemremove` handler.\n\n```html\n<template>\n    <lightning-pill-container items={items} onitemremove={handleItemRemove}>\n    </lightning-pill-container>\n</template>\n```\n\nYou can retrieve the name of the pill that's clicked in the event handler and\nremove the pill from view.\n\n```javascript\nimport { LightningElement, track } from 'lwc';\n\nexport default class PillContainerRemoveExample extends LightningElement {\n    @track items = [\n        {\n            label: 'My Pill',\n            name: 'mypill',\n        },\n        {\n            type: 'avatar',\n            label: 'Avatar Pill',\n            name: 'avatarpill',\n            src: '/my/path/avatar.jpg',\n            fallbackIconName: 'standard:user',\n            variant: 'circle',\n            alternativeText: 'User avatar',\n        },\n        {\n            type: 'icon',\n            label: 'Icon Pill',\n            name: 'iconpill',\n            iconName: 'standard:account',\n            alternativeText: 'Account',\n        },\n    ];\n\n    handleItemRemove(event) {\n        const name = event.detail.item.name;\n        alert(name + ' pill was removed!');\n        const index = event.detail.index;\n        this.items.splice(index, 1);\n    }\n}\n```\n\n#### Managing Pill Layout in the Container\n\nSeveral boolean attributes let you control the layout of pills in the container. These attributes are\nset to false by default, which makes all pills display and wrap to multiple lines.\n\n- `is-collapsible`: Determines whether the list of pills can be expanded and collapsed. If `is-collapsible` is true, `is-expanded` can determine whether a pill list displays all the pills or one line of pills. If `is-collapsible` is false or not specified, the `is-expanded` attribute has no effect regardless of its value.\n- `is-expanded`: Determines whether the full list of pills is shown. Set `is-collapsible` to true if you want to set `is-expanded` to expand and collapse the list. If you set `is-expanded` to false and don't set `is-collapsible` to true, the list is expanded.\n- `single-line`: Specifies that the pill container can display one line of pills. By default, if pills can't fit on one line, they’re wrapped to additional lines to fit the container. Set `single-line` to true to limit pill display to one line. This attribute overrides `is-collapsible` and `is-expanded`.\n\nIf all pills aren't displayed, the component shows a text button indicating how many more pills there are.\nFor example, if there are five more pills that aren’t displayed, the text button shows `+5 more`. The text button fires the `focus` event when you click it.\n\nTo display a long list of pills as collapsed, set `is-collapsible` to true and optionally set `is-expanded` to false. Otherwise, pills are displayed expanded.\n\n##### Expand and Collapse Pills Programmatically\n\nUse `is-collapsible` and `is-expanded` to programmatically expand and collapse the pills.\n\nThis example sets `is-collapsible` and uses a button to change the value of `is-expanded`.\n\n```html\n<template>\n    <div style=\"width: 600px\">\n            <lightning-pill-container\n                items={items}\n                is-collapsible\n                is-expanded={isExpanded}\n            >\n            </lightning-pill-container>\n    </div>\n    <lightning-button onclick={setExpanded} label=\"Expand and Collapse\"></lightning-button>\n</template>\n```\n\nThe list of pills is initially collapsed. The button expands and collapses the list.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class PillContainerCanCollapse extends LightningElement {\n    isExpanded = false;\n\n    setExpanded(event){\n        this.isExpanded = !this.isExpanded ;\n    }\n\n    items = [\n        {\n        //define the pills\n        }\n    ];\n}\n```\n##### Display All Pills With the `+n more` Button\n\nIf all pills aren't displayed, the component shows a text button labeled `+n more` to indicate more pills can be displayed. By default, `lightning-pill-container` doesn’t handle the `focus` event that’s fired when you click the button. You can handle the event to display more pills or write logic to do something else when the button is clicked.\n\nThis example sets the pills to be collapsible but not expanded and handles the focus event.\n\n```html\n<template>\n    <div style=\"width: 600px\">\n            <lightning-pill-container\n                items={items}\n                is-collapsible={collapsible}\n\t            is-expanded={expanded}\n                onfocus={handlePillExpansion}\n            >\n            </lightning-pill-container>\n    </div>\n  </template>\n  ```\n\nThe list of pills is initially collapsed. When there are too many pills to be displayed, the text button labeled `+n more` displays. The handler for the `focus` event enables all the pills to display.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class PillContainerMoreButtonExpands extends LightningElement {\n    collapsible = true;\n\texpanded = false;\n\nhandlePillExpansion(){\n    this.expanded = true;\n}\n\n    items = [\n        {\n        //define the pills\n        }\n    ];\n}\n```\n\n#### Component Styling\n\n`lightning-pill-container` implements the\n[Pills with Container](https://lightningdesignsystem.com/components/pills/#Pill-with-Container) blueprint in the\nSalesforce Lightning Design System (SLDS) for the `base` variant.\n\n`lightning-pill-container` implements the\n[Listbox of Pill Options](https://www.lightningdesignsystem.com/components/pills/#Listbox-Of-Pill-Options) blueprint in the\nSalesforce Lightning Design System (SLDS) for the `standard` variant.\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nTo apply custom styling, use the `:host` selector or define a custom class using the `class` attribute. Use SLDS styling hooks to customize the component's styles.\n\n`lightning-pill-container` renders pills using `lightning-pill`. Use the `--slds-c-pill-*` custom properties on `lightning-pill`.\n\nCustom properties for pill containers work only with particular `lightning-pill-container` variants for the remove button.\n\n| CSS Custom Property                     | `lightning-pill-container` Variants |\n| --------------------------------------- | ----------------------------------- |\n| `--slds-c-icon-color-background`         | `standard` (default)                |\n| `--slds-c-icon-color-foreground-default` | `standard` (default)                |\n| `--slds-c-button-color-background`       | `bare`                              |\n| `--slds-c-button-color-border`           | `bare`                              |\n| `--slds-c-button-radius-border`          | `bare`                              |\n| `--slds-c-button-sizing-border`          | `bare`                              |\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/pills/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\nTo understand how we implemented SLDS in `lightning-pill-container`, see the **Source Code** section.\n\n#### Accessibility\n\nBy default, `lightning-pill-container` renders pills using the `standard` variant, which uses an unordered list element to display pills. Press the Tab key to focus on the first pill and use the Left Arrow and Right Arrow keys to navigate through the pills. Use the Tab key to navigate to the remove button in a pill with a link. Use arrow keys to navigate between pills.\nThe focus goes to a link if present, otherwise focus goes to the remove button.\n\nThe `bare` variant only supports the Tab key for navigating between focusable elements in the container's pills. The arrow keys aren't supported.\n\nOn mobile devices, both container variants display pills with the close button as a focusable element for accessibility.\n\nTo remove a pill, press Enter or the space bar when the pill's remove button receives focus. On mobile devices, you can tap the remove button to remove a pill.\n\nFor pills with links, use the Tab key or arrow keys to focus on the pill's link, then press Enter to navigate to the link target. If you don't navigate away from the pill, tabbing again puts focus on the remove button.\n\n#### Custom Events\n\n**`itemremove`**\n\nThe event fired when a pill is removed.\n\nThe `itemremove` event returns the following parameters.\n\n| Parameter | Type   | Description                            |\n| --------- | ------ | -------------------------------------- |\n| item      | string | The name of the pill that's removed.   |\n| index     | number | The position of the pill in the array. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                    |\n| ---------- | ----- | ------------------------------------------------------------------------------ |\n| bubbles    | false | This event does not bubble.                                                    |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event.     |\n| composed   | false | This event does not propagate outside the template in which it was dispatched. |\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Basic extends LightningElement {\n    items = [\n        {\n            type: 'avatar',\n            href: 'https://www.salesforce.com',\n            label: 'Avatar Pill 1',\n            src: 'https://www.lightningdesignsystem.com/assets/images/avatar1.jpg',\n            fallbackIconName: 'standard:user',\n            variant: 'circle',\n            alternativeText: 'User avatar',\n            isLink: true,\n        },\n        {\n            type: 'avatar',\n            href: '',\n            label: 'Avatar Pill 2',\n            src: 'https://www.lightningdesignsystem.com/assets/images/avatar2.jpg',\n            fallbackIconName: 'standard:user',\n            variant: 'circle',\n            alternativeText: 'User avatar',\n        },\n        {\n            type: 'avatar',\n            href: 'https://www.google.com',\n            label: 'Avatar Pill 3',\n            src: 'https://www.lightningdesignsystem.com/assets/images/avatar3.jpg',\n            fallbackIconName: 'standard:user',\n            variant: 'circle',\n            alternativeText: 'User avatar',\n            isLink: true,\n        },\n    ];\n}\n",
        "html": "<template>\n    <lightning-pill-container items={items} ></lightning-pill-container>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-popup",
    "shortDescription": "This component is used to create interactive popup windows that open in response to user actions, providing a focused and immersive experience by trapping focus within the popup and allowing for custom content and alignment options.",
    "relatedComponents": {
      "lightning-button": "optional",
      "lightning-input": "optional"
    },
    "publicApi": [
      {
        "name": "aria-describedby",
        "typeSignature": "string",
        "examples": ["<lightning-popup aria-describedby='popup-body'>"]
      },
      {
        "name": "onautofocus",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-popup onautofocus={handleAutoFocus}>"]
      },
      {
        "name": "onreturnfocus",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-popup onreturnfocus={handleReturnFocus}>"]
      },
      {
        "name": "onalignmentupdate",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-popup onalignmentupdate={handleAlignmentUpdate}>"]
      },
      {
        "name": "onclickout",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-popup onclickout={handleClickOut}>"]
      },
      {
        "name": "onclose",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-popup onclose={handleClose}>"]
      }
    ],
    "useCases": [
      "Imagine you're shopping online and you see a product you're interested in. You hover your mouse over the product image and a <lightning-popup> appears, providing more detailed information about the product, such as its specifications, price, and availability.",
      "You're filling out a form on a website and you're unsure about one of the fields. You click on a small question mark icon next to the field and a <lightning-popup> appears, providing additional guidance and information about what is expected in that field.",
      "You're on a social media website and you see a post from a friend that you want to share. You click on the 'share' button and a <lightning-popup> appears, giving you options to share the post on your own timeline, in a private message, or on another social media platform.",
      "You're on a news website reading an article. You come across a term you're not familiar with and click on it. A <lightning-popup> appears, providing a definition or explanation of the term.",
      "You're on a travel booking website looking at different flight options. You click on a flight to see more details and a <lightning-popup> appears, providing more information about the flight such as the airline, layover details, and baggage allowance.",
      "You're on a music streaming website and you want to add a song to one of your playlists. You click on the 'add to playlist' button and a <lightning-popup> appears, allowing you to select which playlist you want to add the song to."
    ],
    "docs": "# Popup\n\nUse `lightning-popup` to create popup windows in response to user interaction.\nTypically, you open a popup when a user interacts with an element by\nclicking it or hovering the mouse over it.\n\nYou can align a popup with a reference element, such as the element that opens it, or another element.\n\nA popup must have at least one tabbable element, which is an element that users can focus by using\nthe Tab key. When a popup opens, focus automatically goes to the first tabbable element in the popup.\nThe popup traps focus, so you can't press Tab to move focus out of the popup. You can\nreturn focus to the underlying window by closing the popup.\n\nWhen a popup element has focus, you can close it by pressing\nthe Escape key or clicking outside the popup. If you close a popup\nby pressing the Escape key, the `close` event fires. If you click outside the popup,\nthe `clickout` event fires first, and then the `close` event fires. This enables you\nto perform an action when the user clicks outside the popup and prevent closing.\nFor example, you could prompt the user to save changes made in the popup.\n\nYou can optionally add a close button that fires the `close` event.\n\nDefine the content of the popup window using other components or HTML elements\ninside `lightning-popup`.\n\nThe component does not provide Lightning Design System styling of its own.\nYou can apply Lightning Design System classes such as the `slds-popover` classes\nto the elements within `lightning-popup`. See [Popovers](https://www.lightningdesignsystem.com/components/popovers/)\nin the Lightning Design System for examples.\n\nTo open the popup using JavaScript, use the `show()` method. See the **Methods** section for more information.\n\nThis example uses `lightning-button` to open a popup. The content of the popup\nis a set of div elements that specify `slds-popover` classes and enclose a `lightning-input` component.\n\n```html\n<template>\n    <lightning-button\n        label=\"Click to show a popup\"\n        onclick={openPopup}\n    ></lightning-button>\n\n    <lightning-popup aria-describedby=\"popup-body\">\n        <div class=\"slds-popover\">\n            <div id=\"popup-body\" class=\"slds-popover__body\">\n                <lightning-input label=\"An input\"></lightning-input>\n                <div class=\"slds-m-top_small\">\n                    <lightning-button\n                        variant=\"brand\"\n                        label=\"Save\"\n                        onclick={handleSave}\n                    ></lightning-button>\n                    <lightning-button\n                        variant=\"brand\"\n                        label=\"Cancel\"\n                        onclick={handleCancel}\n                    ></lightning-button>\n                </div>\n            </div>\n        </div>\n    </lightning-popup>\n</template>\n```\n\nThe button calls the `openPopup()` function, which uses the `show()` method with `referenceElement` to align the popup relative to the button.\n\n```js\nimport { LightningElement, track } from 'lwc';\n\nexport default class PopupExample extends LightningElement {\n    @track enteredText = '';\n\n    openPopup() {\n        const referenceElement =\n            this.template.querySelector('lightning-button');\n        // Show the popup relative to the button, and left-align\n        // the top of the popup with the bottom of the button\n        this.popup.show(referenceElement, {\n            reference: { horizontal: 'left', vertical: 'bottom' },\n            popup: { horizontal: 'left', vertical: 'top' },\n        });\n    }\n\n    handleCancel() {\n        this.popup.close();\n    }\n\n    handleSave() {\n        const name = this.template.querySelector('lightning-input');\n        this.enteredText = name.value;\n\n        this.popup.close();\n    }\n\n    get popup() {\n        return this.template.querySelector('lightning-popup');\n    }\n}\n```\n\n#### Positioning the Popup\n\nWhen a `referenceElement` is specified, the popup is positioned according to the specified rules in the `alignmentOptions`. The position rules specify\nthe preferred position, but the position can change depending on available space.\n\nWhen the content of the popup doesn't fit, it can be flipped on horizontal or vertical axes for better fit. The `alignmentupdate` event is fired at that point with the new popup alignment.\n\nFor these properties:\n\n```javascript\n    {\n      reference: { vertical: 'bottom', horizontal: 'center' },\n      popup: { vertical: 'top', horizontal: 'center'\n    },\n```\n\nThe diamonds in this diagram represent the alignment points defined by `reference` and `popup` properties.\n\n```\n ┌──────────────────┐\n │                  │\n │     reference    │\n │                  │\n └────────♦─────────┘\n   ┌──────♦───────┐\n   │              │\n   │     popup    │\n   │              │\n   └──────────────┘\n```\n\n#### Methods\n\n**`show(referenceElement, alignmentOptions)`**\n\nDisplays a popup. If you don't specify any parameters, the popup opens below the element that opened it. The popup is left-aligned with the element, with the top of the popup in contact with the bottom of the element.\n\n| Parameter          | Type   | Description                                                                                                                          |\n| ------------------ | ------ | ------------------------------------------------------------------------------------------------------------------------------------ |\n| `referenceElement` | Object | An optional element to use as the anchor point for locating the popup.                                                               |\n| `alignmentOptions` | Map    | An optional list of properties and key-value pairs used to set the preferred alignment between the `referenceElement` and the popup. |\n\n`alignmentOptions` are specified with the following properties.\n\n| Property    | Key          | Values                        | Description                                                                                                                                                                                                        |\n| ----------- | ------------ | ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `reference` | `vertical`   | `top`, `center`, or `bottom`  | Preferred vertical alignment of the reference element relative to the popup. For example, specify `vertical: bottom` to make the popup align with the bottom of the reference element.                             |\n|             | `horizontal` | `left` , `center`, or `right` | Preferred horizontal alignment of the reference element relative to the popup. For example, specify `horizontal: left` to make the popup align to the left edge of the reference element.                          |\n| `popup`     | `vertical`   | `top`, `center`, or `bottom`  | Preferred vertical alignment of the popup relative to the reference element. For example, specify `vertical: top` to make the reference element align with the top of the popup.                                   |\n|             | `horizontal` | `left` , `center`, or `right` | Preferred horizontal alignment of the popup relative to the reference element. For example, specify `horizontal: left` to make the popup align to the left edge of the reference element.                          |\n| `padding`   | -            | number                        | Space in rem units to place between the contacting edges of the reference element and popup. Use `padding` to create space between the popup and the reference element and also to accommodate an arrow or nubbin. |\n| `offset`    | -            | number                        | Space in rem units to offset the popup along the contacting edges. The offset in effect slides the popup so it is not aligned, and can be used to accommodate an arrow or nubbin.                                  |\n\n`alignmentOptions` allows the following structure:\n\n```javascript\n     {\n        reference: { vertical: 'bottom', horizontal: 'right' },\n        popup: { vertical: 'bottom', horizontal: 'left' },\n        padding: 1,\n        offset: 1,\n     }\n```\n\n#### Custom Events\n\n**`autofocus`**\n\nThe event fired when the popup is about to place the focus on the first element you can tab to. If the event is canceled, the focus is not placed.\n\nThe `autofocus` event doesn't return a `detail` property.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                    |\n| ---------- | ----- | ------------------------------------------------------------------------------ |\n| bubbles    | false | This event does not bubble.                                                    |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event.     |\n| composed   | false | This event does not propagate outside the template in which it was dispatched. |\n\n**`returnfocus`**\n\nThe event fired when the focus is returned to the element that had focus before the popup was displayed. If the event is canceled, the focus is not returned to the element.\n\nThe `returnfocus` event doesn't return a `detail` property.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                    |\n| ---------- | ----- | ------------------------------------------------------------------------------ |\n| bubbles    | false | This event does not bubble.                                                    |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event.     |\n| composed   | false | This event does not propagate outside the template in which it was dispatched. |\n\n**`alignmentupdate`**\n\nThe event fired whenever the alignment of the popup has been updated, such as when the component flipped on the vertical or horizontal axis. This can occur if the space available for displaying the popup changes, and the alignment needs to change. The `alignmentupdate` event also fires on initial positioning of the popup.\n\nThe `alignmentupdate` event doesn't return a `detail` property.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                               |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                            |\n\n**`clickout`**\n\nThe event fired when the user clicks outside of the popup after the popup has focus. The default behavior is to close the popup. If the event is canceled, the popup does not close.\n\nThe `clickout` event doesn't return a `detail` property.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                    |\n| ---------- | ----- | ------------------------------------------------------------------------------ |\n| bubbles    | false | This event does not bubble.                                                    |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event.     |\n| composed   | false | This event does not propagate outside the template in which it was dispatched. |\n\n**`close`**\n\nThe event fired when the popup is open and the user presses the Esc key while focus is inside the popup, or\nclicks outside of the popup after the focus has been inside the popup.\n\nThe `close` event doesn't return a `detail` property.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                    |\n| ---------- | ----- | ------------------------------------------------------------------------------ |\n| bubbles    | false | This event does not bubble.                                                    |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event.     |\n| composed   | false | This event does not propagate outside the template in which it was dispatched. |\n\n#### Accessibility\n\nA popup contains at least one tabbable element which automatically gets focus when the popup opens.\n\nIf a close button is present:\n\n-   Press Tab to go from the last tabbable element to the close button.\n-   Press Shift-Tab to go from the close button to the last tabbable element in the popup.\n-   Press Enter when focused on the close button to close the popup.\n\nPress Escape if the popup doesn't include a close button.\n\nWhen the popup closes, focus returns to the element that had focus when the popup opened.\nIf there were no focused elements when the popup opened, the popup closes without making any focus changes.\n\nIf you create a popup that opens on hover over an element, provide a button nearby\nto enable keyboard or screen reader users to open the popup.\n",
    "examples": [
      {
        "js": "import { LightningElement, track } from 'lwc';\n\nexport default class PopupExample extends LightningElement {\n    @track enteredText = '';\n\n    openPopup() {\n        const referenceElement =\n            this.template.querySelector('lightning-button');\n        // Show the popup relative to the button, left-aligns the top of the popup with the bottom of the button\n        this.popup.show(referenceElement, {\n            reference: { horizontal: 'left', vertical: 'bottom' },\n            popup: { horizontal: 'left', vertical: 'top' },\n        });\n    }\n\n    handleCancel() {\n        this.popup.close();\n    }\n\n    handleSave() {\n        const name = this.template.querySelector('lightning-input');\n        this.enteredText = name.value;\n\n        this.popup.close();\n    }\n\n    get popup() {\n        return this.template.querySelector('lightning-popup');\n    }\n}\n",
        "html": "<template>\n    <lightning-button label=\"Click to show a popup\" onclick={openPopup}></lightning-button>\n\n    <lightning-popup aria-describedby=\"popup-body\">\n        <div class=\"slds-popover\">\n            <div id=\"popup-body\" class=\"slds-popover__body\">\n                <lightning-input label=\"An input\"></lightning-input>\n                <div class=\"slds-m-top_small\">\n                    <lightning-button variant=\"brand\" label=\"Save\" onclick={handleSave}></lightning-button>\n                    <lightning-button variant=\"brand\" label=\"Cancel\" onclick={handleCancel}></lightning-button>\n                </div>\n            </div>\n        </div>\n    </lightning-popup>\n\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class PopupExample extends LightningElement {\n    openPopup() {\n        const referenceElement =\n            this.template.querySelector('lightning-button');\n        this.popup.show(referenceElement, {\n            reference: { horizontal: 'right', vertical: 'top' },\n            popup: { horizontal: 'left', vertical: 'top' },\n            // To accommodate the nubbin (arrow pointer)\n            padding: 1,\n            offset: 1.25,\n        });\n    }\n\n    handleAlignmentUpdate(event) {\n        this._alignment = event.target.alignment;\n    }\n\n    handleAutoFocus(event) {\n        // Don't focus on the first tabbable element\n        event.preventDefault();\n\n        // Focus on the input instead\n        this.template.querySelector('lightning-input').focus();\n    }\n\n    get popupClasses() {\n        const { horizontal, vertical } = this._alignment;\n        const nubbinClass = `slds-nubbin_${horizontal}-${vertical}`;\n        return `slds-popover slds-popover_walkthrough ${nubbinClass}`;\n    }\n\n    get popup() {\n        return this.template.querySelector('lightning-popup');\n    }\n}\n",
        "html": "<template>\n    <lightning-button label=\"Click to show a popup\" onclick={openPopup}></lightning-button>\n\n    <lightning-popup\n        aria-labelledby=\"popup-header\"\n        aria-describedby=\"popup-body\"\n        onautofocus={handleAutoFocus}\n        onalignmentupdate={handleAlignmentUpdate}>\n        <div class={popupClasses}>\n            <button onclick={closePopup}\n                class=\"slds-button slds-button_icon slds-button_icon-small slds-float_right slds-popover__close slds-button_icon-inverse\">\n                <lightning-icon icon-name=\"utility:close\" size=\"xx-small\"></lightning-icon>\n            </button>\n\n            <header id=\"popup-header\" class=\"slds-popover__header\">Manage your channels</header>\n\n            <div id=\"popup-body\" class=\"slds-popover__body\">\n                <p class=\"slds-p-bottom_medium slds-p-top_medium\">This is the content of the body</p>\n\n                <lightning-input type=\"email\" label=\"Email Address\" placeholder=\"Email Address\"\n                                 variant=\"label-hidden\"></lightning-input>\n            </div>\n            <footer class=\"slds-popover__footer\">\n                <div class=\"slds-grid slds-grid_vertical-align-center\">\n                    <span class=\"slds-text-title\">Step 2 of 4</span>\n                    <button class=\"slds-button slds-button_success slds-col_bump-left\">Setup Email</button>\n                    <button class=\"slds-button slds-button_brand slds-col_bump-left\">Next</button>\n                </div>\n            </footer>\n        </div>\n    </lightning-popup>\n\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-position-library",
    "shortDescription": "This component is a testing tool that provides an interactive playground for experimenting with the positioning of elements such as helptext, button-menu, combobox, and datepicker.",
    "relatedComponents": {
      "lightning-helptext": "optional",
      "lightning-button-menu": "optional",
      "lightning-combobox": "optional",
      "lightning-datepicker": "optional",
      "lightning-position-library": "required"
    },
    "publicApi": [],
    "useCases": [
      "Imagine you're using a website and you need to select a date for a booking. When you click on the date field, a calendar pops up right below the field, allowing you to easily select the date you want. This is a scenario where the <lightning-position-library> component might be used.",
      "Consider a scenario where you're filling out a form on a website. When you hover over a field, a small box appears with helpful information about what you're supposed to enter in the field. This is another situation where the <lightning-position-library> component could be utilized.",
      "Picture a website where you're given a list of options to choose from. When you click on the dropdown menu, the list of options appears directly below the menu, making it easy for you to see and select your choice. This is a case where the <lightning-position-library> component would be beneficial."
    ],
    "docs": "Position Library playground can be used to test positon library for `helptext`, `button-menu`, `combobox` and `datepicker`.\n\nTo use the playground, go to `ui-lightning-stubs/src/main/modules/demo/app/app.html` and add the tag `<positionLibrary-playground></positionLibrary-playground>` in the template.\n",
    "examples": [
      {
        "js": "import { LightningElement, api } from 'lwc';\n\nexport default class PlaygroundCompoennts extends LightningElement {\n    @api component;\n\n    get isHelpText() {\n        return this.component === 'helpText';\n    }\n\n    get isButtonMenu() {\n        return this.component === 'button-menu';\n    }\n\n    get isComboBox() {\n        return this.component === 'combobox';\n    }\n\n    get isDatePicker() {\n        return this.component === 'datepicker';\n    }\n\n    get comboBoxOptions() {\n        return [\n            { label: 'New', value: 'new' },\n            { label: 'In Progress', value: 'inProgress' },\n            { label: 'Finished', value: 'finished' },\n        ];\n    }\n}\n",
        "html": "<template>\n    <template if:true={isHelpText}>\n        <lightning-helptext\n            content=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vel orci porta non pulvinar neque.\"\n        ></lightning-helptext>\n    </template>\n\n    <template if:true={isButtonMenu}>\n        <lightning-button-menu alternative-text=\"Show menu\">\n            <lightning-menu-item\n                value=\"MenuItemOne\"\n                label=\"Menu Item One\"\n            ></lightning-menu-item>\n            <lightning-menu-item\n                value=\"MenuItemTwo\"\n                label=\"Menu Item Two\"\n            ></lightning-menu-item>\n            <lightning-menu-item\n                value=\"MenuItemThree\"\n                label=\"Menu Item Three\"\n            ></lightning-menu-item>\n            <lightning-menu-item\n                value=\"MenuItemFour\"\n                label=\"Menu Item Four\"\n            ></lightning-menu-item>\n        </lightning-button-menu>\n    </template>\n\n    <template if:true={isComboBox}>\n        <lightning-combobox\n            name=\"progress\"\n            label=\"Status\"\n            placeholder=\"Select Progress\"\n            options={comboBoxOptions}\n        ></lightning-combobox>\n    </template>\n\n    <template if:true={isDatePicker}>\n        <lightning-datepicker label=\"Select a date\"></lightning-datepicker>\n    </template>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport { classSet } from 'lightning/utils';\n\nexport default class PositionLibraryPlayground extends LightningElement {\n    selectedComponent = 'helpText';\n    containerPosition = 'topLeft';\n    componentPosition = 'topLeft';\n\n    containerWidth = 300;\n    containerHeight = 200;\n\n    isContainerScroll = false;\n    isViewportScroll = false;\n    isUseShadowRootContainer = false;\n\n    componentOptions = [\n        { label: 'helpText', value: 'helpText' },\n        { label: 'button-menu', value: 'button-menu' },\n        { label: 'combobox', value: 'combobox' },\n        { label: 'datepicker', value: 'datepicker' },\n    ];\n\n    positionOptions = [\n        { label: 'top left', value: 'topLeft' },\n        { label: 'top right', value: 'topRight' },\n        { label: 'bottom left', value: 'bottomLeft' },\n        { label: 'bottom right', value: 'bottomRight' },\n    ];\n\n    handleComponentSelector(event) {\n        this.selectedComponent = event.detail.value;\n    }\n\n    handleContainerPosition(event) {\n        this.containerPosition = event.detail.value;\n    }\n\n    handleComponentPosition(event) {\n        this.componentPosition = event.detail.value;\n    }\n\n    get computedComponentClass() {\n        return classSet().add({\n            'top-left': this.componentPosition === 'topLeft',\n            'top-right': this.componentPosition === 'topRight',\n            'bottom-left': this.componentPosition === 'bottomLeft',\n            'bottom-right': this.componentPosition === 'bottomRight',\n        });\n    }\n\n    // container has style overflow-y:auto(slds-scrollable_y)\n    get computedContainerClass() {\n        const classnames = classSet('container slds-scrollable_y');\n\n        return classnames.add({\n            'top-left': this.containerPosition === 'topLeft',\n            'top-right': this.containerPosition === 'topRight',\n            'bottom-left': this.containerPosition === 'bottomLeft',\n            'bottom-right': this.containerPosition === 'bottomRight',\n        });\n    }\n\n    get computedConfigClass() {\n        const classnames = classSet('config');\n\n        return classnames.add({\n            'config-bottom':\n                this.containerPosition === 'topLeft' ||\n                this.containerPosition === 'topRight',\n        });\n    }\n\n    handleWidthSlider(event) {\n        this.containerWidth = event.detail.value;\n        const css = document.body.style;\n        css.setProperty('--containerWidth', `${this.containerWidth}px`);\n    }\n\n    handleHeightSlider(event) {\n        this.containerHeight = event.detail.value;\n        const css = document.body.style;\n        css.setProperty('--containerHeight', `${this.containerHeight}px`);\n    }\n\n    handleContainerScroll() {\n        this.isContainerScroll = !this.isContainerScroll;\n    }\n\n    handleViewportScroll() {\n        this.isViewportScroll = !this.isViewportScroll;\n    }\n\n    handleShadowContainer() {\n        this.isUseShadowRootContainer = !this.isUseShadowRootContainer;\n        if (this.isUseShadowRootContainer) {\n            this.isContainerScroll = false;\n        }\n    }\n\n    get isContainerScrollDisabled() {\n        return this.isUseShadowRootContainer === true;\n    }\n}\n",
        "html": "<template>\n    <!-- Container -->\n    <div class={computedContainerClass}>\n        <p class=\"container-text\">Container</p>\n\n        <template if:true={isUseShadowRootContainer}>\n            <positionLibrary-playground-shadow-scroll>\n                <positionLibrary-components\n                    component={selectedComponent}\n                    class={computedComponentClass}\n                ></positionLibrary-components>\n            </positionLibrary-playground-shadow-scroll>\n        </template>\n\n        <template if:false={isUseShadowRootContainer}>\n            <positionLibrary-components\n                component={selectedComponent}\n                class={computedComponentClass}\n            ></positionLibrary-components>\n        </template>\n\n        <template if:true={isContainerScroll}>\n            <div class=\"container-placeholder\"></div>\n        </template>\n    </div>\n\n    <!-- Config panel -->\n    <div class={computedConfigClass}>\n        <div class=\"slds-text-heading_medium slds-m-bottom_x-small\">\n            Configuration\n        </div>\n\n        <div class=\"slds-grid slds-gutters_small\">\n            <div class=\"slds-col slds-size_1-of-5\">\n                <lightning-combobox\n                    name=\"components\"\n                    label=\"Select a component\"\n                    placeholder=\"Please select\"\n                    value={selectedComponent}\n                    options={componentOptions}\n                    onchange={handleComponentSelector}\n                >\n                </lightning-combobox>\n            </div>\n            <div class=\"slds-col slds-size_2-of-5\">\n                <lightning-slider\n                    label=\"Container Width(px)\"\n                    step=\"50\"\n                    min=\"100\"\n                    max=\"500\"\n                    value={containerWidth}\n                    onchange={handleWidthSlider}\n                ></lightning-slider>\n                <lightning-slider\n                    label=\"Container Height(px)\"\n                    step=\"50\"\n                    min=\"100\"\n                    max=\"500\"\n                    value={containerHeight}\n                    onchange={handleHeightSlider}\n                ></lightning-slider>\n            </div>\n            <div class=\"slds-col slds-size_1-of-5\">\n                <lightning-combobox\n                    name=\"containerPosition\"\n                    label=\"Container Position\"\n                    placeholder=\"Please select\"\n                    value={containerPosition}\n                    options={positionOptions}\n                    onchange={handleContainerPosition}\n                >\n                </lightning-combobox>\n                <lightning-combobox\n                    name=\"componentPosition\"\n                    label=\"Component Position\"\n                    placeholder=\"Please select\"\n                    value={componentPosition}\n                    options={positionOptions}\n                    onchange={handleComponentPosition}\n                >\n                </lightning-combobox>\n            </div>\n            <div class=\"slds-col slds-size_1-of-5\">\n                <lightning-input\n                    type=\"toggle\"\n                    name=\"container scrollbar\"\n                    label=\"Container Scrollbar\"\n                    message-toggle-active=\"Enabled\"\n                    message-toggle-inactive=\"Disabled\"\n                    checked={isContainerScroll}\n                    onchange={handleContainerScroll}\n                    disabled={isContainerScrollDisabled}\n                ></lightning-input>\n                <lightning-input\n                    type=\"toggle\"\n                    name=\"viewport scrollbar\"\n                    label=\"Viewport Scrollbar\"\n                    message-toggle-active=\"Enabled\"\n                    message-toggle-inactive=\"Disabled\"\n                    checked={isViewportScroll}\n                    onchange={handleViewportScroll}\n                    class=\"slds-m-top_medium\"\n                ></lightning-input>\n                <lightning-input\n                    type=\"toggle\"\n                    name=\"ShadowRoot Container\"\n                    label=\"ShadowRoot Container\"\n                    message-toggle-active=\"Enabled\"\n                    message-toggle-inactive=\"Disabled\"\n                    checked={isUseShadowRootContainer}\n                    onchange={handleShadowContainer}\n                    class=\"slds-m-top_medium\"\n                ></lightning-input>\n            </div>\n        </div>\n    </div>\n\n    <!-- Placeholder to enable scrollbar of viewport -->\n    <template if:true={isViewportScroll}>\n        <div class=\"viewport-placeholder\"></div>\n    </template>\n</template>\n",
        "css": ".config {\n    background: white;\n    border-radius: 5px;\n    padding: 8px 15px 13px 15px;\n    position: fixed;\n    width: auto;\n    left: 10px;\n    right: 10px;\n}\n\n.config-bottom {\n    bottom: 130px;\n}\n\n.slds-col {\n    border-left: 1px solid #eef4ff;\n    border-right: 1px solid #eef4ff;\n}\n\n.container {\n    width: var(--containerWidth, 300px);\n    height: var(--containerHeight, 200px);\n    border: 3.5px solid #0176d3;\n}\n\n.container-text {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n}\n\n.container-placeholder {\n    background: transparent;\n    height: 1000px;\n    /* width: 50%;\n    margin: auto; */\n    word-wrap: break-word;\n}\n\n.top-left {\n    position: absolute;\n    left: 0;\n    top: 0;\n}\n\n.top-right {\n    position: absolute;\n    right: 0;\n    top: 0;\n}\n\n.bottom-left {\n    position: absolute;\n    left: 0;\n    bottom: 0;\n}\n\n.bottom-right {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n}\n\n.viewport-placeholder {\n    height: 200vh;\n    width: 50%;\n    background: transparent;\n}\n\n*::-webkit-scrollbar {\n    -webkit-appearance: none;\n    width: 6px;\n}\n\n*::-webkit-scrollbar-thumb {\n    border-radius: 4px;\n    background-color: rgba(0, 0, 0, 0.5);\n    box-shadow: 0 0 1px rgba(255, 255, 255, 0.5);\n}\n\nbody {\n    overflow-y: auto;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class PlaygroundShadowScroll extends LightningElement {\n    handleScroll(event) {\n        const { callback } = event.detail;\n        callback(event.composedPath());\n        event.stopPropagation();\n    }\n}\n",
        "html": "<template>\n    <div\n        style=\"overflow: auto; width: 100%; height: 100%; background: #f3f2f2\"\n        onprivatescrollablecontainer={handleScroll}\n    >\n        <slot></slot>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-progress-bar",
    "shortDescription": "This component is a visual indicator that displays the progress of an operation, such as a file download or upload, from left to right, providing users with a clear understanding of the operation's completion status.",
    "relatedComponents": {
      "lightning-button": "optional"
    },
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "number",
        "examples": [
          "<lightning-progress-bar value={progress}>",
          "<lightning-progress-bar value={50}>",
          "<lightning-progress-bar value={myProgressValue}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're on a website and you're downloading a large file. The website might use a <lightning-progress-bar> to show you how much of the file has been downloaded so far. This way, you can see how much longer you might have to wait for the download to finish.",
      "You're uploading a batch of photos to a social media site. The site uses a <lightning-progress-bar> to show you the progress of your upload. This helps you understand how much longer you might have to wait before you can start sharing your photos with your friends.",
      "You're taking an online course and there's a quiz at the end of each module. The course platform uses a <lightning-progress-bar> to show you how many questions you've answered and how many are left. This way, you can see how much more work you have to do before you finish the quiz."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Progress Bar\n      description: A progress bar can be displayed with an initial value and supports multiple sizes.\n    - name: inAction\n      label: Progress Bar In Action\n      description: A progress bar denotes completion when it reaches 100.\n    - name: variants\n      label: Progress Bar with Circular Variant\n      description: The circular variant adds a border radius to the progress bar to give it a rounded look.\n---\n\nA `lightning-progress-bar` component displays the progress of an operation from\nleft to right, such as for a file download or upload.\n\nThis component inherits styling from\n[progress bars](https://www.lightningdesignsystem.com/components/progress-bar/) in the\nLightning Design System.\n\nThis example loads the progress bar when you click a Start/Stop button.\n\n```html\n<template>\n    <div class=\"slds-p-bottom_medium\">\n        <lightning-button label={computedLabel} onclick={toggleProgress}>\n        </lightning-button>\n    </div>\n    <lightning-progress-bar value={progress}> </lightning-progress-bar>\n</template>\n```\n\nHere's the JavaScript that changes the value of the progress bar.\nSpecifying `this.progress === 100 ? this.resetProgress() : this.progress + 10`\nincreases the progress value by 10% and stops the animation when the progress\nreaches 100%. The progress bar is updated every 200 milliseconds.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class DemoComponent extends LightningElement {\n    progress = 0;\n    isProgressing = false;\n\n    updateProgress() {\n        this.progress =\n            this.progress === 100 ? this.resetProgress() : this.progress + 10;\n    }\n\n    resetProgress() {\n        this.progress = 0;\n        clearInterval(this._interval);\n    }\n\n    disconnectedCallback() {\n        clearInterval(this._interval);\n    }\n\n    get computedLabel() {\n        return this.isProgressing ? 'Stop' : 'Start';\n    }\n\n    toggleProgress() {\n        if (this.isProgressing) {\n            // stop\n            this.isProgressing = false;\n            if (!this.progress) {\n                this.progress = 0;\n            }\n            clearInterval(this._interval);\n        } else {\n            // start\n            this.isProgressing = true;\n            this._interval = setInterval(this.updateProgress.bind(this), 200);\n        }\n    }\n}\n```\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ProgressBarBasic extends LightningElement {}\n",
        "html": "<template>\n    <lightning-progress-bar value=\"50\" size=\"large\"></lightning-progress-bar>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ProgressBarInAction extends LightningElement {\n    progress = 0;\n    isProgressing = false;\n\n    get computedLabel() {\n        return this.isProgressing ? 'Stop' : 'Start';\n    }\n\n    toggleProgress() {\n        if (this.isProgressing) {\n            // stop\n            this.isProgressing = false;\n            clearInterval(this._interval);\n        } else {\n            // start\n            this.isProgressing = true;\n            // eslint-disable-next-line @lwc/lwc/no-async-operation\n            this._interval = setInterval(() => {\n                this.progress = this.progress === 100 ? 0 : this.progress + 1;\n            }, 200);\n        }\n    }\n\n    disconnectedCallback() {\n        // it's needed for the case the component gets disconnected\n        // and the progress is being increased\n        // this code doesn't show in the example\n        clearInterval(this._interval);\n    }\n}\n",
        "html": "<template>\n    <lightning-progress-bar value={progress}></lightning-progress-bar>\n    <lightning-button label={computedLabel} onclick={toggleProgress} class=\"slds-m-top_medium\"></lightning-button>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ProgressBarVariants extends LightningElement {}\n",
        "html": "<template>\n    <p>\n        Below is a progressbar of variant base.\n    </p>\n    <lightning-progress-bar value=\"50\" size=\"large\"></lightning-progress-bar>\n    <p>\n        Below is a progressbar of variant circular.\n    </p>\n    <lightning-progress-bar value=\"50\" size=\"large\" variant=\"circular\"></lightning-progress-bar>\n</template>"
      }
    ]
  },
  {
    "tagName": "lightning-progress-indicator",
    "shortDescription": "This component is a visual tool that displays a horizontal list of steps in a process, indicating the current step, completed steps, and upcoming steps, providing users with a clear understanding of their progress in a given task or process.",
    "relatedComponents": {
      "lightning-progress-step": "required",
      "lightning-button": "optional"
    },
    "publicApi": [
      {
        "name": "type",
        "typeSignature": "string",
        "examples": [
          "<lightning-progress-indicator type=\"base\">",
          "<lightning-progress-indicator type=\"path\">",
          "<lightning-progress-indicator type={myTypeValue}>"
        ]
      },
      {
        "name": "current-step",
        "typeSignature": "string",
        "examples": [
          "<lightning-progress-indicator current-step=\"step2\">",
          "<lightning-progress-indicator current-step={currentStepValue}>"
        ]
      },
      {
        "name": "has-error",
        "typeSignature": "boolean",
        "examples": [
          "<lightning-progress-indicator has-error=\"true\">",
          "<lightning-progress-indicator has-error={hasErrorValue}>"
        ]
      }
    ],
    "useCases": [
      "In an online course platform, a <lightning-progress-indicator> could be used to show a student's progress through a course. Each step could represent a module or lesson within the course. As the student completes each lesson, the progress indicator would update to show the completed lessons and the current lesson the student is on.",
      "In a multi-step online form, such as a loan application, a <lightning-progress-indicator> could be used to show the user's progress through the form. Each step could represent a section of the form, such as 'Personal Information', 'Employment Information', 'Financial Information', etc. As the user completes each section, the progress indicator would update to show the completed sections and the current section the user is on.",
      "In an e-commerce website, a <lightning-progress-indicator> could be used to show a customer's progress through the checkout process. Each step could represent a stage of the checkout process, such as 'Shopping Cart', 'Shipping Information', 'Payment Information', and 'Review Order'. As the customer completes each stage, the progress indicator would update to show the completed stages and the current stage the customer is on.",
      "In a project management tool, a <lightning-progress-indicator> could be used to show a team's progress through a project. Each step could represent a phase of the project, such as 'Planning', 'Design', 'Development', 'Testing', and 'Deployment'. As the team completes each phase, the progress indicator would update to show the completed phases and the current phase the team is on.",
      "In a fitness app, a <lightning-progress-indicator> could be used to show a user's progress through a workout plan. Each step could represent a week of the plan. As the user completes each week, the progress indicator would update to show the completed weeks and the current week the user is on.",
      "In a job application portal, a <lightning-progress-indicator> could be used to show an applicant's progress through the application process. Each step could represent a stage of the process, such as 'Application Submitted', 'Initial Screening', 'Interview', and 'Offer'. As the applicant progresses through each stage, the progress indicator would update to show the completed stages and the current stage the applicant is on."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Base Type Progress Indicator\n      description: A progress indicator shows the current step in a process and any previous or later steps.\n    - name: pathType\n      label: Path Type Progress Indicator\n      description: The path type displays with a different visual styling than the base progress indicator.\n    - name: pathTypeWithIteration\n      label: Path Type with Iteration\n      description: Steps can be created from a data source using iteration.\n    - name: pathTypeWithIfCondition\n      label: Path Type with If Condition\n      description: Steps can be displayed conditionally.\n---\n\nA `lightning-progress-indicator` component displays a horizontal list of steps\nin a process, indicating the number of steps in a given process, the current\nstep, as well as prior steps completed. For example, Sales Path uses a\nprogress indicator to guide sales reps through the stages of the sales\nprocess.\n\nYou can create progress indicators with different visual styling by specifying\nthe `type` attribute. Set `type=\"base\"` to create a component that implements the\n[progress indicator](https://www.lightningdesignsystem.com/components/progress-indicator/)\nblueprint in the Lightning Design System. The vertical progress indicator isn't currently supported.\n\nSet `type=\"path\"` to create a\ncomponent that implements the\n[path](https://www.lightningdesignsystem.com/components/path/) blueprint in the\nLightning Design System. Stage coaching information isn't currently supported.\n\nTo create steps, use one or more `lightning-progress-step` component along with `label`\nand `value` attributes. To specify the current step, the `current-step`\nattribute must match one of the `value` attributes on a\n`lightning-progress-step` component.\n\n```html\n<template>\n    <lightning-progress-indicator current-step=\"step2\">\n        <lightning-progress-step label=\"Step One\" value=\"step1\">\n        </lightning-progress-step>\n        <lightning-progress-step label=\"Step Two\" value=\"step2\">\n        </lightning-progress-step>\n        <lightning-progress-step label=\"Step Three\" value=\"step3\">\n        </lightning-progress-step>\n    </lightning-progress-indicator>\n</template>\n```\n\nIf the type is not specified, the default type `base` is used.\nThe `label` value is displayed in a tooltip when you hover\nover the step. If the progress indicator type is `path`, the label is\ndisplayed on hover if the step is completed or on the step itself if it's a\ncurrent or incomplete step.\n\nThis example creates a path showing the current step at \"Step Two\". \"Step One\"\nis marked completed and \"Step Three\" is not yet completed.\n\n```html\n<template>\n    <lightning-progress-indicator type=\"path\" current-step=\"step2\">\n        <lightning-progress-step label=\"Step One\" value=\"step1\">\n        </lightning-progress-step>\n        <lightning-progress-step label=\"Step Two\" value=\"step2\">\n        </lightning-progress-step>\n        <lightning-progress-step label=\"Step Three\" value=\"step3\">\n        </lightning-progress-step>\n    </lightning-progress-indicator>\n</template>\n```\n\nThe component displays the current step in an active state. It marks all steps preceding the current step as completed.\n\n#### Implementing the Error State\n\nTo denote an error on the current step, set `has-error` to `true`. Only the `base` type supports the error state.\nThis example creates a progress indicator that updates to the next step and applies an error on the current step.\n\n```html\n<lightning-progress-indicator\n    current-step={current}\n    type=\"base\"\n    has-error={error}\n>\n    <lightning-progress-step\n        label=\"Step 1\"\n        value=\"s1\"\n    ></lightning-progress-step>\n    <lightning-progress-step\n        label=\"Step 2\"\n        value=\"s2\"\n    ></lightning-progress-step>\n    <lightning-progress-step\n        label=\"Step 3\"\n        value=\"s3\"\n    ></lightning-progress-step>\n    <lightning-progress-step\n        label=\"Step 4\"\n        value=\"s4\"\n    ></lightning-progress-step>\n</lightning-progress-indicator>\n<lightning-button label=\"Next step\" onclick={nextStep}></lightning-button>\n<lightning-button label=\"Show error\" onclick={addError}></lightning-button>\n```\n\nApplying an error state on the current step updates the completed icon to an error icon,\nsimilar to the [progress indicator](https://www.lightningdesignsystem.com/components/progress-indicator/#Error-in-a-Step) SLDS blueprint.\n\n```js\nimport { LightningElement } from 'lwc';\n\nexport default class ProgressIndicatorError extends LightningElement {\n    current = 's3';\n    error = false;\n\n    nextStep() {\n        this.current = 's4';\n    }\n\n    addError() {\n        this.error = true;\n    }\n}\n```\n\n#### Accessibility\n\nEach progress step is rendered with assistive text, which is constructed from the step's label and a description of the step's state.\nFor example, for a step labeled Contacted, the assistive text is \"Contacted - Current Stage\" when the step is the current step, and \"Contacted - Stage Complete\" when the step is completed. The text of the step's state can't be changed.\n\n| Step      | Assistive Text         |\n| --------- | ---------------------- |\n| Current   | Label - Current Stage  |\n| Inactive  | Label                  |\n| Completed | Label - Stage Complete |\n| Error     | Label                  |\n\nThe assistive text for a step that's inactive or has an error doesn't include information about the step's state.\n\nFor the `base` type, you can use the Tab key to navigate from one step to the next. Each step connects to the next\nstep with a horizontal progress bar, such that two steps share one bar.\nPress Shift+Tab to go to the previous step. The progress bar renders with `aria-valuenow` set to a scale of 0 to 100,\nwhich defines the current value for the progress bar. For example, if you have 4 steps and the third step is the current,\n`aria-valuenow` is set to 66, since 2 out of 3 bars are marked as completed.\nSimilarly, the `aria-valuemin` and `aria-valuemax` attributes are set to 0 and 100 respectively.\n\nFor the `path` type, press Tab to set focus on the active stage and use the Up and Down Arrow keys\nor the Left and Right arrow keys to navigate from one stage to another. The `aria-selected` attribute on the hyperlink element associated to the stage is set to `true` when a stage receives focus and `false` when it doesn't receive focus.\n\nWhen you navigate away from the current active stage, the stage remains the current stage but the shift in focus makes it inactive. The current stage changes color from dark blue to white to indicate it's not the active stage. Additionally:\n\n-   Navigating to an incomplete stage makes it an active incomplete stage, which changes its color from gray to dark blue\n-   Navigating to a completed stage makes it an active completed stage, which changes its color from green to dark blue\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ProgressIndicatorBasic extends LightningElement {}\n",
        "html": "<template>\n    <p>\n        A progress indicator displays the steps in a process. All steps preceding the step specified by currentStep are marked completed.\n    </p>\n    <lightning-progress-indicator current-step=\"3\" type=\"base\" has-error=\"true\" variant=\"base\">\n        <lightning-progress-step label=\"Step 1\" value=\"1\"></lightning-progress-step>\n        <lightning-progress-step label=\"Step 2\" value=\"2\"></lightning-progress-step>\n        <lightning-progress-step label=\"Step 3\" value=\"3\"></lightning-progress-step>\n        <lightning-progress-step label=\"Step 4\" value=\"4\"></lightning-progress-step>\n    </lightning-progress-indicator>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ProgressIndicatorPathType extends LightningElement {}\n",
        "html": "<template>\n    <lightning-progress-indicator current-step=\"3\" type=\"path\" variant=\"base\">\n        <lightning-progress-step label=\"Contacted\" value=\"1\"></lightning-progress-step>\n        <lightning-progress-step label=\"Open\" value=\"2\"></lightning-progress-step>\n        <lightning-progress-step label=\"Unqualified\" value=\"3\"></lightning-progress-step>\n        <lightning-progress-step label=\"Nurturing\" value=\"4\"></lightning-progress-step>\n        <lightning-progress-step label=\"Closed\" value=\"5\"></lightning-progress-step>\n    </lightning-progress-indicator>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ProgressIndicatorPathTypeWithIfCondition extends LightningElement {\n    showStep4 = true;\n\n    toggleStep4() {\n        this.showStep4 = !this.showStep4;\n    }\n}\n",
        "html": "<template>\n    <lightning-progress-indicator current-step=\"step-3\" type=\"path\" variant=\"base\">\n        <lightning-progress-step label=\"Contacted\" value=\"step-1\"></lightning-progress-step>\n        <lightning-progress-step label=\"Open\" value=\"step-2\"></lightning-progress-step>\n        <lightning-progress-step label=\"Unqualified\" value=\"step-3\"></lightning-progress-step>\n        <template if:true={showStep4}>\n            <lightning-progress-step label=\"Nurturing\" value=\"step-4\"></lightning-progress-step>\n        </template>\n        <lightning-progress-step label=\"Closed\" value=\"step-5\"></lightning-progress-step>\n    </lightning-progress-indicator>\n    <lightning-button label=\"Hide/Show Step 4\" onclick={toggleStep4}></lightning-button>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class ProgressIndicatorPathTypeWithIteration extends LightningElement {\n    steps = [\n        { label: 'Contacted', value: 'step-1' },\n        { label: 'Open', value: 'step-2' },\n        { label: 'Unqualified', value: 'step-3' },\n        { label: 'Nurturing', value: 'step-4' },\n        { label: 'Closed', value: 'step-5' },\n    ];\n}\n",
        "html": "<template>\n    <lightning-progress-indicator current-step=\"step-3\" type=\"path\" variant=\"base\">\n        <template for:each={steps} for:item=\"step\">\n            <lightning-progress-step label={step.label} value={step.value} key={step.label}></lightning-progress-step>\n        </template>\n    </lightning-progress-indicator>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-progress-ring",
    "shortDescription": "This component is a circular progress indicator that visually represents a value from 0 to 100, providing users with feedback on the status of a process or action through various color fills and optional icons.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "string",
        "examples": [
          "<lightning-progress-ring value=\"75\">",
          "<lightning-progress-ring value=\"80\">",
          "<lightning-progress-ring value=\"0\">",
          "<lightning-progress-ring value=\"100\">"
        ]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": [
          "<lightning-progress-ring value=\"75\" variant=\"active-step\">",
          "<lightning-progress-ring value=\"80\" variant=\"warning\">",
          "<lightning-progress-ring value=\"0\" variant=\"expired\">",
          "<lightning-progress-ring value=\"100\" variant=\"base-autocomplete\">"
        ]
      }
    ],
    "useCases": [
      "Imagine you're using a fitness app that tracks your daily steps. The app could use a <lightning-progress-ring> to visually represent the percentage of your daily step goal that you've achieved. As you walk more, the ring fills up, giving you a clear and immediate sense of your progress.",
      "Consider a project management tool where you can track the progress of different tasks. Each task could have a <lightning-progress-ring> next to it, showing how much of the task has been completed. If a task is behind schedule, the ring could turn yellow or red to warn you.",
      "Think about a software installation process. As the software installs, a <lightning-progress-ring> could fill up to show you how much of the installation is complete. If the installation is successful, the ring could turn green and display a checkmark.",
      "Imagine an online course platform where you can track your progress through different modules. Each module could have a <lightning-progress-ring> next to it, filling up as you complete lessons and turning blue when you're actively working on that module.",
      "Consider a weather app that shows the chance of rain throughout the day. The app could use a <lightning-progress-ring> to represent the percentage chance of rain, filling the ring as the likelihood increases.",
      "Think about a fundraising website where you can track the progress towards a fundraising goal. The website could use a <lightning-progress-ring> to show how much of the goal has been reached, filling up the ring as more donations come in."
    ],
    "docs": "---\nexamples:\n    - name: base\n      label: Basic Progress Ring\n      description: Progress rings using the default green fill with various numeric values.\n\n    - name: drain\n      label: Progress Ring Direction\n      description: A progress ring's color fill completes in a clockwise direction by default. Set direction=\"drain\" to make the ring's color fill complete counterclockwise.\n\n    - name: large\n      label: Progress Ring Sizes\n      description: Progress rings can be medium size (default) or large.\n\n    - name: variantActiveStep\n      label: Active Step Variant\n      description: The active-step variant changes the color fill to blue.\n\n    - name: variantWarning\n      label: Warning Variant\n      description: The warning variant changes the color fill to yellow and adds the warning icon.\n\n    - name: variantExpired\n      label: Expired Variant\n      description: The expired variant changes the color fill to red and adds the error icon.\n\n    - name: variantBaseAutocomplete\n      label: Base Autocomplete Variant\n      description: The base-autocomplete variant uses the default green fill color and adds a success icon to denote completion when the value is 100.\n\n    - name: interactive\n      label: Progress Ring (Interactive Example)\n      description: Progress rings can be animated to convey progress or countdown.\n---\n\nA `lightning-progress-ring` component is a circular progress indicator. It shows a value from 0 to 100 by filling the ring with a green color by default, and supports variants to change its styling. The color fill is displayed in a clockwise or counterclockwise direction. It informs users the status of a process or action, such as loading data or saving updates.\n\nThis component inherits styling from\n[progress ring](https://www.lightningdesignsystem.com/components/progress-ring/) in the Lightning Design System.\n\nThis example creates a progress ring in a clockwise direction with a value of 75, which fills three quarters of the ring, or 75%.\n\n```html\n<lightning-progress-ring value=\"75\"> </lightning-progress-ring>\n```\n\n#### Using Variants\n\nUse variants to change the ring's styling to provide contextual feedback to users, such as whether an action is successful, active, at risk of failing, or unsuccessful.\n\nBy default, the progress ring fills in with green as the value increases, to indicate success.\n\n```html\n<lightning-progress-ring value=\"80\"> </lightning-progress-ring>\n```\n\nTo display an active step in blue, use the `active-step` variant. This variant indicates that the progress status is ongoing and not yet determined to be successful, at risk of failing, or unsuccessful.\n\n```html\n<lightning-progress-ring value=\"75\" variant=\"active-step\">\n</lightning-progress-ring>\n```\n\nTo indicate a problem with an action or process, use the `warning` variant.\nThis variant displays the warning icon inside the ring and uses a yellow fill color.\n\n```html\n<lightning-progress-ring value=\"80\" variant=\"warning\">\n</lightning-progress-ring>\n```\n\nTo indicate an unsuccessful action or process, use the `expired` variant.\nThis variant displays the error icon inside the ring and uses a red fill color.\n\n```html\n<lightning-progress-ring value=\"0\" variant=\"expired\"> </lightning-progress-ring>\n```\n\nTo indicate a successful action or process, use the `base-autocomplete` variant. This variant is styled the same as the default `base` variant when the value is 0 to 99. When the value is 100, the success icon displays as a checkmark on a green background matching the fill color of the ring.\n\n```html\n<lightning-progress-ring value=\"100\" variant=\"base-autocomplete\">\n</lightning-progress-ring>\n```\n\n#### Accessibility\n\nThe `warning`, `expired`, and `base-autocomplete` variants provide icons and descriptive text for accessibility. The `active-step` variant currently does not have either, so it is not accessible. The `active-step` and `base` default variant appear the same except for color. Consider this accessibility limitation when using the `active-step` variant.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Basic extends LightningElement {}\n",
        "html": "<template>\n    <lightning-progress-ring value=\"0\"> </lightning-progress-ring>\n    <lightning-progress-ring value=\"25\"> </lightning-progress-ring>\n    <lightning-progress-ring value=\"50\"> </lightning-progress-ring>\n    <lightning-progress-ring value=\"75\"> </lightning-progress-ring>\n    <lightning-progress-ring value=\"100\"> </lightning-progress-ring>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Drain extends LightningElement {}\n",
        "html": "<template>\n    <lightning-progress-ring value=\"100\" direction=\"drain\"> </lightning-progress-ring>\n    <lightning-progress-ring value=\"75\" direction=\"drain\"> </lightning-progress-ring>\n    <lightning-progress-ring value=\"50\" direction=\"drain\"> </lightning-progress-ring>\n    <lightning-progress-ring value=\"25\" direction=\"drain\"> </lightning-progress-ring>\n    <lightning-progress-ring value=\"0\" direction=\"drain\"> </lightning-progress-ring>\n</template>\n"
      },
      {
        "js": "import { LightningElement, track } from 'lwc';\n\nexport default class Interactive extends LightningElement {\n    @track sliderValue = 50;\n    @track direction = 'fill';\n\n    sliderChange(event) {\n        this.sliderValue = event.target.value;\n    }\n\n    directionChange(event) {\n        if (event.detail.checked) {\n            this.direction = 'fill';\n        } else {\n            this.direction = 'drain';\n        }\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-bottom_medium\">\n        <lightning-slider\n            onchange={sliderChange}\n            value={sliderValue}\n            label=\"Value\"\n        ></lightning-slider>\n        <lightning-input\n            type=\"toggle\"\n            label=\"Direction\"\n            name=\"direction\"\n            checked\n            onchange={directionChange}\n            message-toggle-active=\"Fill\"\n            message-toggle-inactive=\"Drain\"\n        ></lightning-input>\n    </div>\n\n    <div class=\"slds-m-bottom_small\">\n        <span class=\"slds-m-right_small\">\n            variant: base\n        </span>\n        <lightning-progress-ring\n            value={sliderValue}\n            direction={direction}\n            variant=\"base\"\n        ></lightning-progress-ring>\n    </div>\n    <div class=\"slds-m-bottom_small\">\n        <span class=\"slds-m-right_small\">\n            variant: base-autocomplete\n        </span>\n        <lightning-progress-ring\n            value={sliderValue}\n            direction={direction}\n            variant=\"base-autocomplete\"\n        ></lightning-progress-ring>\n    </div>\n    <div class=\"slds-m-bottom_small\">\n        <span class=\"slds-m-right_small\">\n            variant: active-step\n        </span>\n        <lightning-progress-ring\n            value={sliderValue}\n            direction={direction}\n            variant=\"active-step\"\n        ></lightning-progress-ring>\n    </div>\n    <div class=\"slds-m-bottom_small\">\n        <span class=\"slds-m-right_small\">\n            variant: warning\n        </span>\n        <lightning-progress-ring\n            value={sliderValue}\n            direction={direction}\n            variant=\"warning\"\n        ></lightning-progress-ring>\n    </div>\n    <div class=\"slds-m-bottom_small\">\n        <span class=\"slds-m-right_small\">\n            variant: expired\n        </span>\n        <lightning-progress-ring\n            value={sliderValue}\n            direction={direction}\n            variant=\"expired\"\n        ></lightning-progress-ring>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Large extends LightningElement {}\n",
        "html": "<template>\n    <lightning-progress-ring value=\"75\"></lightning-progress-ring>\n    <lightning-progress-ring value=\"75\" size=\"large\"> </lightning-progress-ring>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class VariantActiveStep extends LightningElement {}\n",
        "html": "<template>\n    <lightning-progress-ring value=\"75\" variant=\"active-step\"> </lightning-progress-ring>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class VariantWarning extends LightningElement {}\n",
        "html": "<template>\n    <lightning-progress-ring value=\"75\" variant=\"base-autocomplete\">\n    </lightning-progress-ring>\n    <lightning-progress-ring value=\"100\" variant=\"base-autocomplete\">\n    </lightning-progress-ring>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class VariantExpired extends LightningElement {}\n",
        "html": "<template>\n    <lightning-progress-ring value=\"75\" variant=\"expired\"> </lightning-progress-ring>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class VariantWarning extends LightningElement {}\n",
        "html": "<template>\n    <lightning-progress-ring value=\"75\" variant=\"warning\"> </lightning-progress-ring>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-progress-step",
    "shortDescription": "This component represents a step in a progress indicator, displaying a label and value, and providing user interaction through custom events and tooltips, enhancing the user's navigation experience.",
    "relatedComponents": {
      "lightning-progress-indicator": "required"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-progress-step label='Step One'>", "<lightning-progress-step label={stepLabel}>"]
      },
      {
        "name": "value",
        "typeSignature": "string",
        "examples": ["<lightning-progress-step value='step1'>", "<lightning-progress-step value={stepValue}>"]
      },
      {
        "name": "onstepblur",
        "typeSignature": "(ev: CustomEvent & { detail: { index: string } }) => void",
        "examples": ["<lightning-progress-step onstepblur={handleStepBlur}>"]
      },
      {
        "name": "onstepfocus",
        "typeSignature": "(ev: CustomEvent & { detail: { index: string } }) => void",
        "examples": ["<lightning-progress-step onstepfocus={handleStepFocus}>"]
      },
      {
        "name": "onstepmouseenter",
        "typeSignature": "(ev: CustomEvent & { detail: { index: string } }) => void",
        "examples": ["<lightning-progress-step onstepmouseenter={handleStepMouseEnter}>"]
      },
      {
        "name": "onstepmouseleave",
        "typeSignature": "(ev: CustomEvent & { detail: { index: string } }) => void",
        "examples": ["<lightning-progress-step onstepmouseleave={handleStepMouseLeave}>"]
      }
    ],
    "useCases": [
      "In an online shopping platform, a <lightning-progress-step> component can be used to show the progress of a customer's order. The steps could include 'Order Placed', 'Order Packed', 'Order Shipped', and 'Order Delivered'. The customer can easily see which stage their order is at, and the step they are currently on would be highlighted.",
      "In a multi-step online form, such as a loan application, a <lightning-progress-step> component can be used to show the user's progress through the form. The steps could include 'Personal Information', 'Employment Information', 'Financial Information', and 'Submit Application'. The user can see which step they are currently on and what steps are coming up next.",
      "In an online course platform, a <lightning-progress-step> component can be used to show a student's progress through a course. The steps could include 'Introduction', 'Module 1', 'Module 2', 'Module 3', and 'Final Exam'. The student can see which module they are currently on and what modules are coming up next.",
      "In a project management tool, a <lightning-progress-step> component can be used to show the progress of a project. The steps could include 'Planning', 'Design', 'Development', 'Testing', and 'Deployment'. The team members can see which stage the project is at, and the step they are currently on would be highlighted.",
      "In a fitness app, a <lightning-progress-step> component can be used to show a user's progress through a workout plan. The steps could include 'Warm Up', 'Cardio', 'Strength Training', 'Cool Down', and 'Stretching'. The user can see which step they are currently on and what steps are coming up next.",
      "In a recipe app, a <lightning-progress-step> component can be used to show a user's progress through a recipe. The steps could include 'Preparation', 'Mixing', 'Cooking', and 'Serving'. The user can see which step they are currently on and what steps are coming up next."
    ],
    "docs": "A `lightning-progress-step` component specifies a step inside the [`lightning-progress-indicator`](bundle/lightning-progress-indicator/documentation) component.\nSpecify the `label` attribute to define text displayed for the name or tooltip for the step.\nSpecify the `value` attribute to set the value used to reference the step.\n\nTo specify the current step, the `current-step` attribute on `lightning-progress-indicator`\nmust match one of the `value` attributes on a `lightning-progress-step` component.\n\n```html\n<template>\n    <lightning-progress-indicator current-step=\"step2\">\n        <lightning-progress-step label=\"Step One\" value=\"step1\">\n        </lightning-progress-step>\n        <lightning-progress-step label=\"Step Two\" value=\"step2\">\n        </lightning-progress-step>\n        <lightning-progress-step label=\"Step Three\" value=\"step3\">\n        </lightning-progress-step>\n    </lightning-progress-indicator>\n</template>\n```\n\nIf the progress indicator type is not specified or is set to `base`, the\n`label` text is displayed in a tooltip when you hover\nover the step.\n\nIf the progress indicator type is `path`, the label is\ndisplayed on hover if the step is completed or on the step itself if it's a\ncurrent or incomplete step.\n\nFor `base` type progress indicators, custom events implemented in `lightning-progress-step` fire during user interactions with the steps. Each event returns the index of the step. See the **Custom Events** section for more information.\n\nFor example, to get the index of the step that released focus, use the `event.detail` property on the `onstepblur` event handler.\n\n```html\n<template>\n    <lightning-progress-indicator current-step=\"step2\">\n        <lightning-progress-step\n            label=\"Step One\"\n            value=\"step1\"\n            onstepblur={handleStepBlur}\n        >\n        </lightning-progress-step>\n        <lightning-progress-step\n            label=\"Step Two\"\n            value=\"step2\"\n            onstepblur={handleStepBlur}\n        >\n        </lightning-progress-step>\n        <lightning-progress-step\n            label=\"Step Three\"\n            value=\"step3\"\n            onstepblur={handleStepBlur}\n        >\n        </lightning-progress-step>\n    </lightning-progress-indicator>\n</template>\n```\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class MyDemoComponent extends LightningElement {\n    handleStepBlur(event) {\n        const stepIndex = event.detail.index;\n    }\n}\n```\n\n#### Usage Considerations\n\n`lightning-progress-step` supports the custom events listed in the next section. It doesn't support the `click` event. To enable users to interactively update their progress to the next or previous steps, include a clickable element that updates the `current-step` value on `lightning-progress-indicator`. For more information, see the [lightning-progress-step documentation](bundle/lightning-progress-indicator/documentation).\n\n#### Custom Events\n\nThe `lightning-progress-step` component supports these events for the `base` type of `lightning-progress-indicator`.\n\n**`stepblur`**\n\nThe event fired when a step releases focus.\n\nThe `stepblur` event returns the following parameter.\n\n| Parameter | Type   | Description                                |\n| --------- | ------ | ------------------------------------------ |\n| index     | string | The index of the step that released focus. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                                                    |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside of the component in which it was dispatched.                        |\n\n**`stepfocus`**\n\nThe event fired when a step receives focus.\n\nThe `stepfocus` event returns the following parameter.\n\n| Parameter | Type   | Description                                |\n| --------- | ------ | ------------------------------------------ |\n| index     | string | The index of the step that received focus. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                                                    |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside of the component in which it was dispatched.                        |\n\n**`stepmouseenter`**\n\nThe event fired when the mouse pointer moves onto the step.\n\nThe `stepmouseenter` event returns the following parameter.\n\n| Parameter | Type   | Description                                         |\n| --------- | ------ | --------------------------------------------------- |\n| index     | string | The index of the step the mouse pointer moves onto. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                                                    |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside of the component in which it was dispatched.                        |\n\n**`stepmouseleave`**\n\nThe event fired when the mouse pointer moves off the step.\n\nThe `stepmouseleave` event returns the following parameter.\n\n| Parameter | Type   | Description                                           |\n| --------- | ------ | ----------------------------------------------------- |\n| index     | string | The index of the step the mouse pointer moves out of. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                                                    |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside of the component in which it was dispatched.                        |\n\n#### Accessibility\n\nEach progress step is decorated with assistive text, which is also the label\nof that step. For the `base` type, you can use the Tab key to navigate from one\nstep to the next. Press Shift+Tab to go to the previous step. For the `path`\ntype, press Tab to activate the current step and use the Up and Down Arrow key\nor the Left and Right arrow key to navigate from one step to another.\n",
    "examples": []
  },
  {
    "tagName": "lightning-prompt",
    "shortDescription": "This component allows the creation of a customizable prompt modal within your application, providing a consistent user experience by asking for user input without halting execution on the page.",
    "relatedComponents": {
      "lightning-button": "optional"
    },
    "publicApi": [
      {
        "name": "message",
        "typeSignature": "string",
        "examples": [
          "<lightning-prompt message='this is the prompt message'>",
          "<lightning-prompt message={promptMessage}>"
        ]
      },
      {
        "name": "defaultValue",
        "typeSignature": "string",
        "examples": [
          "<lightning-prompt defaultValue='initial input value'>",
          "<lightning-prompt defaultValue={defaultInput}>"
        ]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-prompt label='Please Respond'>", "<lightning-prompt label={headerText}>"]
      },
      {
        "name": "variant",
        "typeSignature": "'header' | 'headerless'",
        "examples": [
          "<lightning-prompt variant='header'>",
          "<lightning-prompt variant='headerless'>",
          "<lightning-prompt variant={variantType}>"
        ]
      },
      {
        "name": "theme",
        "typeSignature": "'default' | 'shade' | 'inverse' | 'alt-inverse' | 'success' | 'info' | 'warning' | 'error' | 'offline'",
        "examples": [
          "<lightning-prompt theme='default'>",
          "<lightning-prompt theme='success'>",
          "<lightning-prompt theme={themeType}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're using an online shopping website and you've added a few items to your cart. When you click on the 'Checkout' button, a <lightning-prompt> pops up asking you to confirm your shipping address before proceeding with the payment.",
      "On a social media platform, you decide to delete a post you made earlier. When you click on the 'Delete' button, a <lightning-prompt> appears asking you to confirm if you really want to delete the post, giving you a chance to reconsider your decision.",
      "You're using an online form to apply for a job. After filling out all the details, you click on the 'Submit' button. A <lightning-prompt> appears asking you to review all your details one last time before submitting the application.",
      "On a banking website, you're about to make a large transaction. When you click on the 'Transfer' button, a <lightning-prompt> pops up asking you to confirm the transaction details to ensure there are no mistakes.",
      "You're using a project management tool and you decide to delete a project that's no longer relevant. When you click on the 'Delete' button, a <lightning-prompt> appears asking you to confirm the deletion, as this action cannot be undone."
    ],
    "docs": "The `lightning/prompt` module lets you create a prompt modal within your component. Use `LightningPrompt` on your components to ask the user to provide information before they continue.\n\nUse `LightningPrompt.open()` instead of the native `window.prompt()` for a more consistent user experience. They have similar functions, but `LightningPrompt.open()` works in cross-origin iframes, where the `.prompt()` method is no longer supported in Chrome and Safari. Unlike `window.prompt()`, `LightningPrompt.open()` doesn't halt execution on the page, it returns a Promise. Use `async`/`await` or `.then()` for any code you want to execute after the prompt has closed.\n\nImport `LightningPrompt` from the `lightning/prompt` module in the component that will launch the prompt modal, and call `LightningPrompt.open()` with your desired attributes.\n\nThis example creates a prompt modal with a header, message, and two buttons. If you enter text and click **OK** in the prompt, the `.open()` function returns a promise that resolves to the input value. If you click **Cancel**, the function returns a promise that resolves to `null`.\n\n```html\n<!-- c/myApp.html -->\n<template>\n    <lightning-button onclick={handlePromptClick} label=\"Open Prompt Modal\">\n    </lightning-button>\n</template>\n```\n\n```javascript\nimport { LightningElement } from 'lwc';\nimport LightningPrompt from 'lightning/prompt';\n\nexport default class MyApp extends LightningElement {\n    handlePromptClick() {\n        LightningPrompt.open({\n            message: 'this is the prompt message',\n            //theme defaults to \"default\"\n            label: 'Please Respond', // this is the header text\n            defaultValue: 'initial input value', //this is optional\n        }).then((result) => {\n            //Prompt has been closed\n            //result is input text if OK clicked\n            //and null if cancel was clicked\n        });\n    }\n}\n```\n\n#### Component Styling\n\nThis component uses the Salesforce Lightning Design System (SLDS) [`prompt` blueprint](https://www.lightningdesignsystem.com/components/prompt/#site-main-content).\n\n`LightningPrompt` supports the following attributes:\n\n-   `message`: Message text that displays in the prompt.\n-   `defaultValue`: Optional. Initial leading text for the input text box.\n-   `label`: Header text, also used as the `aria-label`. Default string is `Prompt`.\n-   `variant`: Two values, `header` and `headerless`. Default value is `header`.\n-   `theme`: Color theme for the header. The `theme` attribute supports the following [options](https://www.lightningdesignsystem.com/utilities/themes/#site-main-content) from SLDS:\n    -   `default`: white\n    -   `shade`: gray\n    -   `inverse`: dark blue\n    -   `alt-inverse`: darker blue\n    -   `success`: green\n    -   `info`: gray-ish blue\n    -   `warning`: yellow\n    -   `error`: red\n    -   `offline`: ​black​\n\nIf an invalid value is provided, `LightningPrompt` uses the `default` theme. `LightningPrompt` ignores the `style` attribute.\n\n#### Testing Your Component's Prompt\n\nCode using `LightningPrompt` can be tested by mocking the `LightningPrompt.open()` method.\n\nThe example below uses a button to open a prompt dialog and sets the result in a template.\n\n```html\n<button data-button onclick={handleClick}>Open Prompt</button>\n<div data-result>{result}</div>\n```\n\n```js\nimport LightningPrompt from 'lightning/prompt';\njest.mock('lightning/prompt');\n​\ntest(() => {\n    // Create and appendChild(element)\n​\n    const buttonEle = element.shadowRoot.querySelector('[data-button]');\n    const resultEle = element.shadowRoot.querySelector('[data-result]');\n​\n    // Mock .open()\n    // Pass string representing input text if testing when user clicks \"OK\"\n    // Pass null if testing when user clicks \"Cancel\"\n    LightningPrompt.open = jest.fn().mockResolvedValue('test value');\n    // Initial value\n    expect(resultEle.textContent).toBe('unknown');\n    // Click modal open button\n    buttonEle.click();\n​\n    // Click handler render cycle\n    await Promise.resolve();\n    // Render cycle triggered by tracked value {result}\n    await Promise.resolve();\n​\n    // Verify result is set in the template\n    expect(resultEle.textContent).toBe('test value');\n    // Open triggered once\n    expect(LightningPrompt.open.mock.calls).toHaveLength(1);\n})\n```\n",
    "examples": []
  },
  {
    "tagName": "lightning-radio-group",
    "shortDescription": "This component is a group of radio buttons that allows only one selection at a time, providing an interactive user experience with options for input validation, customization of appearance, and accessibility features.",
    "relatedComponents": {
      "lightning-input": "optional"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": [
          "<lightning-radio-group label='Radio Button Group'>",
          "<lightning-radio-group label={myLabelValue}>"
        ]
      },
      {
        "name": "options",
        "typeSignature": "{ label: string, value: string }[]",
        "examples": ["<lightning-radio-group options={options}>"]
      },
      {
        "name": "value",
        "typeSignature": "string",
        "examples": ["<lightning-radio-group value='option1'>", "<lightning-radio-group value={myValue}>"]
      },
      {
        "name": "onchange",
        "typeSignature": "(ev: CustomEvent & { detail: { value: string } }) => void",
        "examples": ["<lightning-radio-group onchange={handleChange}>"]
      },
      {
        "name": "required",
        "typeSignature": "boolean",
        "examples": ["<lightning-radio-group required>", "<lightning-radio-group required={isRequired}>"]
      },
      {
        "name": "disabled",
        "typeSignature": "boolean",
        "examples": ["<lightning-radio-group disabled>", "<lightning-radio-group disabled={isDisabled}>"]
      },
      {
        "name": "type",
        "typeSignature": "string",
        "examples": ["<lightning-radio-group type='button'>", "<lightning-radio-group type={myType}>"]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": ["<lightning-radio-group variant='label-hidden'>", "<lightning-radio-group variant={myVariant}>"]
      },
      {
        "name": "message-when-value-missing",
        "typeSignature": "string",
        "examples": [
          "<lightning-radio-group message-when-value-missing='Please select an option'>",
          "<lightning-radio-group message-when-value-missing={myErrorMessage}>"
        ]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": ["<lightning-radio-group class='slds-m-around_x-small'>", "<lightning-radio-group class={myClass}>"]
      }
    ],
    "useCases": [
      "Imagine you're filling out a survey online and you're asked to select your gender. The options are 'Male', 'Female', and 'Prefer not to say'. This is a perfect scenario for the <lightning-radio-group> component, as only one option can be selected.",
      "You're signing up for a new social media account and during the registration process, you're asked to select your preferred language from a list. The <lightning-radio-group> component would be used here to ensure only one language is selected.",
      "You're booking a flight online and you need to select your meal preference for the flight. The options are 'Vegetarian', 'Vegan', 'Gluten-free', 'No preference'. The <lightning-radio-group> component would be used here to ensure only one meal preference is selected.",
      "You're on an online shopping website and you're asked to select your preferred payment method. The options are 'Credit Card', 'Debit Card', 'PayPal', 'Bank Transfer'. The <lightning-radio-group> component would be used here to ensure only one payment method is selected.",
      "You're on a music streaming website and you're asked to select your preferred music genre. The options are 'Pop', 'Rock', 'Country', 'Jazz', 'Classical', 'Other'. The <lightning-radio-group> component would be used here to ensure only one music genre is selected.",
      "You're on a news website and you're asked to select the topics you're interested in. The options are 'Politics', 'Sports', 'Entertainment', 'Technology', 'Health', 'Travel'. The <lightning-radio-group> component would be used here to ensure only one topic is selected."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Radio Group\n      description: A radio group contains at least two options and only one can be selected.\n    - name: required\n      label: Required Radio Group\n      description: A radio group displays a field-level error if it's required and no option is selected after the first interaction.\n    - name: disabled\n      label: Disabled Radio Group\n      description: Disabled options are grayed out and you can't interact with them.\n    - name: button\n      label: Radio Group with Button Type\n      description: A radio group can use the button type to display a different visual style.\n    - name: buttonrequired\n      label: Required Radio Group with Button Type\n      description: A radio button group displays a field-level error if it's required and no option is selected after the first interaction.\n    - name: buttondisabled\n      label: Disabled Radio Group with Button Type\n      description: Disabled options are grayed out and you can't interact with them.\n---\n\nA `lightning-radio-group` component represents a group of radio buttons that permit only\none button to be selected at a time. The component renders radio button `<input>` elements\nand assigns the same value to the `name` attribute for each element. The common\n`name` attribute joins the elements in a group. If you select any radio button in that\ngroup, any previously selected button in the group is deselected.\n\nIn general, we don't recommend setting the `name` attribute in `lightning-radio-group`.\nThe component automatically generates a unique value for `name` if none is provided. The generated value ensures\na common name for the `<input>` elements rendered for the radio button group, and is unique in the page.\n\nSee **Reusing `lightning-radio-group` in a Page** for `name` attribute considerations if you want to use the component multiple times in a page.\n\nIf the `required` attribute is specified, at least one radio button must be selected.\nWhen a user interacts with the radio button group and doesn't make a selection, an\nerror message is displayed.\n\nIf the `disabled` attribute is specified, radio button selections can't be changed.\n\nThis example creates a radio button group with two options and `option1` is selected\nby default. One radio button must be selected as the `required` attribute is\nspecified.\n\n```html\n<template>\n    <lightning-radio-group\n        label=\"Radio Button Group\"\n        options={options}\n        value={value}\n        onchange={handleChange}\n        required\n    >\n    </lightning-radio-group>\n</template>\n```\n\nYou can check which values are selected by using the `value` attribute.\nTo retrieve the values when the selection is changed, use the `onchange` event handler and call\n`event.detail.value`.\n\n```javascript\nimport { LightningElement } from 'lwc';\nexport default class MyComponentName extends LightningElement {\n    options = [\n        { label: 'Ross', value: 'option1' },\n        { label: 'Rachel', value: 'option2' },\n    ];\n\n    // Select option1 by default\n    value = 'option1';\n\n    handleChange(event) {\n        const selectedOption = event.detail.value;\n        console.log('Option selected with value: ' + selectedOption);\n    }\n}\n```\n\n#### Creating Radio Buttons\n\nTo create radio buttons, pass in the following properties to the `options` attribute.\n\n| Property | Type   | Description                                                        |\n| -------- | ------ | ------------------------------------------------------------------ |\n| label    | string | The text that displays next to a radio button.                     |\n| value    | string | The string that's used to identify which radio button is selected. |\n\n#### Input Validation\n\nClient-side input validation is available for this component. For example, an error message is displayed when the radio group is marked required and no option is selected. Note that a disabled radio group is always valid.\n\nYou can override the default message using `message-when-value-missing` when a radio group is required and no option is selected. This message is displayed when you remove focus from the radio group.\n\nTo programmatically display error messages on invalid fields, use the `reportValidity()` method. For custom validity error messages, display the message using `setCustomValidity()` and `reportValidity()`. For more information, see the [lightning-input](/docs/component-library/bundle/lightning-input/documentation) documentation.\n\n#### Reusing `lightning-radio-group` in a Page\n\nTo reuse `lightning-radio-group` in a page or across multiple tabs such as in a Salesforce console app,\nfollow one of these suggestions.\n\n-   Omit the `name` attribute to enable the component to automatically generate a unique name.\n-   Enclose each `lightning-radio-group` component in a `<form>` element and provide your own value for `name`.\n\nIf the reused component generates a unique name, each radio button group in the page renders\n`<input>` elements grouped correctly so that one value can be selected in each group.\n\nIf you provide your own `name` value and reuse the\ncomponent with the same name, each radio button group in the page uses the same `name` value for the `<input>` elements.\nThe result is that you can select only one value across all radio button groups, instead of\none value within a radio button group. If you require your own `name` value, enclose the\nreused components in `<form>` elements to enable the page to use the same `name` value for multiple radio\nbutton groups.\n\n#### Component Styling\n\n`lightning-radio-group` implements the\n[radio button](https://www.lightningdesignsystem.com/components/radio-group/) blueprint in the\nSalesforce Lightning Design System (SLDS).\n\nSet `type=\"button\"` to create a component that implements the\n[radio button group](https://www.lightningdesignsystem.com/components/radio-button-group/) blueprint in SLDS.\n\n##### Variants\n\nUse the `variant` attribute with one of these values to change the appearance of the radio group.\n\n-   `label-hidden` hides the radio group label but makes it available to assistive technology. This variant does not hide the option labels.\n-   `label-inline` horizontally aligns the label and radio group.\n-   `label-stacked` places the label above the radio group.\n-   `standard` is the default variant, which displays the radio group label above the options.\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds a margin around the radio group using an SLDS class.\n\n```html\n<lightning-radio-group\n    label=\"Radio Group\"\n    options={options}\n    value={value}\n    class=\"slds-m-around_x-small\"\n>\n</lightning-radio-group>\n```\n\nTo apply custom styling, use the `:host` selector or define a custom class using the `class` attribute.\n\n```html\n<lightning-radio-group\n    label=\"Radio Group\"\n    options={options}\n    value={value}\n    class=\"my-radio-group\"\n>\n</lightning-radio-group>\n```\n\nWhen using `type=\"button\"`, you can change the line height of the button label with SLDS styling hooks. For example, use `--slds-c-button-line-height` to reduce or increase the whitespace between lines of the text label.\n\n```css\n.my-radio-group {\n    --slds-c-button-line-height: 2.875rem;\n}\n```\n\nWhen using `type=\"radio\"`, customize the component's styles using SLDS styling hooks from the radio group blueprint. For example, change the radio color background and checkmark.\n\n```css\n:host {\n    --slds-c-radio-mark-color-foreground: #000000;\n    --slds-c-radio-color-background-checked: orange;\n}\n```\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/radio-group/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\n#### Accessibility\n\nThe radio group is nested in a `fieldset` element that contains a `legend`\nelement. The legend contains the `label` value. The `fieldset` element enables\ngrouping of related radio buttons to facilitate tabbing navigation and speech\nnavigation for accessibility purposes. Similarly, the `legend` element\nimproves accessibility by enabling a caption to be assigned to the `fieldset`.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class RadioGroupBasic extends LightningElement {\n    value = '';\n\n    get options() {\n        return [\n            { label: 'Sales', value: 'option1' },\n            { label: 'Force', value: 'option2' },\n        ];\n    }\n}\n",
        "html": "<template>\n    <lightning-radio-group name=\"radioGroup\"\n                          label=\"Radio Group\"\n                          options={options}\n                          value={value}\n                          type=\"radio\"></lightning-radio-group>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class RadioGroupButton extends LightningElement {\n    value = '';\n\n    get options() {\n        return [\n            { label: 'Sales', value: 'option1' },\n            { label: 'Force', value: 'option2' },\n        ];\n    }\n}\n",
        "html": "<template>\n    <lightning-radio-group name=\"radioGroup\"\n                          label=\"Radio Group\"\n                          options={options}\n                          value={value}\n                          type=\"button\"></lightning-radio-group>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class RadioGroupButtonDisabled extends LightningElement {\n    value = '';\n\n    get options() {\n        return [\n            { label: 'Sales', value: 'option1' },\n            { label: 'Force', value: 'option2' },\n        ];\n    }\n}\n",
        "html": "<template>\n    <lightning-radio-group name=\"radioGroup\"\n                           label=\"Radio Group\"\n                           options={options}\n                           value={value}\n                           disabled\n                           type=\"button\"></lightning-radio-group>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class RadioGroupRequired extends LightningElement {\n    value = '';\n\n    get options() {\n        return [\n            { label: 'Sales', value: 'option1' },\n            { label: 'Force', value: 'option2' },\n        ];\n    }\n}\n",
        "html": "<template>\n    <lightning-radio-group name=\"radioGroup\"\n                           label=\"Radio Group\"\n                           options={options}\n                           value={value}\n                           required\n                           type=\"button\"></lightning-radio-group>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class RadioGroupBasic extends LightningElement {\n    value = '';\n\n    get options() {\n        return [\n            { label: 'Sales', value: 'option1' },\n            { label: 'Force', value: 'option2' },\n        ];\n    }\n}\n",
        "html": "<template>\n    <lightning-radio-group name=\"radioGroup\"\n                          label=\"Radio Group\"\n                          options={options}\n                          value={value}\n                           disabled\n                          type=\"radio\"></lightning-radio-group>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class RadioGroupRequired extends LightningElement {\n    value = '';\n\n    get options() {\n        return [\n            { label: 'Sales', value: 'option1' },\n            { label: 'Force', value: 'option2' },\n        ];\n    }\n}\n",
        "html": "<template>\n    <lightning-radio-group name=\"radioGroup\"\n                          label=\"Radio Group\"\n                          options={options}\n                          value={value}\n                           required\n                          type=\"radio\"></lightning-radio-group>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-relative-date-time",
    "shortDescription": "This component displays the relative time between the current time and a provided date/time, formatted according to the user's locale, providing an intuitive understanding of time passed or time remaining.",
    "relatedComponents": {},
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "Date | number",
        "examples": [
          "<lightning-relative-date-time value={past}>",
          "<lightning-relative-date-time value={future}>",
          "<lightning-relative-date-time value={Date.now()}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're using a project management tool that uses the <lightning-relative-date-time> component. When you look at a task, instead of seeing the exact date and time it was created, you see '2 hours ago'. This gives you a quick, easy-to-understand idea of how old the task is without having to calculate it yourself.",
      "You're using a social media platform that uses the <lightning-relative-date-time> component. When you look at a post, you see '5 minutes ago' instead of the exact time the post was made. This makes it easier for you to understand how recent the post is.",
      "You're using a messaging app that uses the <lightning-relative-date-time> component. When you look at a message, you see 'a few seconds ago' instead of the exact time the message was sent. This gives you a clear idea of how recent the message is without having to check the exact time.",
      "You're using a news website that uses the <lightning-relative-date-time> component. When you look at an article, you see '2 days ago' instead of the exact date the article was published. This helps you quickly understand how recent the news is.",
      "You're using a forum that uses the <lightning-relative-date-time> component. When you look at a comment, you see 'in 7 months' instead of the exact date the comment will be archived. This gives you a clear idea of how much longer the comment will be available.",
      "You're using a calendar app that uses the <lightning-relative-date-time> component. When you look at an event, you see 'in 5 years' instead of the exact date the event will occur. This helps you understand how far in the future the event is."
    ],
    "docs": "---\nexamples:\n    - name: formatDatesRelativeToNow\n      label: Format Dates Relative To Now\n      description: Relative time displays how much time has passed or how much time is left until a given time.\n---\n\nThe `lightning-relative-date-time` component displays relative time that shows\nhow much time has passed or how much time is left until a given date/time.\nIt formats the relative time for the current locale following the rules\nfrom [Unicode CLDR](http://cldr.unicode.org/translation/date-time-1/date-time-names).\n\nUse the `value` attribute to pass the date to format.\nWhen you provide a timestamp or JavaScript Date object,\n`lightning-relative-date-time` displays a string that describes the relative\ntime between the current time and the provided time.\n\nThe unit of time that's displayed corresponds to how much time has passed since the\nprovided time, for example, \"a few seconds ago\" or \"5 minutes ago\". A given\ntime in the future returns the relative time, for example, \"in 7 months\" or\n\"in 5 years\".\n\nThis example returns the relative time between the current time and a given\ntime in the past and future.\n\n```html\n<template>\n    <div>\n        <lightning-relative-date-time value={past}>\n        </lightning-relative-date-time>\n    </div>\n    <div>\n        <lightning-relative-date-time value={future}>\n        </lightning-relative-date-time>\n    </div>\n</template>\n```\n\nThe `past` and `future` attributes return:\n\n-   2 hours ago\n-   in 2 days\n\n```javascript\nimport { LightningElement } from 'lwc';\nexport default class MyComponentName extends LightningElement {\n    get past() {\n        return Date.now() - 2 * 60 * 60 * 1000;\n    }\n    get future() {\n        return Date.now() + 2 * 60 * 60 * 1000;\n    }\n}\n```\n\nOther sample output includes:\n\n-   Relative past: a few seconds ago, a minute ago, 2 minutes ago, an hour ago, 2 hours ago, 2 days ago, 2 months ago, 2 years ago\n-   Relative future: in a few seconds, in a minute, in 2 minutes, in an hour, in 2 hours, in 2 days, in 2 months, in 2 years in 2 days, in 2 months\n\nThe user's language setting in an org determines the language displayed for the units of time. If the locale uses a different language, the output uses the language setting and ignores the locale. For example, if you set the locale to Arabic and the language to English, the output uses digits 0-9 for numbers and English instead of Arabic numerals to be consistent with the language on the user interface. For more information, see [Supported Languages](https://help.salesforce.com/articleView?id=faq_getstart_what_languages_does.htm).\n\nSupported units of time include:\n\n-   seconds\n-   minutes\n-   hours\n-   days\n-   months\n-   years\n\nTo obtain the language and locale information in your org, use the `@salesforce/i18n` scoped module. For more information, see [Access Internationalization Properties](https://developer.salesforce.com/docs/platform/lwc/guide/create-i18n).\n\n#### Usage Considerations\n\nThe `lightning-relative-date-time` component is limited to the en-US locale when running in\nthe Playground and Mini-Playground in the Examples tab of this Component Reference.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleRelativeDateTimeFormatDatesRelativeToNow extends LightningElement {\n    SfdcDay = new Date('1999-02-01');\n    today9AM = new Date().setHours(9, 0, 0, 0);\n    now = Date.now();\n    future20500104 = new Date('2050-01-04');\n}\n",
        "html": "<template>\n    <div class=\"slds-m-around_medium\">\n        <h1 class=\"slds-text-heading_small\">Format Dates Relative To now</h1>\n        <p class=\"slds-text-body_regular\">The lightning-relative-date-time component displays relative time that shows how much time has passed or how much time is left until a given time. It formats the relative time for the current locale following the rules from Unicode CLDR. The date to format is passed via the value attribute.</p>\n    </div>\n\n    <div class=\"slds-m-vertical_small\">\n        Day SFDC was born - February 1999:\n        <strong><lightning-relative-date-time value={SfdcDay}></lightning-relative-date-time></strong>\n    </div>\n\n    <div class=\"slds-m-vertical_small\">\n        Today 9:00 AM:\n        <strong><lightning-relative-date-time value={today9AM}></lightning-relative-date-time></strong>\n    </div>\n\n    <div class=\"slds-m-vertical_small\">\n        Right now:\n        <strong><lightning-relative-date-time value={now}></lightning-relative-date-time></strong>\n    </div>\n\n    <div class=\"slds-m-vertical_small\">\n        Future - January 2050:\n        <strong><lightning-relative-date-time value={future20500104}></lightning-relative-date-time></strong>\n    </div>\n</template>"
      }
    ]
  },
  {
    "tagName": "lightning-select",
    "shortDescription": "This component is a customizable dropdown menu that allows for single or multiple selections from a list of options, providing an interactive and accessible user experience.",
    "relatedComponents": {
      "lightning-dual-listbox": "optional",
      "lightning-button": "optional",
      "lightning-combobox": "optional"
    },
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "string",
        "examples": ["<lightning-select value={selectVal}>", "<lightning-select value='sales'>"]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-select label='Select a product'>", "<lightning-select label={labelValue}>"]
      },
      {
        "name": "options",
        "typeSignature": "{ label: string, value: string, disabled?: boolean }[]",
        "examples": ["<lightning-select options={productOptions}>"]
      },
      {
        "name": "onchange",
        "typeSignature": "(ev: CustomEvent & { detail: { value: string } }) => void",
        "examples": ["<lightning-select onchange={handleChange}>"]
      },
      {
        "name": "multiple",
        "typeSignature": "boolean",
        "examples": ["<lightning-select multiple>", "<lightning-select multiple={isMultiple}>"]
      },
      {
        "name": "size",
        "typeSignature": "string",
        "examples": ["<lightning-select size='3'>", "<lightning-select size={sizeValue}>"]
      },
      {
        "name": "required",
        "typeSignature": "boolean",
        "examples": ["<lightning-select required>", "<lightning-select required={isRequired}>"]
      },
      {
        "name": "message-when-value-missing",
        "typeSignature": "string",
        "examples": [
          "<lightning-select message-when-value-missing='Which area can we help you with?'>",
          "<lightning-select message-when-value-missing={missingValueMessage}>"
        ]
      },
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": ["<lightning-select variant='label-hidden'>", "<lightning-select variant={variantValue}>"]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": ["<lightning-select class='my-select'>", "<lightning-select class={className}>"]
      }
    ],
    "useCases": [
      "Imagine you're shopping online and you're on a product page. The product comes in different sizes and colors. The <lightning-select> component could be used to create dropdown menus for selecting the size and color of the product you want to buy.",
      "You're filling out a survey online and one of the questions asks you to select your country of residence from a dropdown menu. The <lightning-select> component could be used to create this dropdown menu.",
      "You're signing up for a new online service and during the registration process, you're asked to select a security question from a dropdown menu. The <lightning-select> component could be used to create this dropdown menu.",
      "You're on a website that offers online courses. You want to browse the courses by category, so you use a dropdown menu to select a category. The <lightning-select> component could be used to create this dropdown menu.",
      "You're on a travel booking website and you're trying to book a flight. You need to select your departure and arrival airports from dropdown menus. The <lightning-select> component could be used to create these dropdown menus.",
      "You're on a website that sells custom-made furniture. You want to customize a chair by selecting the type of wood and the finish from dropdown menus. The <lightning-select> component could be used to create these dropdown menus."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Select\n      description: A simple dropdown menu with a selection required.\n    - name: multiple\n      label: Multiple Select\n      description: A dropdown menu with multiple selection enabled.\n    - name: disabled\n      label: Disabled Select\n      description: A dropdown menu with disabled state.\n    - name: hidden\n      label: Hidden Select\n      description: A dropdown menu with hidden label.\n    - name: inline\n      label: Inline Select\n      description: A dropdown menu with inline label.\n---\n\n`lightning-select` enables single and multiple selection on a menu of options using the HTML `select` element and `option` elements. To specify whether multiple options can be selected, use the `multiple` attribute. The `size` attribute can be used to specify how many options are visible at once. `lightning-select` also accepts most general form input attributes such as `required` and `disabled`.\n\nHere's an example on how to create a menu of options. Pass a default value to the `value` attribute to make it selected by default when the component loads.\n\n```html\n<lightning-select\n    value={selectVal}\n    label=\"Select a product\"\n    options={productOptions}\n    onchange={handleChange}\n></lightning-select>\n```\n\nIn your JavaScript, define an array of options. Each option has a `value` and `label` property. The `value` is returned when you select an option. The `label` value is the text that's displayed on the menu.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class SimpleSelect extends LightningElement {\n    selectVal = '';\n    productOptions = [\n        {\n            label: '--None--',\n            value: '',\n        },\n        {\n            label: 'Sales',\n            value: 'sales',\n        },\n        {\n            label: 'Marketing',\n            value: 'marketing',\n        },\n        {\n            label: 'Service',\n            value: 'service',\n        },\n    ];\n\n    handleChange(event) {\n        this.selectVal = event.detail.value;\n    }\n}\n```\n\nSelecting an option triggers the `change` event, which calls the\n`onchange` handler. To check which option is selected,\nuse `event.detail.value`. If your `value` attribute is null, `event.detail.value` returns an empty string.\n\n## Selecting Multiple Options\n\nTo enable multiple selection of options, use the `multiple` attribute. You can use the `size` attribute to specify the number of options to display by default.\n\n```html\n<lightning-select\n    value={selectVal}\n    label=\"Select a product\"\n    options={productOptions}\n    onchange={handleChange}\n    multiple\n    size=\"3\"\n></lightning-select>\n```\n\nWhen you specify `multiple`, most browsers will show a scrolling list box instead of a single line dropdown. Alternatively, use the [lightning-dual-listbox](/docs/component-library/bundle/lightning-dual-listbox/) component to move options between two lists and reorder the list options.\n\n## Creating Options\n\nTo create menu options, pass in the following properties to the `options` attribute.\n\n| Property | Type    | Description                                                              |\n| -------- | ------- | ------------------------------------------------------------------------ |\n| label    | string  | The text that displays next to a checkbox.                               |\n| value    | string  | The string that's used to identify which checkbox is selected.           |\n| disabled | boolean | If true, the option is not selectable and users cannot interact with it. |\n\n## Input Validation\n\nClient-side input validation is available for this component. You can make\nthe selection required by adding the `required` attribute. An error message is\nautomatically displayed when an item is not selected and the element is `required`.\n\nTo check the validity states of an input, use the `validity` attribute, which\nis based on the `ValidityState` object. You can access the validity states in\nyour JavaScript. This `validity` attribute returns an object with\n`boolean` attributes.\n\nYou can override the default message by providing your own value for\n`message-when-value-missing`.\n\nHere's an example that displays a custom field-level message when a user interacts with the component but does not select an option.\n\n```html\n<lightning-select\n    value={selectVal}\n    label=\"Select a product\"\n    options={productOptions}\n    onchange={handleChange}\n    required\n    message-when-value-missing=\"Which area can we help you with?\"\n>\n</lightning-select>\n```\n\nSet the default value to an empty string so that an option is not selected by default.\n\n```js\nimport { LightningElement } from 'lwc';\n\nexport default class RequiredSelect extends LightningElement {\n    selectVal = '';\n    productOptions = [\n        {\n            label: '--None--',\n            value: '',\n        },\n        {\n            label: 'Sales',\n            value: 'sales',\n        },\n        {\n            label: 'Marketing',\n            value: 'marketing',\n        },\n        {\n            label: 'Service',\n            value: 'service',\n        },\n    ];\n\n    handleChange(event) {\n        this.selectVal = event.detail.value;\n    }\n}\n```\n\n## Custom Validity Error Messages\n\n`lightning-select` supports `setCustomValidity()` from HTML5's Constraint Validation API.\nTo set an error message, provide a quoted string to display.\nTo reset the error message, set the message to an empty string (\"\"). See\ndetails at [https://www.w3.org/TR/html52/sec-forms.html#dom-htmlinputelement-setcustomvalidity](https://www.w3.org/TR/html52/sec-forms.html#dom-htmlinputelement-setcustomvalidity).\n\nThis example shows how to display a custom error message with `setCustomValidity()` and `reportValidity()`.\n\n```html\n<lightning-select\n    name=\"myselect\"\n    value={selectVal}\n    label=\"Select a product\"\n    options={productOptions}\n    onchange={handleChange}\n    required\n></lightning-select>\n\n<lightning-button label=\"Register\" onclick={register}></lightning-button>\n```\n\nWhen you click the **Register** button, the `register()` function displays a custom error message if no option is selected, or clears the error message if an option has been selected.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class CustomSelectError extends LightningElement {\n    selectVal = '';\n    productOptions = [\n        {\n            label: '--None--',\n            value: '',\n        },\n        {\n            label: 'Sales',\n            value: 'sales',\n        },\n        {\n            label: 'Marketing',\n            value: 'marketing',\n        },\n        {\n            label: 'Service',\n            value: 'service',\n        },\n    ];\n\n    handleChange(event) {\n        this.selectVal = event.detail.value;\n    }\n\n    register(event) {\n        const selectCmp = this.template.querySelector('lightning-select');\n        if (this.selectVal === '') {\n            selectCmp.setCustomValidity('You have not selected an option');\n        } else {\n            selectCmp.setCustomValidity('');\n        }\n        // Display the error without user interaction\n        selectCmp.reportValidity();\n    }\n}\n```\n\n#### Component Styling\n\n`lightning-select` implements the\n[select](https://www.lightningdesignsystem.com/components/select/) blueprint in the Salesforce Lightning Design System (SLDS).\n\nYou can use a combination of the `variant` and `class` attributes to customize the dropdown menu.\n\n##### Variants\n\nUse the `variant` attribute with one of these values to position the labels differently relative to the dropdown menu.\n\n-   `standard` is the default, which displays the label above the dropdown menu.\n-   `label-hidden` hides the label but make it available to assistive technology. If you provide a value for `field-level-help`, the tooltip icon is still displayed.\n-   `label-inline` aligns the label and dropdown menu horizontally.\n-   `label-stacked` places the label above the dropdown menu.\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute. For example, you can add padding on the top of the component using the `slds-p-top_medium` SLDS class.\n\nTo apply custom styling, define a custom class using the `class` attribute. Use SLDS styling hooks to customize the component's styles. For example, specify the border color on the `select` element using the `--slds-c-select-color-border` custom property.\n\n```css\n.my-select {\n    --slds-c-select-color-border: red;\n}\n```\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/select/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\n## Usage Considerations\n\n`lightning-select` uses `delegatesFocus` to manage focus. `tabindex` is not supported. See [Handle Focus](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-focus) for more information.\n\nOption groupings and disabled options are currently not supported.\n\n`lightning-select` has usage differences from its Aura counterpart (`lightning:select`). [`lightning:select`](https://developer.salesforce.com/docs/component-library/bundle/lightning:select/example) does not support multiple selection, and it takes in menu options as subcomponents in `lightning:select`. `lightning:select` doesn't currently support multiple selection.\n\nAlternatively, consider using [`lightning-combobox`](https://developer.salesforce.com/docs/component-library/bundle/lightning-combobox) if your dropdown menu doesn't need mobile support or multiple selection.\n\n#### Accessibility\n\nYou must provide a text label for accessibility to make the information\navailable to assistive technology. The `label` attribute creates an HTML label\nelement for your input component. To hide a label from view and make it\navailable to assistive technology, use the `label-hidden` variant.\n\nOn desktop, select multiple options by clicking an option and dragging up or down the list. Alternatively, hold the Ctrl, Command, or Shift keys (depending on your operating system) and then click multiple options to select or deselect them. For more information, see [Selecting multiple options](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Usage_notes) in the MDN web docs.\n\n## Custom Events\n\n**`change`**\n\nThe event fired when an option is selected.\n\nThe `change` event returns the following parameter.\n\n| Parameter | Type   | Description                       |\n| --------- | ------ | --------------------------------- |\n| value     | string | The value of the selected option. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                                                    |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | true  | This event propagates outside of the component in which it was dispatched.                                |\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class SelectBasic extends LightningElement {\n    value = '';\n\n    get options() {\n        return [\n            { label: 'choose one...', value: '' },\n            { label: 'one', value: '1' },\n            { label: 'two', value: '2' },\n            { label: 'three', value: '3' },\n        ];\n    }\n\n    handleChange(event) {\n        this.value = event.detail.value;\n    }\n}\n",
        "html": "<template>\n    <lightning-select\n            name=\"tickets\"\n            label=\"How many tickets?\"\n            value={value}\n            options={options}\n            onchange={handleChange}\n            required ></lightning-select>\n\n    <p>Number of tickets: {value}</p>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class SelectDisabled extends LightningElement {\n    selectVal = '';\n    productOptions = [\n        {\n            label: '--None--',\n            value: '',\n        },\n        {\n            label: 'Sales',\n            value: 'sales',\n        },\n        {\n            label: 'Marketing',\n            value: 'marketing',\n        },\n        {\n            label: 'Service',\n            value: 'service',\n        },\n    ];\n\n    handleChange(event) {\n        this.selectVal = event.detail.value;\n    }\n}\n",
        "html": "<template>\n    <lightning-select\n        value={selectVal}\n        label=\"Select a product\"\n        options={productOptions}\n        onchange={handleChange}\n        disabled\n        message-when-value-missing=\"Which area can we help you with?\">\n    </lightning-select>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class SelectHidden extends LightningElement {\n    selectVal = '';\n    productOptions = [\n        {\n            label: '--None--',\n            value: '',\n        },\n        {\n            label: 'Sales',\n            value: 'sales',\n        },\n        {\n            label: 'Marketing',\n            value: 'marketing',\n        },\n        {\n            label: 'Service',\n            value: 'service',\n        },\n    ];\n\n    handleChange(event) {\n        this.selectVal = event.detail.value;\n    }\n}\n",
        "html": "<template>\n    <lightning-select\n        value={selectVal}\n        label=\"Select a product\"\n        options={productOptions}\n        onchange={handleChange}\n        variant=\"label-hidden\"\n        message-when-value-missing=\"Which area can we help you with?\">\n    </lightning-select>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class SelectInline extends LightningElement {\n    selectVal = '';\n    productOptions = [\n        {\n            label: '--None--',\n            value: '',\n        },\n        {\n            label: 'Sales',\n            value: 'sales',\n        },\n        {\n            label: 'Marketing',\n            value: 'marketing',\n        },\n        {\n            label: 'Service',\n            value: 'service',\n        },\n    ];\n\n    handleChange(event) {\n        this.selectVal = event.detail.value;\n    }\n}\n",
        "html": "<template>\n    <lightning-select\n        name=\"tickets\"\n        value={selectVal}\n        label=\"How many tickets?\"\n        options={productOptions}\n        onchange={handleChange}\n        variant=\"label-inline\">\n    </lightning-select>\n</template>"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class SelectMultiple extends LightningElement {\n    value = '';\n\n    get options() {\n        return [\n            { label: 'Apple', value: 'apple' },\n            { label: 'Blueberry', value: 'blueberry' },\n            { label: 'Cherry', value: 'cherry' },\n            { label: 'Pumpkin', value: 'pumpkin' },\n        ];\n    }\n\n    handleChange(event) {\n        this.value = event.detail.value;\n    }\n}\n",
        "html": "<template>\n    <lightning-select\n            name=\"pies\"\n            label=\"Select your pies\"\n            value={value}\n            options={options}\n            onchange={handleChange}\n            multiple\n            size=\"3\"></lightning-select>\n\n    <p>Selected pies: </p>\n</template>"
      }
    ]
  },
  {
    "tagName": "lightning-slider",
    "shortDescription": "This component is a customizable input range slider that allows users to specify a numeric value within a defined range.",
    "relatedComponents": {
      "lightning-slider": "required"
    },
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "number",
        "examples": ["<lightning-slider value={10}>", "<lightning-slider value={myValue}>"]
      },
      {
        "name": "min",
        "typeSignature": "number",
        "examples": ["<lightning-slider min={0}>", "<lightning-slider min={myMinValue}>"]
      },
      {
        "name": "max",
        "typeSignature": "number",
        "examples": ["<lightning-slider max={100}>", "<lightning-slider max={myMaxValue}>"]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-slider label='Slider'>", "<lightning-slider label={myLabel}>"]
      }
    ],
    "useCases": [
      "Imagine you're shopping online for a new TV and you have a specific budget in mind. The website could use a <lightning-slider> to allow you to set a price range for your search, ensuring that only TVs within your budget are shown.",
      "You're editing a photo on a website and want to adjust the brightness. The site could use a <lightning-slider> to let you easily increase or decrease the brightness level until the photo looks just right.",
      "You're on a music streaming website and want to adjust the volume of the song you're listening to. The site could use a <lightning-slider> to let you control the volume level to your liking.",
      "You're on a real estate website looking for a new house. The website could use a <lightning-slider> to allow you to set the range of square footage you're interested in, so you only see houses that meet your size requirements.",
      "You're on a travel booking website and you want to set the duration of your stay. The site could use a <lightning-slider> to let you easily select the number of nights you want to stay at a location.",
      "You're on a fitness app setting your daily step goal. The app could use a <lightning-slider> to let you easily adjust your step goal to a number that challenges you but is still achievable."
    ],
    "docs": "# Avatar\n\n```HTML\n<lightning:slider />\n```\n\n## Summary\n\n-   An input range slider lets the user specify a numeric value which must be between two specified values.\n-   Customizable via `size` attributes\n\n## Markup\n\n-   This component is based on the markup defined in SLDS:\n    https://latest-210.lightningdesignsystem.com/components/slider\n\n## Usage\n\n```html\n<lightning:slider value=\"10\" min=\"0\" max=\"100\" label=\"Slider\" />\n```\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleSliderBasic extends LightningElement {\n    val = 50;\n}\n",
        "html": "<template>\n    <div class=\"slds-m-vertical_medium\">\n        <h1 class=\"slds-text-heading_small\">Basic Slider</h1>\n        <p class=\"slds-text-body_regular\">A slider lets you specify a number between two specified values. If a range is not provided, the slider defaults to a minimum of 0 and a maximum of 100.</p>\n    </div>\n    \n    <lightning-slider label=\"Volume\" value={val}></lightning-slider>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleSliderSizes extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-vertical_medium\">\n        <h1 class=\"slds-text-heading_small\">Slider Sizes</h1>\n        <p class=\"slds-text-body_regular\">The slider comes in many sizes: x-small, small, medium, and large. The default slider size takes up the width of the view port.</p>\n    </div>\n    \n    <lightning-slider label=\"Volume\" size=\"x-small\"></lightning-slider>\n    <lightning-slider label=\"Volume\" size=\"small\"></lightning-slider>\n    <lightning-slider label=\"Volume\" size=\"medium\"></lightning-slider>\n    <lightning-slider label=\"Volume\" size=\"large\"></lightning-slider>\n    <lightning-slider label=\"Volume\"></lightning-slider>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleSliderType extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-vertical_medium\">\n        <h1 class=\"slds-text-heading_small\">Slider Positioning</h1>\n        <p class=\"slds-text-body_regular\">The slider can be positioned horizontally or vertically.</p>\n    </div>\n    \n    <lightning-slider label=\"Volume\"></lightning-slider>\n    <lightning-slider label=\"Volume\" type=\"vertical\"></lightning-slider>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleSliderVariant extends LightningElement {\n    val = 50;\n}\n",
        "html": "<template>\n    <div class=\"slds-m-vertical_medium\">\n        <h1 class=\"slds-text-heading_small\">Slider Variants</h1>\n        <p class=\"slds-text-body_regular\">The slider can be disabled or displayed without labels.</p>\n    </div>\n    \n    <lightning-slider label=\"Volume\" value={val} disabled></lightning-slider>\n    <lightning-slider label=\"Volume\" variant=\"label-hidden\"></lightning-slider>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-spinner",
    "shortDescription": "This component is an animated spinner image that indicates a feature is loading, providing a visual cue to users during data retrieval or any operation that doesn't immediately complete.",
    "relatedComponents": {
      "lightning-button": "optional"
    },
    "publicApi": [
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": ["<lightning-spinner variant=\"brand\">", "<lightning-spinner variant=\"inverse\">"]
      },
      {
        "name": "size",
        "typeSignature": "string",
        "examples": ["<lightning-spinner size=\"large\">"]
      },
      {
        "name": "alternative-text",
        "typeSignature": "string",
        "examples": ["<lightning-spinner alternative-text=\"Loading...\">"]
      }
    ],
    "useCases": [
      "Imagine you're using an online shopping website and you've just clicked 'checkout'. While the website is processing your order, a spinning icon appears on the screen. This is the <lightning-spinner> component in action, letting you know that your request is being processed.",
      "You're using a weather app and you've just entered your location to get the forecast. While the app is retrieving the data, a spinning icon appears. This is the <lightning-spinner> component, indicating that the app is loading the information.",
      "You're on a social media site and you've just clicked to see more comments on a popular post. As the site is loading the additional comments, a spinning icon appears. This is the <lightning-spinner> component, showing you that more content is being loaded."
    ],
    "docs": "---\nexamples:\n    - name: sizes\n      label: Spinner Sizes\n      description: A spinner can be displayed in multiple sizes.\n    - name: inverse\n      label: Spinner with Inverse Variant\n      description: A spinner uses the inverse variant to display a dark background.\n    - name: if\n      label: Display a Spinner Conditionally\n      description: A spinner can be displayed or hidden conditionally.\n---\n\nA `lightning-spinner` displays an animated spinner image to indicate that a\nfeature is loading. This component can be used when retrieving data or anytime\nan operation doesn't immediately complete.\n\nThe `variant` attribute changes the appearance of the spinner. If you set\n`variant=\"brand\"`, the spinner matches the Lightning Design System brand\ncolor. Setting `variant=\"inverse\"` displays a white spinner. The default\nspinner color is dark blue.\n\nThis component inherits styling from\n[spinners](https://www.lightningdesignsystem.com/components/spinners/) in the\nLightning Design System.\n\nHere is an example.\n\n```html\n<template>\n    <lightning-spinner variant=\"brand\" size=\"large\"> </lightning-spinner>\n</template>\n```\n\n`lightning-spinner` is intended to be used conditionally. You can use\n`if:{true or false}` or the Lightning Design System utility classes to show or hide the\nspinner.\n\n```html\n<template>\n    <lightning-button label=\"Toggle\" variant=\"brand\" onclick={toggle}>\n    </lightning-button>\n\n    <div class=\"slds-m-around_large\">\n        <p if:true={isLoaded}>Content has been loaded.</p>\n\n        <div if:false={isLoaded} class=\"slds-is-relative\">\n            <lightning-spinner alternative-text=\"Loading...\">\n            </lightning-spinner>\n        </div>\n    </div>\n</template>\n```\n\nThe `toggle()` function toggles the boolean value of the `isLoaded` variable.\n\n```javascript\nimport { LightningElement, api } from 'lwc';\n\nexport default class DemoSpinner extends LightningElement {\n    @api isLoaded = false;\n\n    // change isLoaded to the opposite of its current value\n    toggle() {\n        this.isLoaded = !this.isLoaded;\n    }\n}\n```\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class SpinnerIf extends LightningElement {\n    loaded = false;\n\n    handleClick() {\n        this.loaded = !this.loaded;\n    }\n}\n",
        "html": "<template>\n    <lightning-button label=\"Toggle\" variant=\"brand\" onclick={handleClick}></lightning-button>\n\n    <div class=\"exampleHolder\">\n        <template if:true={loaded}>\n            Put loaded content here\n        </template>\n        <template if:false={loaded}>\n            <lightning-spinner alternative-text=\"Loading\"></lightning-spinner>\n        </template>\n    </div>\n</template>",
        "css": ".exampleHolder{\n    position: relative;\n    display: inline-block;\n    margin-left: 15px;\n    width: 55px;\n    vertical-align: middle;\n    white-space: nowrap;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class SpinnerInverse extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"backgroundInverse\">\n        <lightning-spinner alternative-text=\"Loading\" variant=\"inverse\"></lightning-spinner>\n    </div>\n</template>\n",
        "css": ".backgroundInverse {\n    position: relative;\n    background-color: #16325c;\n    height: 80px;\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class SpinnerSizes extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"exampleHolder\">\n        <lightning-spinner alternative-text=\"Loading\" size=\"xx-small\"></lightning-spinner>\n    </div>\n    <div class=\"exampleHolder\">\n        <lightning-spinner alternative-text=\"Loading\" size=\"x-small\"></lightning-spinner>\n    </div>\n    <div class=\"exampleHolder\">\n        <lightning-spinner alternative-text=\"Loading\" size=\"small\"></lightning-spinner>\n    </div>\n    <div class=\"exampleHolder\">\n        <lightning-spinner alternative-text=\"Loading\" size=\"medium\"></lightning-spinner>\n    </div>\n    <div class=\"exampleHolder\">\n        <lightning-spinner alternative-text=\"Loading\" size=\"large\"></lightning-spinner>\n    </div>\n</template>\n",
        "css": ".exampleHolder{\n    position: relative;\n    display: inline-block;\n    width: 80px;\n    height: 80px;\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-stacked-tab",
    "shortDescription": "This component is a tabbed container that organizes related content, providing an interactive user experience where content is displayed upon clicking a tab, with additional mobile support for sliding content into view.",
    "relatedComponents": {
      "lightning-stacked-tabset": "required"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-stacked-tab label='Related'>", "<lightning-stacked-tab label={tabLabel}>"]
      },
      {
        "name": "icon-name",
        "typeSignature": "string",
        "examples": [
          "<lightning-stacked-tab icon-name='utility:chevronright'>",
          "<lightning-stacked-tab icon-name={iconName}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're using a mobile app for a music streaming service. The app has a section where you can view an artist's profile. In this section, there are different categories of information like 'About', 'Albums', 'Songs', etc. Each of these categories could be a <lightning-stacked-tab>, so when you click on 'Albums', for example, you see all the albums by that artist.",
      "On a shopping website, you're looking at a product page. The product has a lot of information divided into sections like 'Product Details', 'Reviews', 'Shipping Info', etc. Each of these sections could be a <lightning-stacked-tab>. When you click on 'Reviews', you can read what other customers have said about the product.",
      "You're using a fitness app on your phone. In the app, there's a section for each type of exercise like 'Cardio', 'Strength Training', 'Yoga', etc. Each of these could be a <lightning-stacked-tab>. When you click on 'Yoga', you see all the yoga workouts available in the app.",
      "On a news website, there's a section for different types of news like 'Local', 'National', 'World', 'Sports', etc. Each of these could be a <lightning-stacked-tab>. When you click on 'Sports', you see all the latest sports news.",
      "You're using a recipe app. In the app, there's a section for each type of cuisine like 'Italian', 'Mexican', 'Chinese', etc. Each of these could be a <lightning-stacked-tab>. When you click on 'Italian', you see all the Italian recipes available in the app.",
      "On a travel website, there's a section for each type of travel information like 'Flights', 'Hotels', 'Car Rentals', etc. Each of these could be a <lightning-stacked-tab>. When you click on 'Hotels', you see all the hotel booking options available."
    ],
    "docs": "# Stacked Tab\n\nA `lightning-stacked-tab` component keeps related content in a single container. The tab content displays when a user clicks the tab. Use `lightning-stacked-tab` as a child of the `lightning-stacked-tabset` component.\n\n```html\n<lightning-stacked-tabset>\n    <lightning-stacked-tab label=\"Related\"></lightning-stacked-tab>\n    <lightning-stacked-tab label=\"Details\"></lightning-stacked-tab>\n</lightning-stacked-tabset>\n```\n\nThe stacked tabs act as buttons. To support displaying tab content on mobile devices, we recommend sliding a tab content into view when a tab is clicked. The tab content should display a back button that returns you to the stacked tabs.\n\n`lightning-stacked-tab` implements the [tabs (on mobile)](https://lightningdesignsystem.com/components/tabs/#On-Mobile) blueprint in the Salesforce Lightning Design System (SLDS).\n\n## Attributes\n\nUse the following attributes to customize `lightning-stacked-tab`.\n\n| Attribute Name | Type   | Description                                                 |\n| -------------- | ------ | ----------------------------------------------------------- |\n| label          | string | The text to display on the tab.                             |\n| icon-name      | string | The icon to display. The default is `utility:chevronright`. |\n\n## Methods\n\n**`focus()`**\n\nSets focus on the tab.\n",
    "examples": []
  },
  {
    "tagName": "lightning-stacked-tabset",
    "shortDescription": "This component is a container for multiple related content sections, providing the user with a navigable interface to show and hide these sections as needed.",
    "relatedComponents": {
      "lightning-stacked-tab": "required"
    },
    "publicApi": [],
    "useCases": [
      "In a shopping website, a <lightning-stacked-tabset> could be used on the product detail page. The tabs could be used to separate and organize information about the product, such as its specifications, customer reviews, and shipping details. This way, customers can easily navigate and find the information they need without having to scroll through a long page.",
      "On a news website, a <lightning-stacked-tabset> could be used to categorize different types of content on the homepage. For example, there could be separate tabs for local news, international news, sports, entertainment, and more. This would allow users to quickly find the type of news they are interested in.",
      "In a company's internal portal, a <lightning-stacked-tabset> could be used on an employee's profile page. The tabs could be used to separate different types of information about the employee, such as their contact information, job history, performance reviews, and training records. This would make it easier for HR staff to find the information they need.",
      "On a travel booking website, a <lightning-stacked-tabset> could be used on the hotel detail page. The tabs could be used to separate and organize information about the hotel, such as its amenities, room types, customer reviews, and location. This would allow customers to easily navigate and find the information they need to make a booking.",
      "In a university's online learning platform, a <lightning-stacked-tabset> could be used on a course's page. The tabs could be used to separate different types of content, such as the course syllabus, lecture videos, assignments, and discussion forums. This would allow students to easily navigate the course content."
    ],
    "docs": "# Stacked Tabset\n\nA `lightning-stacked-tabset` component can contain multiple `lightning-stacked-tab` component to keep related content in a single container, which can be shown and hidden through navigation.\n\n```html\n<lightning-stacked-tabset>\n    <lightning-stacked-tab label=\"Related\"></lightning-stacked-tab>\n    <lightning-stacked-tab label=\"Details\"></lightning-stacked-tab>\n</lightning-stacked-tabset>\n```\n\nSee the [lightning-stacked-tab](../stackedTab/) component for more information.\n",
    "examples": [
      {
        "js": "import { LightningElement, track } from 'lwc';\n\nexport default class Conditinal extends LightningElement {\n    @track show;\n\n    handleToggle() {\n        this.show = !this.show;\n    }\n}\n",
        "html": "<template>\n    <lightning-button label=\"Toggle\" onclick={handleToggle}></lightning-button>\n    <lightning-stacked-tabset>\n        <lightning-stacked-tab label=\"One\"></lightning-stacked-tab>\n        <lightning-stacked-tab label=\"Two\"></lightning-stacked-tab>\n        <template if:true={show}>\n            <lightning-stacked-tab label=\"Three\"></lightning-stacked-tab>\n        </template>\n    </lightning-stacked-tabset>\n</template>\n"
      },
      {
        "js": "import { LightningElement, track } from 'lwc';\n\nexport default class Events extends LightningElement {\n    @track selectedTab = '';\n\n    handleTabClick(e) {\n        this.selectedTab = e.target.label;\n    }\n}\n",
        "html": "<template>\n    <p>Selected Tab is: {selectedTab}</p>\n    <lightning-stacked-tabset>\n        <lightning-stacked-tab\n            label=\"One\"\n            onclick={handleTabClick}\n        ></lightning-stacked-tab>\n        <lightning-stacked-tab\n            label=\"Two\"\n            onclick={handleTabClick}\n        ></lightning-stacked-tab>\n        <lightning-stacked-tab\n            label=\"Three\"\n            onclick={handleTabClick}\n        ></lightning-stacked-tab>\n    </lightning-stacked-tabset>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class Simple extends LightningElement {}\n",
        "html": "<template>\n    <lightning-stacked-tabset>\n        <lightning-stacked-tab label=\"One\"></lightning-stacked-tab>\n        <lightning-stacked-tab label=\"Two\"></lightning-stacked-tab>\n        <lightning-stacked-tab label=\"Three\" icon-name=\"utility:activity\"></lightning-stacked-tab>\n    </lightning-stacked-tabset>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-tab",
    "shortDescription": "This component is a tabbed container that allows users to switch between different content sections by clicking on the respective tab, providing a streamlined and organized user experience.",
    "relatedComponents": {
      "lightning-tabset": "required"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": ["<lightning-tab label='Item One'>", "<lightning-tab label={tabLabel}>"]
      },
      {
        "name": "icon-name",
        "typeSignature": "string",
        "examples": ["<lightning-tab icon-name='utility:home'>", "<lightning-tab icon-name={iconName}>"]
      },
      {
        "name": "icon-assistive-text",
        "typeSignature": "string",
        "examples": ["<lightning-tab icon-assistive-text='Home'>", "<lightning-tab icon-assistive-text={iconText}>"]
      },
      {
        "name": "end-icon-name",
        "typeSignature": "string",
        "examples": ["<lightning-tab end-icon-name='utility:close'>", "<lightning-tab end-icon-name={endIconName}>"]
      },
      {
        "name": "end-icon-alternative-text",
        "typeSignature": "string",
        "examples": [
          "<lightning-tab end-icon-alternative-text='Close'>",
          "<lightning-tab end-icon-alternative-text={endIconText}>"
        ]
      },
      {
        "name": "show-error-indicator",
        "typeSignature": "boolean",
        "examples": ["<lightning-tab show-error-indicator>", "<lightning-tab show-error-indicator={hasError}>"]
      },
      {
        "name": "onactive",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-tab onactive={handleActive}>"]
      }
    ],
    "useCases": [
      "In an online shopping website, the <lightning-tab> component can be used to categorize different types of products. For example, one tab could be labeled 'Electronics' and display all the electronic items when clicked, while another tab could be labeled 'Clothing' and show all the clothing items when selected.",
      "In a university's student portal, the <lightning-tab> component can be used to separate different sections of student information. For example, one tab could be labeled 'Grades' and display the student's academic grades when clicked, while another tab could be labeled 'Schedule' and show the student's class schedule when selected.",
      "In a company's internal system, the <lightning-tab> component can be used to organize different departments. For instance, one tab could be labeled 'Human Resources' and display all HR-related information when clicked, while another tab could be labeled 'Finance' and show all finance-related information when selected.",
      "In a music streaming app, the <lightning-tab> component can be used to categorize different genres of music. For example, one tab could be labeled 'Pop' and display all the pop songs when clicked, while another tab could be labeled 'Rock' and show all the rock songs when selected.",
      "In a news website, the <lightning-tab> component can be used to separate different types of news categories. For instance, one tab could be labeled 'Politics' and display all the political news when clicked, while another tab could be labeled 'Sports' and show all the sports news when selected.",
      "In a travel booking website, the <lightning-tab> component can be used to categorize different types of bookings. For example, one tab could be labeled 'Flights' and display all the flight booking options when clicked, while another tab could be labeled 'Hotels' and show all the hotel booking options when selected."
    ],
    "docs": "A `lightning-tab` component keeps related content in a single container. The tab content\ndisplays when a user clicks the tab. Use `lightning-tab`\nas a child of the [`lightning-tabset`](bundle/lightning-tabset/documentation) component.\n\nThis component inherits styling from\n[tabs](https://www.lightningdesignsystem.com/components/tabs/) in the\nLightning Design System.\n\nUse the `label` attribute to specify the tab's text label.\n\nTo display an icon at the beginning of the label, use the `icon-name` attribute. Provide alternative text for the icon using `icon-assistive-text`.\n\nTo display an icon at the end of the label, use the `end-icon-name` attribute. Provide alternative text for that icon using `end-icon-alternative-text`.\n\nSpecify the `show-error-indicator` attribute to display an error indicator in the tab after the label. If an end icon is present, the error indicator is displayed after the icon.\n\n#### Usage Considerations\n\nTab content is lazy loaded. You can only query the content for the active and previously active tabs.\n\nSee [`lightning-tabset`](bundle/lightning-tabset/documentation) for more\ninformation.\n\nYou can nest `lightning-tab` within other elements such as `<div>` or `<template>`, for example to render tabs conditionally using `if:true` and `if:false`. Otherwise, you must nest\n`lightning-tab` directly within `lightning-tabset` tags.\n\nFor example, you want to display a tab conditionally.\n\n```html\n<lightning-tabset>\n    <lightning-tab label=\"Item One\"> Content for tab 1 </lightning-tab>\n    <template if:true={showTabTwo}>\n        <lightning-tab label=\"Item Two\"> Content for tab 2 </lightning-tab>\n    </template>\n</lightning-tabset>\n```\n\nThis component has usage differences from its Aura counterpart. See [Base Components: Aura Vs Lightning Web Components](https://developer.salesforce.com/docs/platform/lwc/guide/migrate-map-aura-lwc-components) in the Lightning Web Components Developer Guide.\n\n#### Custom Events\n\n**`active`**\n\nThe event fired when a tab becomes active.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                |\n| ---------- | ----- | -------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                     |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event. |\n| composed   | true  | This event propagates outside of the component in which it was dispatched. |\n",
    "examples": []
  },
  {
    "tagName": "lightning-tabset",
    "shortDescription": "This component is a tabbed container that organizes multiple content areas into separate tabs, providing users with an easy way to switch between different sections of information or functionality without leaving the page.",
    "relatedComponents": {
      "lightning-tab": "required"
    },
    "publicApi": [
      {
        "name": "variant",
        "typeSignature": "string",
        "examples": [
          "<lightning-tabset variant='default'>",
          "<lightning-tabset variant='scoped'>",
          "<lightning-tabset variant='vertical'>"
        ]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": [
          "<lightning-tabset class='slds-theme_shade'>",
          "<lightning-tabset variant='scoped' class='tab-active'>"
        ]
      },
      {
        "name": "heading-label",
        "typeSignature": "string",
        "examples": ["<lightning-tabset heading-label='Example tabset'>"]
      },
      {
        "name": "heading-level",
        "typeSignature": "number",
        "examples": ["<lightning-tabset heading-label='Example tabset' heading-level='3'>"]
      },
      {
        "name": "heading-visible",
        "typeSignature": "boolean",
        "examples": ["<lightning-tabset heading-label='Example tabset' heading-level='3' heading-visible>"]
      }
    ],
    "useCases": [
      "Imagine you're using a website for a clothing store. The website has a page for each type of clothing (e.g., shirts, pants, shoes). Instead of having to navigate to a new page for each type of clothing, the website uses the <lightning-tabset> component to display all the types of clothing on one page. You can click on the 'Shirts' tab to see all the shirts, the 'Pants' tab to see all the pants, and so on. This makes it easier for you to browse all the types of clothing without having to load a new page each time.",
      "Suppose you're using a project management app. The app has a page for each project, and each project has several different sections (e.g., Tasks, Calendar, Files, Discussions). Instead of having to navigate to a new page for each section, the app uses the <lightning-tabset> component to display all the sections on one page. You can click on the 'Tasks' tab to see all the tasks for the project, the 'Calendar' tab to see the project's calendar, and so on. This makes it easier for you to manage all aspects of the project without having to load a new page each time.",
      "Consider you're using a fitness tracking app. The app has a page for each type of activity (e.g., Running, Cycling, Swimming). Instead of having to navigate to a new page for each activity, the app uses the <lightning-tabset> component to display all the activities on one page. You can click on the 'Running' tab to see all your running activities, the 'Cycling' tab to see all your cycling activities, and so on. This makes it easier for you to review all your activities without having to load a new page each time."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Tabset\n      description: A tabset includes content within tabs.\n    - name: scoped\n      label: Tabset with Scoped Variant\n      description: The scoped variant displays the tabset with a different visual styling than the default.\n    - name: activeTab\n      label: Tabset with Default Selected Tab\n      description: A tabset can display an active tab by default using the active-tab-value attribute.\n    - name: conditionalTab\n      label: Tabset with Conditional Tabs\n      description: A tab can be displayed or hidden conditionally.\n    - name: onactive\n      label: Tabset with Content Added When Tab is Selected\n      description: Programmatically add content to a tab when the tab is selected. Tab's content is a message with the selected tab's value.\n    - name: overflow\n      label: Tabset with Overflow Tabs\n      description: Overflow tabs are hidden from view when the view port is not wide enough. Overflow tabs are grouped in a dropdown menu labelled \"More\".\n    - name: vertical\n      label: Tabset with Vertical Variant\n      description: A tabset can be displayed vertically using the vertical variant.\n---\n\nA `lightning-tabset` displays a tabbed container with multiple content areas,\nonly one of which is visible at a time. Tabs are displayed horizontally inline\nwith content shown below it, by default. Use tabs to separate information into logical sections based on functionality or use case.\n\nA tabset can hold multiple [`lightning-tab`](bundle/lightning-tab/documentation) components as part of its body. The first tab is activated by default.\n\nSet the `variant` attribute to change the look of the tabset. The `variant` attribute can be set to `default`, `scoped`, or `vertical`. See **Design Guidelines** for more information.\n\nNext is an example of a standard horizontal tabset.\n\n```html\n<template>\n    <lightning-tabset>\n        <lightning-tab label=\"Tab One\"> Content of Tab One </lightning-tab>\n        <lightning-tab label=\"Tab Two\"> Content of Tab Two </lightning-tab>\n    </lightning-tabset>\n</template>\n```\n\n#### Add Content To Tab Programmatically\n\nTo add content programmatically to the tab body, use the `onactive` event handler on `lightning-tab`.\nHere's an example with two tabs, which loads content when the tabs are selected.\n\n```html\n<template>\n    <lightning-tabset>\n        <lightning-tab label=\"Item One\" value=\"1\" onactive={handleActive}>\n            Here's the content for Item One: {tabContent}\n        </lightning-tab>\n        <lightning-tab label=\"Item Two\" value=\"2\" onactive={handleActive}>\n            Here's the content for Item Two: {tabContent}\n        </lightning-tab>\n    </lightning-tabset>\n</template>\n```\n\nIdentify the active tab using `event.target.value`.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class ActiveTabExample extends LightningElement {\n    tabContent = '';\n\n    handleActive(event) {\n        const tab = event.target;\n        this.tabContent = `Tab ${event.target.value} is now active`;\n    }\n}\n```\n\n#### Design Guidelines\n\nUse `lightning-tabset` to enable users to easily switch between tabs to perform tasks without leaving the page. Assign a default tab based on the most important use case for the page.\n\nWe don't recommend using tabs to define a linear, ordered process since each tab functions independently of the others.\n\nTab labels must be consistent. For example, use a verb to let users identify a tab's purpose quickly.\n\n`lightning-tabset` doesn’t currently support mobile-oriented tabs. This component doesn’t adjust the tab styling when there are two or more immediately adjacent tab sets on mobile.\n\n#### Component Styling\n\n`lightning-tabset` implements the\n[tabs](https://www.lightningdesignsystem.com/components/tabs/) blueprint in the\nSalesforce Lightning Design System (SLDS).\n\nYou can use a combination of the `variant` and `class` attributes to customize the tab content styles.\n\n##### Variants\n\nUse the `variant` attribute to group your content and apply styling.\n\n-   `default` creates global tabs. When you select a tab, its content replaces the content of the previously selected tab. The default variant tab encapsulates the content underneath it without enclosing it visually.\n\n-   `scoped` creates a tab set that has a closed container with a defined border. Scoped tabs are useful for stacking several tabbed sections, where you want to change only a portion of the content displayed. When you click those tabs, the content at the bottom remains the same while the content at the top changes for the activity.\n\n-   `vertical` resembles the scoped variant in appearance, but the tabs are arranged vertically to the side instead of on the top.\n\nYou can nest scoped tabs within a global tab set, but don't nest global tabs. If additional hierarchy is necessary, consider using a `lightning-tree` component.\n\n##### Customize Component Styling\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds a gray background and padding to the content area on the first tab using SLDS classes.\n\n```html\n<lightning-tabset>\n    <lightning-tab label=\"Item One\" class=\"slds-theme_shade\">\n        <p class=\"slds-p-left--small\">Hello Tab 1!</p>\n    </lightning-tab>\n    <lightning-tab label=\"Item Two\"> </lightning-tab>\n</lightning-tabset>\n```\n\nTo change the text color on the active tab, define a custom class using the `class` attribute. This example sets the text on the active tab to red.\n\n```html\n<lightning-tabset variant=\"scoped\" class=\"tab-active\">\n    <lightning-tab label=\"Item One\">\n        <p>Hello Tab 1!</p>\n    </lightning-tab>\n    <lightning-tab label=\"Item Two\" title=\"2nd tab extended title\">\n        <p>Hello Tab 1!</p>\n    </lightning-tab>\n</lightning-tabset>\n```\n\nSpecify the text color using the `--slds-c-tabs-scoped-color-text-active` custom property.\n\n```css\n.tab-active {\n    --slds-c-tabs-scoped-color-text-active: red;\n}\n```\n\nFor more information, see [Style Components Using Lightning Design System Styling Hooks](https://developer.salesforce.com/docs/platform/lwc/guide/create-components-css-custom-properties) in the Lightning Web Components Developer Guide.\n\nTo understand how we implemented SLDS in `lightning-tabset`, see the **Source Code** section.\n\n#### Usage Considerations\n\nWhen a tabset contains more tabs than can fit in the viewport, the tabs that don't fit are moved into a dropdown menu (also known as an overflow) next to the last tab that fits. Note that the active tab always shows and is never moved into the overflow. Truncating the tab label is not supported. When the tab label has more characters than can fit the viewport, the extra characters are not truncated but are hidden from view.\n\nYou can nest `lightning-tab` within other elements such as `<div>` or `<template>`, for example to render tabs conditionally using `if:true` and `if:false`. Otherwise, you must nest\n`lightning-tab` directly within `lightning-tabset` tags.\n\nTab content is lazy loaded, and as such only the active and previously\nactive tabs content is queryable. In the example, the text `Content of Tab Two` is inserted in the DOM of the page only when the second tab is selected.\n\nThis component has usage differences from its Aura counterpart. See [Base Components: Aura Vs Lightning Web Components](https://developer.salesforce.com/docs/platform/lwc/guide/migrate-map-aura-lwc-components) in the Lightning Web Components Developer Guide.\n\n#### Accessibility\n\nUse the Tab or arrow keys to navigate to the More menu that’s created when the viewport is too narrow to show all the tabs.\n\nSeveral attributes enable accessibility features for a tabset heading.\n\nUse `heading-label` to specify custom assistive text for a tabset heading. The value of `heading-label` is rendered as the text content of a `div` element with `role=\"heading\"` and `aria-level=\"2\"`. If you don't specify `heading-label` the default assistive text is \"Tabs\" in a `div` element with `aria-level=\"2\"`.\n\nUse `heading-level` to pass a value between 1 and 6 to the rendered `aria-level` attribute. The default value is 2. This attribute requires you to also specify `heading-label`.\n\nSpecify `heading-visible` to display the assistive text above the tabset when you specify `heading-label`. By default, this attribute is not present so the assistive text is read by screen readers but isn't displayed. When `heading-visible` is present, the assistive text is read by screen readers and displayed.\n\nThis example sets custom assistive text for a heading, specifies `heading-level` to change the rendered `aria-level`, and makes the heading visible.\n\n```html\n<template>\n  <lightning-tabset heading-label=\"Example tabset\" heading-level=\"3\" heading-visible>\n    <lightning-tab label=\"Item One\"> One Content! </lightning-tab>\n    <lightning-tab label=\"Item Two\"> Two Content! </lightning-tab>\n  </lightning-tabset>\n</template>\n```\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TabsetActiveTab extends LightningElement {}\n",
        "html": "<template>\n    <lightning-tabset active-tab-value=\"two\">\n        <lightning-tab label=\"Item One\" value=\"one\">\n            One Content !\n        </lightning-tab>\n        <lightning-tab label=\"Item Two\" value=\"two\">\n            Two Content !\n        </lightning-tab>\n        <lightning-tab label=\"Item Three\" value=\"three\">\n            Three Content !\n        </lightning-tab>\n    </lightning-tabset>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TabsetBasic extends LightningElement {}\n",
        "html": "<template>\n    <lightning-tabset>\n        <lightning-tab label=\"Item One\">\n            One Content !\n        </lightning-tab>\n        <lightning-tab label=\"Item Two\" title=\"2nd tab extended title\">\n            Two Content !\n        </lightning-tab>\n        <lightning-tab label=\"Item Three\">\n            Three Content !\n        </lightning-tab>\n    </lightning-tabset>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TabsetConditionalTab extends LightningElement {\n    showTabFour;\n\n    toggleOptionalTab() {\n        this.showTabFour = !this.showTabFour;\n    }\n}\n",
        "html": "<template>\n    <lightning-tabset>\n        <lightning-tab label=\"Item One\">\n            One Content !\n        </lightning-tab>\n        <lightning-tab label=\"Item Two\">\n            Two Content !\n        </lightning-tab>\n        <lightning-tab label=\"Item Three\">\n            Three Content !\n        </lightning-tab>\n        <template if:true={showTabFour}>\n            <lightning-tab label=\"Item Four\">\n                Four Content !\n            </lightning-tab>\n        </template>\n    </lightning-tabset>\n\n    <lightning-button label=\"Toggle Optional Tab\" onclick={toggleOptionalTab} ></lightning-button>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nconst NUM_OF_TABS = 3;\n\nexport default class TabsetOnActive extends LightningElement {\n    activeValueMessage = '';\n\n    get tabs() {\n        const tabs = [];\n        for (let i = 0; i < NUM_OF_TABS; i++) {\n            tabs.push({\n                value: `${i}`,\n                label: `Item ${i}`,\n                content: `Tab Content ${i}`,\n            });\n        }\n        return tabs;\n    }\n\n    handleActive(event) {\n        this.activeValueMessage = `Tab with value ${event.target.value} is now active`;\n    }\n}\n",
        "html": "<template>\n    <lightning-tabset variant=\"scoped\" active-tab-value=\"2\">\n        <template for:each={tabs} for:item=\"tab\">\n            <lightning-tab label={tab.label} key={tab.value} value={tab.value} onactive={handleActive}>\n                {tab.content}\n            </lightning-tab>\n        </template>\n    </lightning-tabset>\n    <lightning-formatted-text value={activeValueMessage} ></lightning-formatted-text>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nconst NUM_OF_TABS = 30;\n\nexport default class TabsetOverflow extends LightningElement {\n    activeValueMessage = '';\n\n    get tabs() {\n        const tabs = [];\n        for (let i = 0; i < NUM_OF_TABS; i++) {\n            tabs.push({\n                value: `${i}`,\n                label: `Item ${i}`,\n                content: `Tab Content ${i}`,\n            });\n        }\n        return tabs;\n    }\n}\n",
        "html": "<template>\n    <lightning-tabset variant=\"scoped\">\n        <template for:each={tabs} for:item=\"tab\">\n            <lightning-tab label={tab.label} key={tab.value} value={tab.value}>\n                {tab.content}\n            </lightning-tab>\n        </template>\n    </lightning-tabset>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TabsetScoped extends LightningElement {}\n",
        "html": "<template>\n    <lightning-tabset variant=\"scoped\">\n        <lightning-tab label=\"Item One\">\n            One Content !\n        </lightning-tab>\n        <lightning-tab label=\"Item Two\">\n            Two Content !\n        </lightning-tab>\n        <lightning-tab label=\"Item Three\">\n            Three Content !\n        </lightning-tab>\n    </lightning-tabset>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TabsetVertical extends LightningElement {}\n",
        "html": "<template>\n    <lightning-tabset variant=\"vertical\">\n        <lightning-tab label=\"Item One\">\n            One Content !\n        </lightning-tab>\n        <lightning-tab label=\"Item Two\">\n            Two Content !\n        </lightning-tab>\n        <lightning-tab label=\"Item Three\">\n            Three Content !\n        </lightning-tab>\n    </lightning-tabset>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-textarea",
    "shortDescription": "This component is a customizable text input field that supports multi-line text, input validation, programmable text insertion, autocomplete, and accessibility features, providing an interactive user experience for entering and managing text content.",
    "relatedComponents": {
      "lightning-input": "optional",
      "lightning-button": "optional"
    },
    "publicApi": [
      {
        "name": "value",
        "typeSignature": "string",
        "examples": ["<lightning-textarea value='initial value'>", "<lightning-textarea value={myValue}>"]
      },
      {
        "name": "label",
        "typeSignature": "string",
        "examples": [
          "<lightning-textarea label='What are you thinking about?'>",
          "<lightning-textarea label={myLabel}>"
        ]
      },
      {
        "name": "max-length",
        "typeSignature": "number",
        "examples": ["<lightning-textarea max-length='300'>", "<lightning-textarea max-length={maxLength}>"]
      },
      {
        "name": "onchange",
        "typeSignature": "(ev: CustomEvent & { detail: { value: string } }) => void",
        "examples": ["<lightning-textarea onchange={handleChange}>"]
      },
      {
        "name": "minlength",
        "typeSignature": "number",
        "examples": ["<lightning-textarea minlength='10'>", "<lightning-textarea minlength={minLength}>"]
      },
      {
        "name": "required",
        "typeSignature": "boolean",
        "examples": ["<lightning-textarea required>", "<lightning-textarea required={isRequired}>"]
      },
      {
        "name": "message-when-value-missing",
        "typeSignature": "string",
        "examples": [
          "<lightning-textarea message-when-value-missing='This field is required.'>",
          "<lightning-textarea message-when-value-missing={missingMessage}>"
        ]
      },
      {
        "name": "message-when-bad-input",
        "typeSignature": "string",
        "examples": [
          "<lightning-textarea message-when-bad-input='Invalid input.'>",
          "<lightning-textarea message-when-bad-input={badInputMessage}>"
        ]
      },
      {
        "name": "message-when-too-long",
        "typeSignature": "string",
        "examples": [
          "<lightning-textarea message-when-too-long='Input is too long.'>",
          "<lightning-textarea message-when-too-long={tooLongMessage}>"
        ]
      },
      {
        "name": "message-when-too-short",
        "typeSignature": "string",
        "examples": [
          "<lightning-textarea message-when-too-short='Input is too short.'>",
          "<lightning-textarea message-when-too-short={tooShortMessage}>"
        ]
      },
      {
        "name": "autocomplete",
        "typeSignature": "string",
        "examples": ["<lightning-textarea autocomplete='on'>", "<lightning-textarea autocomplete={autoComplete}>"]
      },
      {
        "name": "class",
        "typeSignature": "string",
        "examples": ["<lightning-textarea class='slds-p-top_small'>", "<lightning-textarea class={myClass}>"]
      }
    ],
    "useCases": [
      "A <lightning-textarea> component could be used in a customer feedback form on a company's website. The form might ask the customer to describe their experience with the company's product or service. The <lightning-textarea> would provide a space for the customer to type out their thoughts and experiences in detail.",
      "A <lightning-textarea> component could be used in a blog post creation tool. The author of the blog post would use the <lightning-textarea> to write out their post. The component could be set to have a maximum character limit to ensure the post doesn't get too long.",
      "A <lightning-textarea> component could be used in a job application form. The form might ask the applicant to describe their previous work experience. The <lightning-textarea> would provide a space for the applicant to type out their work history in detail.",
      "A <lightning-textarea> component could be used in a social media platform. Users could use the <lightning-textarea> to write out their posts or comments. The component could be set to have a maximum character limit to ensure the posts or comments don't get too long.",
      "A <lightning-textarea> component could be used in an email client. The user would use the <lightning-textarea> to write out the body of their email. The component could be set to have a maximum character limit to ensure the email doesn't get too long.",
      "A <lightning-textarea> component could be used in a note-taking app. The user would use the <lightning-textarea> to write out their notes. The component could be set to have a maximum character limit to ensure the notes don't get too long."
    ],
    "docs": "---\nexamples:\n    - name: various\n      label: Textarea\n      description: A textarea field can hold an unlimited number of characters or a maximum number of character specified by the max-length attribute. If disabled, the field is grayed out and you can't interact with it. A required textarea field displays an error if you don't enter any input after first interaction.\n---\n\nA `lightning-textarea` component creates an HTML `textarea` element for\nentering multi-line text input. A text area holds an unlimited number of\ncharacters.\n\nTo apply a custom width for the text area, use the `class` attribute. To set the\ninput for the text area, set its value using the `value` attribute. Setting\nthis value overwrites any initial value that's provided.\n\nThe following example creates a text area with a maximum length of 300\ncharacters.\n\n```html\n<template>\n    <lightning-textarea\n        value=\"initial value\"\n        label=\"What are you thinking about?\"\n        max-length=\"300\"\n    >\n    </lightning-textarea>\n</template>\n```\n\nThe `rows` attribute and `cols` attribute are not supported. In many browsers, the text area is resizable by default, and a vertical scrollbar is displayed when the content exceeds the number of rows. Specifying the CSS width and height properties is not supported.\n\nYou can define a function in JavaScript to handle input events like\n`blur`, `focus`, and `change`. For example, to handle a `change` event on\nthe component, use the `onchange` attribute.\n\nTo retrieve the content of the text area field, use `event.detail.value` property.\n\n```html\n<template>\n    <lightning-textarea\n        name=\"myTextArea\"\n        value=\"initial value\"\n        label=\"What are you thinking about?\"\n        onchange={countLength}\n    >\n    </lightning-textarea>\n</template>\n```\n\n#### Input Validation\n\nClient-side input validation is available for this component. Set a maximum\nlength using the `maxlength` attribute or a minimum length using the\n`minlength` attribute. An error message is automatically displayed in the\nfollowing cases:\n\n-   A required field is empty when `required` is present on the `lightning-textarea` tag.\n-   The input value contains fewer characters than that specified by the `minlength` attribute.\n-   The input value contains more characters than that specified by the `maxlength` attribute.\n\nTo check the validity states of an input, use the `validity` attribute, which\nis based on the `ValidityState` object. You can access the validity states in\nyour JavaScript. This `validity` attribute returns an object with\n`boolean` properties. For more information, see the\n[`lightning-input`](bundle/lightning-input/documentation) documentation.\n\nYou can override the default message by providing your own values for\n`message-when-value-missing`, `message-when-bad-input`, `message-when-too-long`, or\n`message-when-too-short`.\n\nFor example, provide an error message when a required field's value is missing.\n\n```html\n<template>\n    <lightning-textarea\n        name=\"myText\"\n        label=\"Your Name\"\n        message-when-value-missing=\"This field is required.\"\n        required\n    >\n    </lightning-textarea>\n</template>\n```\n\n#### Inserting Text Programmatically\n\nYou can insert text programmatically in the text area with the `setRangeText()` method, replacing content\nor inserting new content.\n\nThe `setRangeText()` method follows the API of the standard `HTMLInputElement.setRangeText()` method described on\n[MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setRangeText).\n\n`setRangeText()` supports these parameters.\n\n| Parameter   | Type   | Description                                                   |\n| ----------- | ------ | ------------------------------------------------------------- |\n| replacement | string | The string to insert.                                         |\n| start       | number | The 0-based index of the first character to replace.          |\n| end         | number | The 0-based index that follows the last character to replace. |\n| selectMode  | string | Defines how the selection is set after the text is inserted.  |\n\nValid values for selectMode are:\n\n-   `select` - Selects the inserted text. The text area must have focus when `setRangeText()` is called.\n-   `start` - Moves the selection to just before the inserted text.\n-   `end` - Moves the selection to just after the inserted text.\n-   `preserve` - Attempts to preserve the selection in effect before the insertion. This is the default.\n\nTo insert replacement text at the current cursor location, specify only the\nreplacement string and no other parameters. After the insertion, the cursor\nremains in the original location. If text is selected when the insertion occurs,\nthe text is replaced.\n\nThis example uses `setRangeText()` to insert some text at the beginning of the line\nwithout replacing any content.\n\n```html\n<template>\n    <lightning-textarea placeholder=\"Type something interesting\">\n    </lightning-textarea>\n    <lightning-button label=\"Insert Text\" onclick={handleClick}>\n    </lightning-button>\n</template>\n```\n\nSetting the start and end values to 0 begins the insertion with the character at\nindex 0, but ends at the character before index 0. The result is that no characters are\nreplaced, and the text is inserted in front of the character at index 0.\n\nThe selectMode value `select` causes the inserted content to be selected. Call the `focus()`\nmethod before `setRangeText()` to enable the selection.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class SetRangeTextExample extends LightningElement {\n    start = 0;\n    end = 0;\n    selectMode = 'select';\n\n    handleClick() {\n        const textarea = this.template.querySelector('lightning-textarea');\n        textarea.focus();\n        textarea.setRangeText(\n            'Some new text',\n            this.start,\n            this.end,\n            this.selectMode\n        );\n    }\n}\n```\n\nThis example inserts a space at index 10 and removes characters at index 10 through 14.\nThe resulting content of the text area is `0123456789 567890`.\n\n```html\n<template>\n    <lightning-textarea value=\"012345678901234567890\"> </lightning-textarea>\n    <lightning-button label=\"Clip Text\" onclick={handleClick}>\n    </lightning-button>\n</template>\n```\n\nYou can omit the final parameter of `setRangeText()` to use the default select mode, `preserve`.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class SetRangeTextExample extends LightningElement {\n    handleClick() {\n        const textarea = this.template.querySelector('lightning-textarea');\n        textarea.setRangeText(' ', 10, 15);\n    }\n}\n```\n\nThese examples describe the insertion behavior with various `setRangeText()`parameter values.\n\n```javascript\n// Insert text at cursor position. Replace any selected text.\ntextarea.setRangeText('Some new text');\n\n// Insert text to replace characters beginning at index 10 (the 11th\n// character) and ending at index 15 (the 16th character). The character\n// at index 14 is the last character replaced.\n// No selectMode is specified, so the original selection is preserved.\ntextarea.setRangeText('Some new text', 10, 15);\n\n// Set focus on the text area.\n// Insert text as described in the previous example, and then select\n// the new text.\ntextarea.focus();\ntextarea.setRangeText('Some new text', 10, 15, 'select');\n\n// Insert text as described, and place cursor ahead of the new text.\ntextarea.setRangeText('Some new text', 10, 15, 'start');\n\n// Insert text as described, and place cursor after the new text.\ntextarea.setRangeText('Some new text', 10, 15, 'end');\n\n// Insert text as described, and return to the previous selection state.\ntextarea.setRangeText('Some new text', 10, 15, 'preserve');\n```\n\nIf text is selected when selectMode is `preserve` and start and end values are specified,\nthe text insertion has no effect on the selected text. The text remains selected and is not replaced.\n\n#### Using Autocomplete\n\nTextarea fields can be autofilled, based on your browser's support of the feature.\nThe `autocomplete` attribute passes through its value to the browser.\n\nSee [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for more information.\n\n#### Component Styling\n\n`lightning-textarea` implements the [textarea](https://www.lightningdesignsystem.com/components/textarea/) blueprint in the Salesforce Lightning Design System (SLDS).\n\nTo apply additional styling, use the SLDS [utility classes](https://www.lightningdesignsystem.com/utilities/alignment) with the `class` attribute.\n\nThis example adds padding on top of the textarea using an SLDS class.\n\n```html\n<lightning-textarea class=\"slds-p-top_small\" label=\"Enter comments\">\n</lightning-textarea>\n```\n\nTo apply custom styling, use the `:host` selector. Use SLDS styling hooks to customize the component's styles. For example, specify the minimum height using the `--slds-c-textarea-sizing-min-height` custom property.\n\n```css\n:host {\n    --slds-c-textarea-sizing-min-height: 200px;\n}\n```\n\nSee [Styling Hooks Overview](https://www.lightningdesignsystem.com/components/rich-text-editor/#Styling-Hooks-Overview) for a list of CSS custom properties.\n\n#### Accessibility\n\nUse the `label` attribute to identify the text area for users of assistive technology.\nThe `label` attribute creates an HTML label element on the input element. To hide a\nlabel from view and make it available to assistive technology, use the `label-hidden` variant.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleTextareaVarious extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-vertical_medium\">\n        <h1 class=\"slds-text-heading_small\">Various Textarea Examples</h1>\n        <p class=\"slds-text-body_regular\">The following examples show various ways to create a textarea component.</p>\n    </div>\n\n    <div class=\"row\">\n        <h2 class=\"header\">Basic Examples</h2>\n        <lightning-textarea name=\"input1\" label=\"Enter some text\" ></lightning-textarea>\n        <lightning-textarea name=\"input2\" label=\"Textarea field with a predefined value\" value=\"initial value\"></lightning-textarea>\n        <lightning-textarea name=\"input3\" label=\"Textarea field with a placeholder\" placeholder=\"type here...\"></lightning-textarea>\n    </div>\n\n    <div class=\"row\">\n        <h2 class=\"header\">Advanced Examples</h2>\n        <lightning-textarea name=\"input4\" readonly value=\"initial value\" label=\"Read-only textarea field\" ></lightning-textarea>\n        <lightning-textarea name=\"input5\" disabled value=\"initial value\" label=\"Disabled textarea field\" ></lightning-textarea>\n        <lightning-textarea name=\"input6\" required value=\"initial value\" label=\"Required textarea field with a maximum length of 60 characters\" maxlength=\"60\" ></lightning-textarea>\n        <lightning-textarea name=\"input7\" required value=\"\" placeholder=\"compose your tweet\" label=\"Required textarea field with a maximum length of 140 characters\" maxlength=\"140\" message-when-too-long=\"A maximum of 140 characters are allowed in a tweet.\" message-when-value-missing=\"An empty tweet cannot be posted.\" ></lightning-textarea>\n    </div>\n\n    <div class=\"row\">\n        <h2 class=\"header\">Textarea with aria-describedby example</h2>\n        <div class=\"aria-describedby slds-box slds-m-around__large\">\n            <h3>Example of textarea aria-describedby with multiple descriptions rendered before textarea in reverse order</h3>\n            <span class=\"desc-1\" id=\"desc-1\">Description One</span>\n            <span class=\"desc-2\" id=\"desc-2\">Description Two</span>\n            <lightning-textarea label=\"Enter some text\" aria-describedby=\"desc-2 desc-1\"></lightning-textarea>\n        </div>\n        <h2 class=\"header\">Textarea with aria-labelledby example</h2>\n        <div class=\"aria-describedby-later slds-box slds-m-around__large\">\n            <h3>Example of textarea aria-labelledby with multiple descriptions rendered after textarea in reverse order</h3>\n            <lightning-textarea label=\"Enter some text\" aria-labelledby=\"desc-4 desc-3\"></lightning-textarea>\n            <span class=\"desc-3\" id=\"desc-3\">Description Three</span>\n            <span class=\"desc-4\" id=\"desc-4\">Description Four</span>\n        </div>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-tile",
    "shortDescription": "This component is a versatile and customizable tile that groups related information, which can be paired with an icon or avatar, providing an interactive and visually appealing way to present data to the user.",
    "relatedComponents": {
      "lightning-icon": "optional",
      "lightning-avatar": "optional"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": [
          "<lightning-tile label='Lightning component team'>",
          "<lightning-tile label='Salesforce UX'>",
          "<lightning-tile label='Astro'>"
        ]
      },
      {
        "name": "href",
        "typeSignature": "string",
        "examples": ["<lightning-tile href='/path/to/somewhere'>", "<lightning-tile href='/path/to/my-open-cases'>"]
      },
      {
        "name": "type",
        "typeSignature": "string",
        "examples": ["<lightning-tile type='media'>"]
      },
      {
        "name": "actions",
        "typeSignature": "object[]",
        "examples": ["<lightning-tile actions={actions}>"]
      },
      {
        "name": "onactiontriggered",
        "typeSignature": "(ev: CustomEvent & { detail: { action: object } }) => void",
        "examples": ["<lightning-tile onactiontriggered={handleAction}>"]
      }
    ],
    "useCases": [
      "Imagine you're browsing a company's website and you see a section with a list of team members. Each team member's name, photo, and a brief description of their role is grouped together in a small box. This is a scenario where the <lightning-tile> component might be used, with each box being a separate tile.",
      "You're on a music streaming website and you see a list of songs. Each song is displayed in a small box with the song title, album cover, and artist name. This is another scenario where the <lightning-tile> component might be used, with each box being a separate tile.",
      "You're on a real estate website looking at listings. Each property is displayed in a small box with a photo of the property, the price, and a brief description. This is a scenario where the <lightning-tile> component might be used, with each box being a separate tile."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Tile\n      description: Tiles can use various layouts.\n    - name: withIcon\n      label: Tile With Icon\n      description: A tile can include an icon passed in the media slot.\n    - name: withAvatar\n      label: Tile With Avatar\n      description: A tile can include an avatar passed in the media slot.\n    - name: list\n      label: Tiles in a List\n      description: Tiles can be nested in list items. Apply styles to the list and each item to create dividers.\n---\n\nA `lightning-tile` component groups related information associated with a\nrecord. The information can be actionable and paired with a figure, such as a\n`lightning-icon` or `lightning-avatar` component.\n\nUse the `class` attributes to customize the styling. To style the tile\nbody, use the Lightning Design System utility classes.\n\nThis component inherits styling from\n[tiles](https://www.lightningdesignsystem.com/components/tiles/) in the\nLightning Design System.\n\nHere is an example.\n\n```html\n<template>\n    <lightning-tile label=\"Lightning component team\" href=\"/path/to/somewhere\">\n        <p class=\"slds-truncate\" title=\"7 Members\">7 Members</p>\n    </lightning-tile>\n</template>\n```\n\nTo insert an icon or avatar, pass it into the `media` slot. You can\ncreate a tile with an icon using definition lists. This example aligns an icon\nand some text using utility classes like `slds-dl_horizontal`.\n\n```html\n<template>\n    <lightning-tile label=\"Salesforce UX\" href=\"/path/to/somewhere\">\n        <span slot=\"media\">\n            <lightning-icon\n                icon-name=\"standard:groups\"\n                alternative-text=\"Groups\"\n            >\n            </lightning-icon>\n        </span>\n        <dl class=\"slds-dl_horizontal\">\n            <dt class=\"slds-dl_horizontal__label\">\n                <p class=\"slds-truncate\" title=\"Company\">Company:</p>\n            </dt>\n            <dd class=\"slds-dl_horizontal__detail slds-tile__meta\">\n                <p class=\"slds-truncate\" title=\"Salesforce\">Salesforce</p>\n            </dd>\n            <dt class=\"slds-dl_horizontal__label\">\n                <p class=\"slds-truncate\" title=\"Email\">Email:</p>\n            </dt>\n            <dd class=\"slds-dl_horizontal__detail slds-tile__meta\">\n                <p class=\"slds-truncate\" title=\"salesforce-ux@salesforce.com\">\n                    salesforce-ux@salesforce.com\n                </p>\n            </dd>\n        </dl>\n    </lightning-tile>\n</template>\n```\n\nYou can also create a list of tiles with avatars using an unordered list.\nThis example places tiles in a list and creates dividers using utility classes\nlike `slds-has-dividers_bottom-space`.\n\n```html\n<template>\n    <ul class=\"slds-has-dividers_bottom-space\">\n        <li class=\"slds-item\">\n            <lightning-tile\n                type=\"media\"\n                label=\"Astro\"\n                href=\"/path/to/somewhere\"\n            >\n                <span slot=\"media\">\n                    <lightning-avatar\n                        src=\"/path/to/img\"\n                        alternative-text=\"Astro\"\n                        fallback-icon-name=\"standard:person_account\"\n                    >\n                    </lightning-avatar>\n                </span>\n                <ul class=\"slds-list_horizontal slds-has-dividers_right\">\n                    <li class=\"slds-item\">Trailblazer, Salesforce</li>\n                    <li class=\"slds-item\">Trailhead Explorer</li>\n                </ul>\n            </lightning-tile>\n        </li>\n        <!-- More list items here -->\n    </ul>\n</template>\n```\n\nYou can add a dropdown menu with actions to a tile. To find out which sections are active, use the `actiontriggered` event.\n\n```html\n<template>\n    <lightning-tile\n        label=\"My Open Cases\"\n        href=\"/path/to/my-open-cases\"\n        actions={actions}\n        onactiontriggered={handleAction}\n    >\n        <p class=\"slds-truncate\" title=\"10 Cases\">10 Cases</p>\n    </lightning-tile>\n</template>\n```\n\nUse the `detail` property to return the action that was triggered.\n\n```javascript\nimport { LightningElement, track } from 'lwc';\n\nexport default class DemoTileAction extends LightningElement {\n    @track actions = [\n        { label: 'Edit', value: 'edit', iconName: 'utility:edit' },\n        { label: 'Delete', value: 'delete', iconName: 'utility:delete' },\n    ];\n\n    handleAction(event) {\n        // Get the value of the selected action\n        const tileAction = event.detail.action.value;\n    }\n}\n```\n\n#### Design Guidelines\n\nA tile requires a label and can include a supporting icon or avatar, and additional elements. You interact with elements within the tile, such as buttons and links, not the tile as a whole. Data is presented as label­-value pairs. The user interacts with elements within the tile, such as buttons and links, not the tile as a whole.\n\nUse tiles when you are horizontally constrained for space. Tiles are appropriate for short lists, using a `<ul>` or `<dl>` for example, that are fewer than 10 items. Tile layouts do not stretch well, so to use available horizontal space, add a column of tiles. On wider screens where more than 2 columns of tiles will appear, tile lists should elegantly and responsively expand into tables.\n\n#### Usage Considerations\n\nIcons are not available in Lightning Out, but they are available in Lightning Components for Visualforce and other experiences.\n\nThis component has usage differences from its Aura counterpart. See [Base Components: Aura Vs Lightning Web Components](https://developer.salesforce.com/docs/platform/lwc/guide/migrate-map-aura-lwc-components) in the Lightning Web Components Developer Guide.\n\n#### Custom Events\n\n**`actiontriggered`**\n\nThe event fired when an action on the dropdown menu is triggered.\n\nThe `actiontriggered` event returns the following parameter.\n\n| Parameter | Type   | Description          |\n| --------- | ------ | -------------------- |\n| action    | object | The selected action. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                               |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                            |\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TileBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A basic tile component.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-tile label=\"Lightning component team\" href=\"/path/to/somewhere\">\n                <p class=\"slds-truncate\" title=\"7 Members\">7 Members</p>\n            </lightning-tile>\n        </div>\n    </div>\n\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A tile component with a more complex layout.\n        </h2>\n\n        <!-- More complex content -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-tile label=\"Salesforce UX\" href=\"/path/to/somewhere\">\n                <dl class=\"slds-dl_horizontal\">\n                    <dt class=\"slds-dl_horizontal__label\">\n                        <p class=\"slds-truncate\" title=\"Company\">Company:</p>\n                    </dt>\n                    <dd class=\"slds-dl_horizontal__detail slds-tile__meta\">\n                        <p class=\"slds-truncate\" title=\"Salesforce\">Salesforce</p>\n                    </dd>\n                    <dt class=\"slds-dl_horizontal__label\">\n                        <p class=\"slds-truncate\" title=\"Email\">Email:</p>\n                    </dt>\n                    <dd class=\"slds-dl_horizontal__detail slds-tile__meta\">\n                        <p class=\"slds-truncate\" title=\"salesforce-ux@salesforce.com\">salesforce-ux@salesforce.com</p>\n                    </dd>\n                </dl>\n            </lightning-tile>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TileList extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A list of tile components with dividers.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <ul class=\"slds-has-dividers_bottom-space\">\n                <li class=\"slds-item\">\n                    <lightning-tile label=\"Lightning component team\" href=\"/path/to/somewhere\">\n                        <p class=\"slds-truncate\" title=\"7 Members\">7 Members</p>\n                    </lightning-tile>\n                </li>\n                <li class=\"slds-item\">\n                    <lightning-tile label=\"Salesforce UX\" href=\"/path/to/somewhere\">\n                        <dl class=\"slds-dl_horizontal\">\n                            <dt class=\"slds-dl_horizontal__label\">\n                                <p class=\"slds-truncate\" title=\"Company\">Company:</p>\n                            </dt>\n                            <dd class=\"slds-dl_horizontal__detail slds-tile__meta\">\n                                <p class=\"slds-truncate\" title=\"Salesforce\">Salesforce</p>\n                            </dd>\n                            <dt class=\"slds-dl_horizontal__label\">\n                                <p class=\"slds-truncate\" title=\"Email\">Email:</p>\n                            </dt>\n                            <dd class=\"slds-dl_horizontal__detail slds-tile__meta\">\n                                <p class=\"slds-truncate\" title=\"salesforce-ux@salesforce.com\">salesforce-ux@salesforce.com</p>\n                            </dd>\n                        </dl>\n                    </lightning-tile>\n                </li>\n                <li class=\"slds-item\">\n                    <lightning-tile label=\"Bruce Wayne\" href=\"/bruce.html\" type=\"media\">\n                        <lightning-avatar slot=\"media\" src=\"https://www.lightningdesignsystem.com/assets/images/avatar1.jpg\" fallback-icon-name=\"standard:person_account\" alternative-text=\"Bruce Wayne\"></lightning-avatar>\n                        <ul class=\"slds-list_horizontal slds-has-dividers_right\">\n                            <li class=\"slds-item\">Billionaire, Gotham City</li>\n                            <li class=\"slds-item\">Dark Knight</li>\n                        </ul>\n                    </lightning-tile>\n                </li>\n                <li class=\"slds-item\">\n                    <lightning-tile label=\"Clark Kent\" href=\"/clark.html\" type=\"media\">\n                        <lightning-avatar slot=\"media\" src=\"https://www.lightningdesignsystem.com/assets/images/avatar1.jpg\" fallback-icon-name=\"standard:person_account\" alternative-text=\"Clark Kent\"></lightning-avatar>\n                        <ul class=\"slds-list_horizontal slds-has-dividers_right\">\n                            <li class=\"slds-item\">Reporter, Daily Planet</li>\n                            <li class=\"slds-item\">Man of Steel</li>\n                        </ul>\n                    </lightning-tile>\n                </li>\n                <li class=\"slds-item\">\n                    <lightning-tile label=\"Diana Prince\" href=\"/diana.html\" type=\"media\">\n                        <lightning-avatar slot=\"media\" src=\"https://www.lightningdesignsystem.com/assets/images/avatar2.jpg\" fallback-icon-name=\"standard:person_account\" alternative-text=\"Diana Prince\"></lightning-avatar>\n                        <ul class=\"slds-list_horizontal slds-has-dividers_right\">\n                            <li class=\"slds-item\">Honorary Ambassador, United Nations</li>\n                            <li class=\"slds-item\">The Amazon Princess</li>\n                        </ul>\n                    </lightning-tile>\n                </li>\n            </ul>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TileWithAvatar extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A tile component with an avatar.\n        </h2>\n\n        <!-- With an avatar -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-tile label=\"Bruce Wayne\" href=\"/bruce.html\" type=\"media\">\n                <lightning-avatar slot=\"media\" src=\"https://www.lightningdesignsystem.com/assets/images/avatar1.jpg\" fallback-icon-name=\"standard:person_account\" alternative-text=\"Bruce Wayne\"></lightning-avatar>\n                <ul class=\"slds-list_horizontal slds-has-dividers_right\">\n                    <li class=\"slds-item\">Billionaire, Gotham City</li>\n                    <li class=\"slds-item\">Dark Knight</li>\n                </ul>\n            </lightning-tile>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TileWithIcon extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            A tile component with an icon.\n        </h2>\n\n        <!-- With an icon -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-tile label=\"Lightning component team\" type=\"media\">\n                <lightning-icon slot=\"media\" icon-name=\"standard:groups\"></lightning-icon>\n                <p class=\"slds-truncate\" title=\"7 Members\">7 Members</p>\n            </lightning-tile>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-toast",
    "shortDescription": "This component displays a toast notification with an icon, label, message, and links, providing users with brief, pertinent information and feedback after they perform an action.",
    "relatedComponents": {
      "lightning-toast-container": "required",
      "lightning-formatted-rich-text": "optional"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": [
          "<lightning-toast label='This is a toast label which shows {0}, you can learn more about its accessibility from {1}'>"
        ]
      },
      {
        "name": "labelLinks",
        "typeSignature": "Array<{url: string, label: string}> | { [key: string]: {url: string, label: string} }",
        "examples": [
          "<lightning-toast labelLinks=[{url: 'https://www.lightningdesignsystem.com/components/toast/', label: 'LDS link'}]>",
          "<lightning-toast labelLinks={myLabelLinks}>"
        ]
      },
      {
        "name": "message",
        "typeSignature": "string",
        "examples": [
          "<lightning-toast message='I want to show a {salesforceLink} and a {slackLink}'>",
          "<lightning-toast message={myMessage}>"
        ]
      },
      {
        "name": "messageLinks",
        "typeSignature": "Array<{url: string, label: string}> | { [key: string]: {url: string, label: string} }",
        "examples": [
          "<lightning-toast messageLinks=[{url: 'http://www.salesforce.com', label: 'Salesforce link'}]>",
          "<lightning-toast messageLinks={myMessageLinks}>"
        ]
      },
      {
        "name": "variant",
        "typeSignature": "'info' | 'success' | 'warning' | 'error'",
        "examples": [
          "<lightning-toast variant='info'>",
          "<lightning-toast variant='success'>",
          "<lightning-toast variant='error'>"
        ]
      },
      {
        "name": "mode",
        "typeSignature": "'dismissible' | 'sticky'",
        "examples": ["<lightning-toast mode='dismissible'>", "<lightning-toast mode='sticky'>"]
      }
    ],
    "useCases": [
      "Imagine you're using a web application to manage your personal finances. You've just finished categorizing your expenses for the month and click 'Save'. A small, green <lightning-toast> notification pops up at the top of the screen, confirming that your changes have been saved successfully.",
      "You're using a social media platform and decide to update your profile picture. After you upload the new photo and click 'Update', a <lightning-toast> notification appears at the top of the screen. It's a small, blue box that tells you your profile picture has been updated successfully.",
      "You're shopping online and add an item to your cart. As soon as you click 'Add to Cart', a small, grey <lightning-toast> notification appears at the top of the screen. It confirms that the item has been added to your cart and provides a link for you to view your cart and proceed to checkout.",
      "You're using a project management tool and just completed a task. You click 'Mark as Complete', and a small, green <lightning-toast> notification pops up at the top of the screen. It confirms that the task has been marked as complete and provides a link for you to view the updated project timeline.",
      "You're using a web application to book a flight. After you enter your travel details and click 'Search', a small, blue <lightning-toast> notification appears at the top of the screen. It tells you that your search is being processed and provides a link for you to view your search results once they're ready.",
      "You're using a web application to submit a support ticket. After you fill out the form and click 'Submit', a small, grey <lightning-toast> notification pops up at the top of the screen. It confirms that your ticket has been submitted and provides a link for you to view the status of your ticket."
    ],
    "docs": "The `lightning/toast` module displays a toast notification with an icon, label, message, and links. Use a toast notification to convey small pieces of information to the user, such as providing feedback and confirmation after the user takes an action. You can set toast notifications to disappear after a certain duration or until the user clicks the close button.\n\n### Show a Toast\n\nTo show a toast notification, call the function `show(config, comp)` from `lightning/toast` and provide a toast config and a reference to the local component as parameters. The function creates a single page-level toast container if one does not exist. See the `config` attributes section below for a list of properties to include in the config.\n\n```javascript\nimport { LightningElement } from 'lwc';\nimport Toast from 'lightning/toast';\n\nexport default class MyComponent extends LightningElement {\n    ...\n    onClick() {\n        ...\n        Toast.show({\n            label: 'This is a toast label which shows {0}, you can learn more about its accessibility from {1}',\n            labelLinks : [{\n                url: 'https://www.lightningdesignsystem.com/components/toast/',\n                label: 'LDS link'\n            }, {\n                url: 'https://www.lightningdesignsystem.com/accessibility/guidelines/global-focus/#toasts',\n                label: 'toast guideline'\n            }],\n            message: 'I want to show a {salesforceLink} and a {slackLink}',\n            messageLinks: {\n                salesforceLink: {\n                    url: 'http://www.salesforce.com',\n                    label: 'Salesforce link'\n                },\n                slackLink: {\n                    url: 'https://slack.com',\n                    label: 'Slack link'\n                }\n            },\n            mode: 'sticky',\n            variant: 'info'\n        }, this);\n    }\n}\n```\n\nIn this example, the toast configuration uses two ways to specify links (see note below). The toast displays a sticky mode informational toast message with a `label` string as the toast title and a `message` string as the toast message.  The `{0}`, `{1}`, `{salesforceLink}`, and `{slackLink}` placeholders are replaced with their `url` specified links.\n\nA page-level [`ToastContainer` component](/docs/component-library/bundle/lightning-toast-container/documentation) manages and displays the toast component.\n\n**_NOTE:_** `label` can have index-based or name-based link placeholders. In the case of index-based link placeholders, `labelLinks` must be defined as an array. Otherwise, `labelLinks` must be defined as individual objects. The same rules apply to `message`.\n\n### Component Styling\n\n`Toast` implements the [toast](https://www.lightningdesignsystem.com/components/toast/) blueprint in the Salesforce Lightning Design System (SLDS). [SLDS styling hooks](https://www.lightningdesignsystem.com/components/toast/#Styling-Hooks-Overview) aren't supported with programmatic creation of toasts via `Toast.show()`.\n\n#### Small screen / Mobile environment\n\n`Toast` is responsive to your screen resolution. For smaller screens or mobile environments, the toast's **icon** and **description** (text stored in `message`, and `messageLinks`, for example) is **not shown** due to the screen's width limitation (see [Toast blueprint screen variants](https://www.lightningdesignsystem.com/guidelines/messaging/components/toasts/#flavor-variants-screen).\n\nOn small screens and mobile environments, we recommend that you provide links in the toast's title using `label` and `labelLinks` in order to have links visible and interactive.\n\n### `config` attributes\n\n Attribute | Description  |\n|----------| ------------ |\n| `label` (required) | Title of the toast. `label` can contain link placeholders in the form of `{0} ... {N}` (index-based) or `{name} ... {someOtherName}` (name-based). The placeholders are replaced with the links in `labelLinks`. |\n| `labelLinks` | `[{url, label}]`, which replaces the `{0} ... {N}` index-based placeholders in `label` or `{ name: {url, label} }`, which replaces the `{name} ... {someOtherName}` named placeholders in `label`. |\n| `message` | Description of the toast. `message` can contain link placeholders in the form of `{0} ... {N}` (index-based) or `{name} ... {someOtherName}` (name-based). The placeholders are replaced with the links on `messageLinks`. |\n| `messageLinks` | `[{url, label}]`, which replaces the `{0} ... {N}` index-based placeholders in `message` or `{ name: {url, label} }`, which replaces the `{name} ... {someOtherName}` named placeholders in `message`. |\n| `variant` | Appearance of the toast. |\n| `mode` | Persistence of the toast. |\n\n**_NOTE:_**  When `labelLinks` (or `messageLinks`) is passed to the `config` parameter, the content of `label` (or `message`) is rendered using [`lightning-formatted-rich-text`](https://developer.salesforce.com/docs/component-library/bundle/lightning-formatted-rich-text/documentation). Consult the documentation for expected styling when rendering a link.\n\n#### `variant` attribute\n\nThe `variant` attribute sets the component's color and icon.\n\n| Value | Color | Icon |\n| --- | --- | --- |\n| `info` (default) | grey | `utility:info`|\n| `success` | green | `utility:success`|\n| `warning` | orange | `utility:warning`|\n| `error` | red | `utility:error`|\n\n#### `mode` attribute\n\nThe `mode` attribute sets the component's dismissal.\n-   `dismissible` - The component automatically disappears after a certain duration. The user can dismiss it early by clicking the close button. The time duration for `dismissible` is 4.8 seconds when the toast doesn't contain a link or 9.6 seconds if the toast contains a link.\n-   `sticky` - The component stays on screen until the user clicks the close button.\n\nIf a `mode` value isn't provided, the default `mode` is determined by the value of `variant` and whether the `toast` has a link or links present in `label` or `message`.\n\n| Variant | Has link? | Default Mode |\n| --- | --- | --- |\n| `info` | Yes| `sticky`|\n| `info` | No | `sticky`|\n| `success` | Yes | `sticky`|\n| `success` | No | `dismissible`|\n| `warning` | Yes | `sticky`|\n| `warning` | No | `sticky`|\n| `error` | Yes | `sticky`|\n| `error` | No | `sticky`|\n",
    "examples": []
  },
  {
    "tagName": "lightning-toast-container",
    "shortDescription": "This component manages and displays a list of toast notifications on a webpage, providing the user with an interactive experience where they can navigate between notifications using keyboard shortcuts.",
    "relatedComponents": {
      "lightning-toast": "required"
    },
    "publicApi": [
      {
        "name": "max-toasts",
        "typeSignature": "number",
        "examples": ["<lightning-toast-container max-toasts=5>"]
      },
      {
        "name": "toast-position",
        "typeSignature": "string",
        "examples": [
          "<lightning-toast-container toast-position='top-right'>",
          "<lightning-toast-container toast-position={toastPos}>"
        ]
      },
      {
        "name": "container-position",
        "typeSignature": "string",
        "examples": [
          "<lightning-toast-container container-position='fixed'>",
          "<lightning-toast-container container-position='absolute'>",
          "<lightning-toast-container container-position={containerPos}>"
        ]
      }
    ],
    "useCases": [
      "Imagine you're browsing an online store and you add a few items to your shopping cart. As you do this, a small message pops up at the top of the screen, confirming that each item has been added to your cart. This is a scenario where the <lightning-toast-container> component might be used to manage these confirmation messages.",
      "Consider a scenario where you're using a web application to manage your personal finances. As you input various transactions, small messages appear at the top of the screen to confirm that each transaction has been recorded. These messages are managed by the <lightning-toast-container> component.",
      "Suppose you're using a social media platform and you receive several notifications about new messages, friend requests, and comments on your posts. Each of these notifications appears as a small message at the top of your screen, and they're managed by the <lightning-toast-container> component.",
      "Imagine you're using an online learning platform and you complete a lesson or a quiz. A small message pops up at the top of the screen to confirm that you've completed the lesson or quiz and to give you some feedback. This is another scenario where the <lightning-toast-container> component might be used.",
      "Consider a scenario where you're using a project management tool and you complete a task or update a project status. As you do this, small messages appear at the top of the screen to confirm that your changes have been saved. These messages are managed by the <lightning-toast-container> component.",
      "Suppose you're using a customer relationship management (CRM) system and you update a customer's details or add a new customer to the system. Each time you do this, a small message appears at the top of the screen to confirm that the customer's details have been updated or that the new customer has been added. These messages are managed by the <lightning-toast-container> component."
    ],
    "docs": "Use the `lightning/toastContainer` module to manage a list of toast components and their order. Each site page supports a single toast container. You can create toast notifications with [lightning/toast](/docs/component-library/bundle/lightning-toast/documentation) and manage them using `lightning/toastContainer`.\n\nThis module is available only for LWR Sites for Experience Cloud. For more information, see [Create Components for LWR Sites](https://developer.salesforce.com/docs/atlas.en-us.exp_cloud_lwr.meta/exp_cloud_lwr/get_started_components.htm).\n\nThis example creates a basic toast container component that handles and displays all the page-level toast messages.\n\n```javascript\nconst toastContainer = ToastContainer.instance();\n```\n\n#### Customization\n\nBy default, the toast container shows a maximum of 3 toast notifications at the same time. Set the `maxToasts` attribute to change the maximum number of toasts shown at a time.\n\nToast components display at the top center of the container by default. The most recent toast displays at the top of the container, and the oldest toast notification displays at the bottom. Change the toasts' position in the container with the `toastPosition` attribute.\n\nThe container position is fixed to the viewport. Adjust the position of the container relative to its parent element with the `containerPosition` attribute. This attribute has two values. \n- `fixed` - positions the container relative to the initial containing block established by the viewport.\n- `absolute` - positions the container relative to a positioned parent element.\n\nThis example creates a page-level toast container in the top-right in the viewport that shows a maximum of 5 toast messages at one time.\n```javascript\n// c/myApp.js\nimport { LightningElement } from 'lwc';\nimport ToastContainer from 'lightning/toastContainer';\n\nexport default class MyApp extends LightningElement {\n    connectedCallback() {\n        const toastContainer = ToastContainer.instance();\n        toastContainer.maxShown = 5;\n        toastContainer.toastPosition = 'top-right';\n    }\n}\n```\n\n#### Accessibility\n\nToast container follows the SLDS [Global Focus Orchestration](https://www.lightningdesignsystem.com/accessibility/guidelines/global-focus/#global-orchestration) accessibility guidelines, which allow users to use the keyboard shortcut to navigate between toasts.\n- Press `Control` + `F6` or `Command` + `F6` for Mac OS to move focus to next toast, if any.\n- Press `Shift` + `Control` + `F6` or `Shift` + `Command` + `F6` for Mac OS to move focus to the previous toast, if any.\n",
    "examples": []
  },
  {
    "tagName": "lightning-tree",
    "shortDescription": "This component is a visual representation of a structural hierarchy, such as a website sitemap or an organizational role hierarchy, that allows users to navigate through nested items, which can be expanded or collapsed, and provides an interactive user experience with the ability to select items, add or remove items, and programmatically control item selection and branch expansion.",
    "relatedComponents": {
      "lightning-button": "optional",
      "lightning-breadcrumbs": "optional"
    },
    "publicApi": [
      {
        "name": "items",
        "typeSignature": "object[]",
        "examples": ["<lightning-tree items={treeList}>"]
      },
      {
        "name": "onselect",
        "typeSignature": "(ev: CustomEvent & { detail: { name: string } }) => void",
        "examples": ["<lightning-tree onselect={handleSelect}>"]
      },
      {
        "name": "selected-item",
        "typeSignature": "string",
        "examples": ["<lightning-tree selected-item={selected}>"]
      }
    ],
    "useCases": [
      "Imagine you're a sales manager for a large company with a complex sales team structure. You want to visualize your team's hierarchy, from the sales directors down to the individual sales representatives. The <lightning-tree> component can be used to create a visual representation of this hierarchy, with each level of the team represented as a branch in the tree. You can expand and collapse these branches to view or hide the team members at each level.",
      "You're a website administrator and you want to create a sitemap for your website. The <lightning-tree> component can be used to create a visual sitemap, with each page on your website represented as a branch in the tree. You can expand and collapse these branches to view or hide the subpages under each main page. The component can also include hyperlinks to each page, allowing users to navigate your website directly from the sitemap.",
      "You're a project manager and you want to create a visual representation of a project's task hierarchy. The <lightning-tree> component can be used to create a visual task hierarchy, with each task and its subtasks represented as a branch in the tree. You can expand and collapse these branches to view or hide the subtasks under each main task. The component can also include additional information about each task, such as its status or due date, as metatext under each task label."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Tree\n      description: A simple tree with several levels that you can expand and collapse.\n    - name: metatext\n      label: Nested Tree With Metatext\n      description: Metatext adds text below the item label.\n    - name: deeplyNested\n      label: Deeply Nested Tree\n      description: A tree can have muliple levels of nested branches.\n    - name: onselect\n      label: Tree With onselect Handler\n      description: Use the onselect event handler to retrieve the selected item in the tree.\n    - name: links\n      label: Tree With Links\n      description: Trees can be used for navigation by providing href attributes with the items.\n---\n\nA `lightning-tree` component displays visualization of a structural hierarchy,\nsuch as a sitemap for a website or a role hierarchy in an organization. Items\nare displayed as hyperlinks and items in the hierarchy can be nested. Items\nwith nested items are also known as branches.\n\nThis component inherits styling from\n[trees](https://www.lightningdesignsystem.com/components/trees/) in the\nLightning Design System.\n\nTo create a tree, pass in an array of key-value pairs to the `items`\nattribute.\n\n| Key      | Type    | Description                                                                                                                            |\n| -------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n| label    | string  | Required. The title and label for the hyperlink.                                                                                       |\n| metatext | string  | Text to provide users with supplemental information and aid with identification or disambiguation.                                     |\n| items    | object  | Nested items as an array of key-value pairs.                                                                                           |\n| name     | string  | The unique name for the item for the `onselect` event handler to return the tree item that was clicked.                                |\n| href     | string  | The URL for the link.                                                                                                                  |\n| expanded | boolean | Specifies whether a branch is expanded. An expanded branch displays its nested items visually. The default is false.                   |\n| disabled | boolean | Specifies whether an item is disabled. A disabled item is grayed out and can't be focused or perform any action. The default is false. |\n\nHere's an example of a tree with more than one level of nesting. To retrieve the selected item Id, use the `onselect` event handler. The `select` event is also fired when you select an item with an `href` value.\n\n```html\n<template>\n    <lightning-tree items={treeList} onselect={handleSelect}>\n    </lightning-tree>\n</template>\n```\n\nDefine the tree items in your JavaScript file. Use the `detail` property to retrieve the name of the selected tree item.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nconst items = [\n    {\n        label: 'Western Sales Director',\n        name: '1',\n        expanded: true,\n        items: [\n            {\n                label: 'Western Sales Manager',\n                name: '2',\n                expanded: true,\n                items: [\n                    {\n                        label: 'CA Sales Rep',\n                        name: '3',\n                        expanded: true,\n                        items: [],\n                    },\n                    {\n                        label: 'OR Sales Rep',\n                        name: '4',\n                        expanded: true,\n                        items: [],\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        label: 'Eastern Sales Director',\n        name: '5',\n        expanded: false,\n        items: [\n            {\n                label: 'Eastern Sales Manager',\n                name: '6',\n                expanded: true,\n                items: [\n                    {\n                        label: 'NY Sales Rep',\n                        name: '7',\n                        expanded: true,\n                        items: [],\n                    },\n                    {\n                        label: 'MA Sales Rep',\n                        name: '8',\n                        expanded: true,\n                        items: [],\n                    },\n                ],\n            },\n        ],\n    },\n];\n\nconst mapping = {\n    1: 'Western Sales Director',\n    2: 'Western Sales Manager',\n    3: 'CA Sales Rep',\n    4: 'OR Sales Rep',\n    5: 'Eastern Sales Director',\n    6: 'Eastern Sales Manager',\n    7: 'NY Sales Rep',\n    8: 'MA Sales Rep',\n};\n\nexport default class TreeExample extends LightningElement {\n    treeList = items;\n    selected = '';\n\n    handleSelect(event) {\n        //set the name of selected tree item\n        this.selected = mapping[event.detail.name];\n    }\n}\n```\n\n#### Adding and Removing Items in a Tree\n\nYou can add or remove items in a tree. Let's say you have a tree that looks\nlike this, with a button to add a nested item to the tree.\n\n```html\n<template>\n    <lightning-button\n        label=\"Add to Tree\"\n        id=\"change-button\"\n        onclick={handleClick}\n    >\n    </lightning-button>\n    <lightning-tree items={treeList}> </lightning-tree>\n</template>\n```\n\nDefine the items in your JavaScript code.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nconst items = [\n    {\n        label: 'Go to Record 1',\n        href: '#record1',\n        items: [],\n        expanded: true,\n    },\n    {\n        label: 'Go to Record 2',\n        href: '#record2',\n        items: [],\n        expanded: true,\n    },\n    {\n        label: 'Go to Record 3',\n        href: '#record3',\n        items: [],\n        expanded: true,\n    },\n];\n\nexport default class AddRemoveExample extends LightningElement {\n    treeList = items;\n}\n```\n\nThis example `handleClick()` function adds a nested item at the end of the tree when the button is clicked.\n\n```javascript\nexport default class AddRemoveExample extends LightningElement {\n    treeList = items;\n\n    handleClick(e) {\n        const newItems = Array.from(this.treeList);\n        const branch = newItems.length;\n        const label = 'New item added at Record' + branch;\n        const newItem = {\n            label: label,\n            expanded: true,\n            disabled: false,\n            items: [],\n        };\n        newItems[branch - 1].items.push(newItem);\n        this.treeList = newItems;\n    }\n}\n```\n\nWhen providing an `href` value to an item, the `onselect` event handler is\ntriggered before navigating to the hyperlink.\n\n#### Selecting a Tree Item Programmatically\n\nTo select a tree item using JavaScript, pass in the tree item name using `selected-item`.\n\nThis example selects the **United States Sales** tree item on load. Press the **Change Selected** button to select the **Americas** tree item.\n\n```html\n<template>\n    <lightning-tree\n        items={treeList}\n        selected-item={selected}\n    ></lightning-tree>\n    <lightning-button\n        label=\"Change Selected\"\n        onclick={handleClick}\n    ></lightning-button>\n</template>\n```\n\nDefine the items in your JavaScript code and pass in the selected item name.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nconst items = [\n    {\n        label: 'Asia Pacific Sales',\n        name: 'Asia Pacific Sales',\n        items: [\n            {\n                label: 'Asia Sales',\n                name: 'Asia Sales',\n                items: [],\n            },\n        ],\n    },\n    {\n        label: 'Europe Sales',\n        name: 'Europe Sales',\n        items: [\n            {\n                label: 'UK Sales',\n                name: 'UK Sales',\n                items: [],\n            },\n            {\n                label: 'EU Sales',\n                name: 'EU Sales',\n                items: [],\n            },\n        ],\n    },\n    {\n        label: 'Americas',\n        name: 'Americas',\n        items: [\n            {\n                label: 'Northern America Sales',\n                name: 'Northern America Sales',\n                items: [\n                    {\n                        label: 'United States Sales',\n                        name: 'United States Sales',\n                        items: [],\n                    },\n                ],\n            },\n        ],\n    },\n];\n\nexport default class SelectItemExample extends LightningElement {\n    treeList = items;\n    selected = 'United States Sales';\n\n    handleClick() {\n        this.selected = 'Americas';\n    }\n}\n```\n\n#### Expanding and Collapsing A Branch\n\nTo expand and collapse a branch programmatically, get the tree items and update its `expanded` property.\n\n```javascript\n// expand the first branch\nthis.template.querySelector('lightning-tree').items[0].expanded = true;\n\n// collapse the first branch\nthis.template.querySelector('lightning-tree').items[0].expanded = false;\n```\n\n#### Design Guidelines\n\nUse `lightning-tree` if your app has layered navigation that can’t be represented in a simple tab set. A tree helps users navigate to pages and quickly find a nested child page without loading each page.\n\nYou can use `lightning-tree` with `lightning-breadcrumbs` to further help users navigate the hierarchy.\n\nTrees can have unlimited nesting, but we recommend flatter trees as they are generally easier to navigate.\n\nNot all items in the list need a corresponding page. Instead, you can group related pages together using a label header without providing an unnecessary landing page.\n\n#### Accessibility\n\nYou can use the keyboard to navigate the tree. Tab into the tree and use the\nUp and Down Arrow key to focus on tree items. To collapse an expanded branch,\npress the Left Arrow key. To expand a branch, press the Right Arrow key.\nPressing the Enter key or Space Bar is similar to an onclick event, and\nperforms the default action on the item.\n\n#### Custom Events\n\n**`select`**\n\nThe event fired when a tree item is selected and before navigating to a given hyperlink.\n\nThe `select` event returns the following parameter.\n\n| Parameter | Type   | Description                          |\n| --------- | ------ | ------------------------------------ |\n| name      | string | The label of the selected tree item. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                |\n| ---------- | ----- | -------------------------------------------------------------------------- |\n| bubbles    | true  | This event bubbles up through the DOM.                                     |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event. |\n| composed   | true  | This event propagates outside of the component in which it was dispatched. |\n\n#### LWC Recipes\n\nThe [LWC Recipes GitHub repository](https://github.com/trailheadapps/lwc-recipes) contains code examples for Lightning Web Components that you can test in an org.\n\nFor a recipe that uses `lightning-tree`, see the `c-wire-get-picklist-values-by-record-type` component in the LWC Recipes repo.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TreeBasic extends LightningElement {\n    items = [\n        {\n            label: 'Western Sales Director',\n            name: '1',\n            expanded: true,\n            items: [\n                {\n                    label: 'Western Sales Manager',\n                    name: '2',\n                    expanded: true,\n                    items: [\n                        {\n                            label: 'CA Sales Rep',\n                            name: '3',\n                            expanded: true,\n                            items: [],\n                        },\n                        {\n                            label: 'OR Sales Rep',\n                            name: '4',\n                            expanded: true,\n                            items: [],\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'Eastern Sales Director',\n            name: '5',\n            expanded: false,\n            items: [\n                {\n                    label: 'Easter Sales Manager',\n                    name: '6',\n                    expanded: true,\n                    items: [\n                        {\n                            label: 'NY Sales Rep',\n                            name: '7',\n                            expanded: true,\n                            items: [],\n                        },\n                        {\n                            label: 'MA Sales Rep',\n                            name: '8',\n                            expanded: true,\n                            items: [],\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'International Sales Director',\n            name: '9',\n            expanded: true,\n            items: [\n                {\n                    label: 'Asia Sales Manager',\n                    name: '10',\n                    expanded: true,\n                    items: [\n                        {\n                            label: 'Sales Rep1',\n                            name: '11',\n                            expanded: true,\n                            items: [],\n                        },\n                        {\n                            label: 'Sales Rep2',\n                            name: '12',\n                            expanded: true,\n                            items: [],\n                        },\n                    ],\n                },\n                {\n                    label: 'Europe Sales Manager',\n                    name: '13',\n                    expanded: false,\n                    items: [\n                        {\n                            label: 'Sales Rep1',\n                            name: '14',\n                            expanded: true,\n                            items: [],\n                        },\n                        {\n                            label: 'Sales Rep2',\n                            name: '15',\n                            expanded: true,\n                            items: [],\n                        },\n                    ],\n                },\n            ],\n        },\n    ];\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Tree component with a few levels of depth. Click on the arrow icons to expand or collapse a branch.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-tree items={items} header=\"Roles\"></lightning-tree>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TreeDeeplyNested extends LightningElement {\n    items = [\n        {\n            label: 'CTO',\n            name: 'CTO',\n            expanded: true,\n            items: [\n                {\n                    label: 'Director',\n                    name: 'CTO-DIR',\n                    expanded: true,\n                    items: [\n                        {\n                            label: 'Manager 1',\n                            name: 'CTO-MGR-1',\n                            expanded: true,\n                            items: [\n                                {\n                                    label: 'Assistant Manager 1',\n                                    name: 'CTO-ASM-1',\n                                    expanded: true,\n                                    items: [\n                                        {\n                                            label: 'Supervisor 1',\n                                            name: 'CTO-MGR-1-ASM-1-SUP-1',\n                                            expanded: true,\n                                            items: [\n                                                {\n                                                    label: 'Staff 1',\n                                                    name: 'CTO-MGR-1-ASM-1-SUP-1-STA-1',\n                                                },\n                                                {\n                                                    label: 'Staff 2',\n                                                    name: 'CTO-MGR-1-ASM-1-SUP-1-STA-2',\n                                                },\n                                            ],\n                                        },\n                                    ],\n                                },\n                                {\n                                    label: 'Assistant Manager 2',\n                                    name: 'CTO-ASM-2',\n                                    expanded: true,\n                                    items: [\n                                        {\n                                            label: 'Supervisor 1',\n                                            name: 'CTO-MGR-1-ASM-2-SUP-1',\n                                            expanded: true,\n                                            items: [\n                                                {\n                                                    label: 'Staff 1',\n                                                    name: 'CTO-MGR-1-ASM-2-SUP-1-STA-1',\n                                                },\n                                                {\n                                                    label: 'Staff 2',\n                                                    name: 'CTO-MGR-1-ASM-2-SUP-1-STA-2',\n                                                },\n                                            ],\n                                        },\n                                    ],\n                                },\n                            ],\n                        },\n                        {\n                            label: 'Manager 2',\n                            name: 'CTO-MGR-2',\n                            expanded: true,\n                            items: [],\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'CFO',\n            name: 'CFO',\n            expanded: false,\n            items: [\n                {\n                    label: 'Director',\n                    name: 'CFO-DIR',\n                    expanded: false,\n                    items: [\n                        {\n                            label: 'Manager 1',\n                            name: 'CFO-MGR-1',\n                            expanded: false,\n                            items: [\n                                {\n                                    label: 'Assistant Manager 1',\n                                    name: 'CFO-ASM-1',\n                                },\n                            ],\n                        },\n                        {\n                            label: 'Manager 2',\n                            name: 'CFO-MGR-2',\n                        },\n                    ],\n                },\n            ],\n        },\n    ];\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Tree component with a many levels of depth. Click on the arrow icons to expand or collapse a branch.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-tree items={items} header=\"Roles\"></lightning-tree>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TreeLinks extends LightningElement {\n    items = [\n        {\n            label: 'Go to Salesforce.com',\n            name: '1',\n            href: 'https://salesforce.com',\n        },\n        {\n            label: 'Go to Google.com',\n            name: '2',\n            href: 'https://google.com',\n        },\n        {\n            label: 'Go to Developer.salesforce.com',\n            name: '3',\n            href: 'https://developer.salesforce.com',\n        },\n        {\n            label: 'Go to Trailhead.salesforce.com',\n            name: '3',\n            href: 'https://trailhead.salesforce.com',\n        },\n    ];\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Tree component with linked items. Click an item to navigate to its link.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-tree items={items} header=\"Links\"></lightning-tree>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TreeMetatext extends LightningElement {\n    items = [\n        {\n            label: 'Western Sales Director',\n            name: '1',\n            metatext: 'Jane Dough',\n            expanded: true,\n            items: [\n                {\n                    label: 'Western Sales Manager',\n                    name: '2',\n                    metatext: 'John Doe',\n                    expanded: true,\n                    items: [\n                        {\n                            label: 'CA Sales Rep',\n                            name: '3',\n                            metatext: 'Buck Rogers',\n                            expanded: true,\n                            items: [],\n                        },\n                        {\n                            label: 'OR Sales Rep',\n                            name: '4',\n                            metatext: 'Flash Gordon',\n                            expanded: true,\n                            items: [],\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'Eastern Sales Director',\n            name: '5',\n            metatext: 'Emma Frost',\n            expanded: false,\n            items: [\n                {\n                    label: 'Easter Sales Manager',\n                    name: '6',\n                    expanded: true,\n                    items: [\n                        {\n                            label: 'NY Sales Rep',\n                            name: '7',\n                            metatext: 'John Crichton',\n                            expanded: true,\n                            items: [],\n                        },\n                        {\n                            label: 'MA Sales Rep',\n                            name: '8',\n                            expanded: true,\n                            items: [],\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'International Sales Director',\n            name: '9',\n            metatext: 'Aeryn Sun',\n            expanded: true,\n            items: [\n                {\n                    label: 'Asia Sales Manager',\n                    name: '10',\n                    expanded: true,\n                    items: [\n                        {\n                            label: 'Sales Rep1',\n                            name: '11',\n                            expanded: true,\n                            items: [],\n                        },\n                        {\n                            label: 'Sales Rep2',\n                            name: '12',\n                            expanded: true,\n                            items: [],\n                        },\n                    ],\n                },\n                {\n                    label: 'Europe Sales Manager',\n                    name: '13',\n                    expanded: false,\n                    items: [\n                        {\n                            label: 'Sales Rep1',\n                            name: '14',\n                            expanded: true,\n                            items: [],\n                        },\n                        {\n                            label: 'Sales Rep2',\n                            name: '15',\n                            expanded: true,\n                            items: [],\n                        },\n                    ],\n                },\n            ],\n        },\n    ];\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Tree component with items that have metatext. Click on the arrow icons to expand or collapse a branch.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-tree items={items} header=\"Roles\"></lightning-tree>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class TreeOnselect extends LightningElement {\n    selectedItemValue;\n\n    handleOnselect(event) {\n        this.selectedItemValue = event.detail.name;\n    }\n\n    items = [\n        {\n            label: 'User',\n            name: 'user',\n            disabled: false,\n            expanded: true,\n            items: [\n                {\n                    label: 'Standard User',\n                    name: 'standard',\n                    disabled: false,\n                    expanded: true,\n                    items: [],\n                },\n                {\n                    label: 'Chatter User',\n                    name: 'chatter',\n                    disabled: false,\n                    expanded: true,\n                    items: [],\n                },\n            ],\n        },\n        {\n            label: 'Administrator',\n            name: 'admin',\n            disabled: false,\n            expanded: true,\n            items: [\n                {\n                    label: 'System Administrator',\n                    name: 'sysadmin',\n                    disabled: false,\n                    expanded: true,\n                    items: [],\n                },\n                {\n                    label: 'Chatter Administrator',\n                    name: 'chatter',\n                    disabled: false,\n                    expanded: true,\n                    items: [],\n                },\n            ],\n        },\n        {\n            label: 'Community User',\n            name: 'community',\n            disabled: false,\n            expanded: true,\n            items: [\n                {\n                    label: 'Community Login User',\n                    name: 'community_login',\n                    disabled: false,\n                    expanded: true,\n                    items: [],\n                },\n                {\n                    label: 'Community Plus Login User',\n                    name: 'community_plus',\n                    disabled: false,\n                    expanded: true,\n                    items: [],\n                },\n            ],\n        },\n    ];\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Tree component with an <code>onselect</code> handler. Click an item in the tree to make a selection.\n        </h2>\n\n        <!-- With onselect handler -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-tree items={items} header=\"Profiles\" onselect={handleOnselect}></lightning-tree>\n        </div>\n\n        <div class=\"slds-m-vertical_medium\">\n            <p>The selected item is: <span class=\"slds-text-heading_small\">{selectedItemValue}</span></p>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-tree-grid",
    "shortDescription": "This component is a table-like structure that displays hierarchical data with expandable rows, providing users with a visual representation of structured data such as account hierarchies or forecasting data.",
    "relatedComponents": {
      "lightning-datatable": "required",
      "lightning-button": "optional",
      "lightning-formatted-text": "optional",
      "lightning-formatted-number": "optional",
      "lightning-formatted-date-time": "optional",
      "lightning-formatted-url": "optional",
      "lightning-formatted-email": "optional",
      "lightning-formatted-location": "optional",
      "lightning-formatted-phone": "optional",
      "lightning-button-menu": "optional",
      "lightning-button-icon": "optional"
    },
    "publicApi": [
      {
        "name": "hide-checkbox-column",
        "typeSignature": "boolean",
        "examples": [
          "<lightning-tree-grid hide-checkbox-column=true>",
          "<lightning-tree-grid hide-checkbox-column={hideCheckbox}>"
        ]
      },
      {
        "name": "data",
        "typeSignature": "object[]",
        "examples": ["<lightning-tree-grid data={data}>"]
      },
      {
        "name": "columns",
        "typeSignature": "object[]",
        "examples": ["<lightning-tree-grid columns={columns}>"]
      },
      {
        "name": "key-field",
        "typeSignature": "string",
        "examples": ["<lightning-tree-grid key-field='name'>", "<lightning-tree-grid key-field={keyField}>"]
      },
      {
        "name": "expanded-rows",
        "typeSignature": "string[]",
        "examples": ["<lightning-tree-grid expanded-rows={currentExpanded}>"]
      },
      {
        "name": "ontoggle",
        "typeSignature": "(ev: CustomEvent & { detail: { name: string, isExpanded: boolean, hasChildrenContent: boolean, row: object } }) => void",
        "examples": ["<lightning-tree-grid ontoggle={handleRowToggle}>"]
      },
      {
        "name": "ontoggleall",
        "typeSignature": "(ev: CustomEvent & { detail: { isExpanded: boolean } }) => void",
        "examples": ["<lightning-tree-grid ontoggleall={handleToggleAll}>"]
      },
      {
        "name": "onrowselection",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-tree-grid onrowselection={handleRowSelection}>"]
      },
      {
        "name": "headeraction",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-tree-grid headeraction={handleHeaderAction}>"]
      },
      {
        "name": "rowaction",
        "typeSignature": "(ev: CustomEvent) => void",
        "examples": ["<lightning-tree-grid rowaction={handleRowAction}>"]
      },
      {
        "name": "aria-label",
        "typeSignature": "string",
        "examples": ["<lightning-tree-grid aria-label='Active Cases per Contact'>"]
      },
      {
        "name": "aria-labelledby",
        "typeSignature": "string",
        "examples": ["<lightning-tree-grid aria-labelledby='table-desc1 table-desc2'>"]
      },
      {
        "name": "min-column-width",
        "typeSignature": "string",
        "examples": ["<lightning-tree-grid min-column-width='80'>"]
      },
      {
        "name": "max-column-width",
        "typeSignature": "string",
        "examples": ["<lightning-tree-grid max-column-width='1000'>"]
      },
      {
        "name": "resize-column-disabled",
        "typeSignature": "boolean",
        "examples": ["<lightning-tree-grid resize-column-disabled=true>"]
      }
    ],
    "useCases": [
      "Imagine you're a manager at a large corporation and you need to keep track of the hierarchy of your employees. You could use the <lightning-tree-grid> component to create a table that displays each employee's name, their position, and who they report to. Each row in the table could be expanded to reveal the employees that report to the person in that row.",
      "Suppose you're a teacher with a large class of students. You could use the <lightning-tree-grid> component to create a table that displays each student's name, their grades, and their attendance record. Each row in the table could be expanded to reveal more detailed information about the student's performance in the class.",
      "Imagine you're a project manager and you need to keep track of the tasks in your project. You could use the <lightning-tree-grid> component to create a table that displays each task, its status, and its due date. Each row in the table could be expanded to reveal the subtasks associated with that task."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Tree Grid\n      description: A tree grid displays structured data in a table with expandable rows.\n    - name: expanded\n      label: Tree Grid With Expanded Rows\n      description: Expanded row names can be retrieved using JavaScript.\n    - name: lazyLoading\n      label: Asynchronous Loading of Nested Items\n      description: For improved performance, a tree grid can load content only when the rows expand.\n---\n\nA `lightning-tree-grid` component displays hierarchical data in a table. Its\nappearance resembles `lightning-datatable` since it implements `lightning-datatable` internally, with the exception that each row in the table\ncan be expanded to reveal a nested group of items. Rows that contain nested\ndata display a chevron icon to denote that they can be expanded or collapsed.\nThis visual representation is useful for displaying structured data such as\naccount hierarchy or forecasting data.\n\nEach column's formatting is determined\nby its data type. For example, a phone number is displayed as a hyperlink with\nthe `tel:` URL scheme by specifying the `phone` type. The default type is\n`text`.\n\nThis component implements the\n[tree grid](https://www.lightningdesignsystem.com/components/tree-grid/) blueprint in the Lightning Design System.\n\nInline editing and sorting of columns are not supported. Supported features\ninclude:\n\n-   Displaying and formatting of columns with appropriate data types\n-   Header-level actions\n-   Row-level actions\n-   Resizing of columns\n-   Selecting of rows\n-   Text wrapping and clipping\n\nThis component provides styling for up to 20 nested levels. For tree grids that require more than 20 nested levels,\nbuild your own component.\n\nA checkbox is displayed by default in the first column. Set the `hide-checkbox-column` attribute\nto `true` to remove the checkbox.\n\nInitialize your tree grid data using the `data`, `columns`, and `key-field` attributes\nand define their values in JavaScript. Note that `key-field` is required.\n\nThis example creates a tree grid with 5 columns, where the\nfirst column displays a checkbox for row selection. Selecting the checkbox\nenables you to select the entire row of data and triggers the `onrowselection`\nevent handler. The `expanded-rows` attribute is optional, and expands nested\nitems on a row when provided. Selecting a row using the checkbox does not select\nthe rows nested below it.\n\nThe example includes two buttons whose handlers call `lightning-tree-grid` methods\nto collapse all rows and to show which rows are expanded.\n\n```html\n<template>\n    <div class=\"slds-m-bottom_small\">\n        <lightning-button label=\"Collapse All\" onclick={clickToCollapseAll}>\n        </lightning-button>\n    </div>\n\n    <div class=\"slds-m-bottom_small\">\n        <lightning-button label=\"Get Expanded\" onclick={clickToGetExpanded}>\n        </lightning-button>\n        <p>Expanded currently : {currentExpandedStr}</p>\n    </div>\n\n    <lightning-tree-grid\n        data={data}\n        columns={columns}\n        key-field=\"name\"\n        expanded-rows={currentExpanded}\n    >\n    </lightning-tree-grid>\n</template>\n```\n\nThis example JavaScript creates selectable rows, with the row named 123555 having no nested\ndata and the row named 123556 having two levels of nested data.\nThe Account Owner column displays labels with an associated URL. Nested\nitems must be defined using the `_children` key.\n\n```javascript\nimport { LightningElement, track } from 'lwc';\n\nconst columns = [\n    {\n        type: 'text',\n        fieldName: 'accountName',\n        label: 'Account Name',\n    },\n    {\n        type: 'number',\n        fieldName: 'employees',\n        label: 'Employees',\n    },\n    {\n        type: 'phone',\n        fieldName: 'phone',\n        label: 'Phone Number',\n    },\n    {\n        type: 'url',\n        fieldName: 'accountOwner',\n        label: 'Account Owner',\n        typeAttributes: {\n            label: { fieldName: 'accountOwnerName' },\n        },\n    },\n];\n\nconst nestedData = [\n    {\n        name: '123555',\n        accountName: 'Rewis Inc',\n        employees: 3100,\n        phone: '837-555-1212',\n        accountOwner: 'http://example.com/jane-doe',\n        accountOwnerName: 'Jane Doe',\n    },\n    {\n        name: '123556',\n        accountName: 'Acme Corporation',\n        employees: 10000,\n        phone: '837-555-1212',\n        accountOwner: 'http://example.com/john-doe',\n        accountOwnerName: 'John Doe',\n        _children: [\n            {\n                name: '123556-A',\n                accountName: 'Acme Corporation (Bay Area)',\n                employees: 3000,\n                phone: '837-555-1212',\n                accountOwner: 'http://example.com/john-doe',\n                accountOwnerName: 'John Doe',\n                _children: [\n                    {\n                        name: '123556-A-A',\n                        accountName: 'Acme Corporation (Oakland)',\n                        employees: 745,\n                        phone: '837-555-1212',\n                        accountOwner: 'http://example.com/john-doe',\n                        accountOwnerName: 'John Doe',\n                    },\n                    {\n                        name: '123556-A-B',\n                        accountName: 'Acme Corporation (San Francisco)',\n                        employees: 578,\n                        phone: '837-555-1212',\n                        accountOwner: 'http://example.com/jane-doe',\n                        accountOwnerName: 'Jane Doe',\n                    },\n                ],\n            },\n        ],\n    },\n];\n\nexport default class DemoElement extends LightningElement {}\n```\n\nThis example JavaScript shows that row 123556 is expanded initially.\n\nThe `columns`, `data`, and `currentExpanded` properties are private\nreactive properties, which is indicated by the `@track` decorator in the JS file.\nIf the values of any of these properties change, the component's template rerenders.\n\nThe `clickToGetExpanded()` function calls the `getCurrentExpandedRows()` method to retrieve\nthe names of the rows that are currently expanded.\n\n```javascript\nconst initialExpandedRows = ['123556'];\n\nexport default class DemoElement extends LightningElement {\n    @track columns = columns;\n    @track data = nestedData;\n    @track currentExpanded = initialExpandedRows;\n\n    clickToGetExpanded(e) {\n        const grid = this.template.querySelector('lightning-tree-grid');\n        this.currentExpanded = grid.getCurrentExpandedRows();\n    }\n\n    get currentExpandedStr() {\n        return this.currentExpanded.toString();\n    }\n}\n```\n\nAdditionally, you can toggle nested items using `expandAll()` and\n`collapseAll()` methods supported by `lightning-tree-grid`.\n\nThese functions show how to use the `expandAll()` and `collapseAll()` methods.\nThe Collapse All button in the example calls the `clickToExpandAll()` function.\n\n```javascript\nclickToExpandAll(e) {\n        const grid =  this.template.querySelector('lightning-tree-grid');\n        grid.expandAll();\n    }\n\nclickToCollapseAll(e) {\n        const grid =  this.template.querySelector('lightning-tree-grid');\n        grid.collapseAll();\n    }\n```\n\n#### Working with Column Properties\n\nUse the following column properties to customize the behavior and visual\naspects of your columns.\n\n| Attribute      | Type    | Description                                                                                                                                                                        |\n| -------------- | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| actions        | object  | Appends a dropdown menu of actions to a column. You must pass in a list of label-name pairs.                                                                                       |\n| cellAttributes | object  | Provides additional customization, such as appending an icon to the output. For more information, see **Appending an Icon to Column Data**                                         |\n| fieldName      | string  | Required. The name that binds the columns attributes to the associated data. Each columns attribute must correspond to an item in the data array.                                  |\n| iconName       | string  | The Lightning Design System name of the icon. Names are written in the format standard:opportunity. The icon is appended to the left of the header label.                          |\n| initialWidth   | integer | The width of the column when it's initialized, which must be within the minColumnWidth and maxColumnWidth values, or within 50px and 1000px if they are not provided.              |\n| label          | string  | Required. The text label displayed in the column header.                                                                                                                           |\n| type           | string  | Required. The data type to be used for data formatting. For more information, see **Formatting with Data Types**.                                                                  |\n| typeAttributes | object  | Provides custom formatting with component attributes for the data type. For example, currencyCode for the currency type. For more information, see **Formatting with Data Types**. |\n| wrapText           | boolean | Specifies whether text in a column is wrapped when the table renders. Wrapped text vertically expands a row to reveal its full content. Displaying a number of lines and clipping the rest using `wrap-text-max-lines` isn't supported. For more information, see **Text Wrapping and Clipping**. |\n\n#### Formatting with Data Types\n\nThe tree grid formats the data cells of a column based on the type you\nspecify for the column. Each data type\nis associated with a base Lightning web component. For example, specifying the\n`text` type renders the associated data using a `lightning-formatted-text`\ncomponent. Some of these types allow you to pass in the attributes via the\n`typeAttributes` attribute to customize your output.\n\nThe properties you pass with `typeAttributes` must be specified using the format shown here,\nnot the format that's used for Lightning web component attributes in your HTML template. For example,\nalthough `lightning-formatted-number` recognizes a `currency-code` attribute, you must specify it as\n`currencyCode` with the `typeAttributes` property. For supported attribute\nvalues, refer to the component's documentation.\n\nThe first data column in the tree grid supports the following data types.\n\n| Type        | Description                                                                        | Supported Type Attributes                                                                                                                               |\n| ----------- | ---------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| button      | Displays a button using `lightning-button`                                         | disabled, iconName, iconPosition, label, name, title, variant                                                                                           |\n| button-icon | Displays a button icon using `lightning-button-icon`                               | alternativeText, class, disabled, iconClass, iconName, name, title, variant                                                                             |\n| currency    | Displays a currency using `lightning-formatted-number`                             | currencyCode, currencyDisplayAs, minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, minimumSignificantDigits, maximumSignificantDigits |\n| date        | Displays a date and time based on the locale using `lightning-formatted-date-time` | day, era, hour, hour12, minute, month, second, timeZone, timeZoneName, weekday, year                                                                    |\n| number      | Displays a number using `lightning-formatted-number`                               | minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, minimumSignificantDigits, maximumSignificantDigits                                  |\n| percent     | Displays a percentage using `lightning-formatted-number`                           | Same as number type                                                                                                                                     |\n| text        | Displays text using `lightning-formatted-text`                                     | N/A                                                                                                                                                     |\n| url         | Displays a URL using `lightning-formatted-url`                                     | label, target, tooltip                                                                                                                                  |\n\nAll other columns support the following data types.\n\n| Type        | Description                                                                                                                                                              | Supported Type Attributes                                                                                                                               |\n| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| action      | Displays a dropdown menu using `lightning-button-menu` with actions as menu items                                                                                        | rowActions (required), menuAlignment (defaults to right)                                                                                                |\n| boolean     | Displays the icon utility:check if the value is true, and a blank value otherwise.                                                                                       | N/A                                                                                                                                                     |\n| button      | Displays a button using `lightning-button`                                                                                                                               | disabled, iconName, iconPosition, label, name, title, variant                                                                                           |\n| button-icon | Displays a button icon using `lightning-button-icon`                                                                                                                     | alternativeText, class, disabled, iconClass, iconName, name, title, variant                                                                             |\n| currency    | Displays a currency using `lightning-formatted-number`                                                                                                                   | currencyCode, currencyDisplayAs, minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, minimumSignificantDigits, maximumSignificantDigits |\n| date        | Displays a date and time based on the locale using `lightning-formatted-date-time`                                                                                       | day, era, hour, hour12, minute, month, second, timeZone, timeZoneName, weekday, year                                                                    |\n| date-local  | Displays a simple date that is formatted based on the locale. The value passed is assumed to be in the browser local time zone and there is no time zone transformation. | day, month, year                                                                                                                                        |\n| email       | Displays an email address using `lightning-formatted-email`                                                                                                              | N/A                                                                                                                                                     |\n| location    | Displays a latitude and longitude of a location using `lightning-formatted-location`                                                                                     | latitude, longitude                                                                                                                                     |\n| number      | Displays a number using `lightning-formatted-number`                                                                                                                     | minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, minimumSignificantDigits, maximumSignificantDigits                                  |\n| percent     | Displays a percentage using `lightning-formatted-number`                                                                                                                 | Same as number type                                                                                                                                     |\n| phone       | Displays a phone number using `lightning-formatted-phone`                                                                                                                | N/A                                                                                                                                                     |\n| text        | Displays text using `lightning-formatted-text`                                                                                                                           | linkify                                                                                                                                                 |\n| url         | Displays a URL using `lightning-formatted-url`                                                                                                                           | label, target, tooltip                                                                                                                                  |\n\nTo customize the formatting based on the data type, pass in the attributes for\nthe corresponding base Lightning web component. For example, pass in a custom\n`currencyCode` value to override the default currency code.\n\n```javascript\nvar columns = [\n    {\n        label: 'Amount',\n        fieldName: 'amount',\n        type: 'currency',\n        typeAttributes: { currencyCode: 'EUR' },\n    },\n    // other column data\n];\n```\n\nWhen using currency or date and time types, the default user locale is used\nwhen no locale formatting is provided. For more information on attributes, see\nthe corresponding component documentation.\n\n#### Appending an Icon to Column Data\n\nTo append an icon to your data output, use `cellAttributes` and pass in these\nattributes.\n\n| Attribute           | Description                                                                                                             |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------- |\n| iconName            | Required. The Lightning Design System name of the icon, for example, utility:down.                                      |\n| iconLabel           | The label for the icon to be displayed on the right of the icon.                                                        |\n| iconPosition        | The position of the icon relative to the data. Valid options include `left` and `right`. This value defaults to `left`. |\n| iconAlternativeText | Descriptive text for the icon.                                                                                          |\n\nYou can add an icon with or without a label. This example defines two columns with icons.\nThe first column specifies the `utility:event` icon for all rows using the `iconName` cell attribute, and the icon displays to the left of the data without a label.\nThe second column uses computed values for the `iconName` and `iconLabel` and displays the icon to the right of the data.\n\n```javascript\nconst columns = [\n    // simple icon\n    {\n        label: 'Close date',\n        fieldName: 'closeDate',\n        type: 'date',\n        sortable: true,\n        cellAttributes: {\n            iconName: 'utility:event',\n            iconAlternativeText: 'Close Date',\n        },\n    },\n    // icon appended with a label\n    {\n        label: 'Confidence',\n        fieldName: 'confidence',\n        type: 'percent',\n        cellAttributes: {\n            iconName: { fieldName: 'confidenceDeltaIcon' },\n            iconLabel: { fieldName: 'confidenceDelta' },\n            iconPosition: 'right',\n            iconAlternativeText: 'Percentage Confidence',\n        },\n    },\n    // other column data\n];\n```\n\n#### Creating Header-Level and Row-Level Actions\n\nHeader-level actions refer to tasks you can perform on a column of data, while\nrow-level actions refer to tasks you can perform on a row of data, such as\nupdating or deleting the row. Creating actions in `lightning-tree-grid` is\nsimilar to creating actions in `lightning-datatable`. For more information,\nsee [lightning-datatable](bundle/lightning-datatable/documentation).\n\n#### Asynchronous Loading of Nested Items\n\nIf you have a large number of nested items that would delay the loading of\nyour data, consider loading your nested items asynchronously. The nested items\nare displayed only when you expand the particular row. To do so, initialize\nyour data without nested items, then add the nested items separately when the row\nis expanded.\n\nHandle asynchronous loading of nested items when a row is expanded using the\n`ontoggle` action. Find the name of the row being expanded and check if data\nfor the nested items is already available before retrieving and displaying the\nnested items.\n\n```javascript\n\nfunction getNewDataWithChildren (rowName, data, children) {\n\n    return data.map(function(row) {\n        let hasChildrenContent = false;\n        if (row.hasOwnProperty('_children') && Array.isArray(row._children) && row._children.length > 0) {\n            hasChildrenContent = true;\n        }\n\n        if (row.name === rowName) {\n            row._children = children;\n        } else if (hasChildrenContent) {\n            getNewDataWithChildren(rowName, row._children, children);\n        }\n\n        return row;\n    });\n}\n\nhandleRowToggle(event) {\n\n        const newChildren = [\n            {\n                \"name\": \"123555-A\",\n                \"accountName\": \"Rewis Inc (Oakland)\",\n                \"employees\": 345,\n                \"phone\": \"837-555-1212\",\n                \"accountOwner\": \"http://example.com/john-doe\",\n                \"accountOwnerName\": \"John Doe\"\n            },\n            {\n                \"name\": \"123555-B\",\n                \"accountName\": \"Rewis Inc (San Francisco)\",\n                \"employees\": 435,\n                \"phone\": \"837-555-1212\",\n                \"accountOwner\": \"http://example.com/jane-doe\",\n                \"accountOwnerName\": \"Jane Doe\"\n            }\n        ];\n\n        const rowName = event.detail.name;\n        const hasChildrenContent = event.detail.hasChildrenContent;\n\n        if (!hasChildrenContent) {\n            this.data = getNewDataWithChildren(rowName, this.data, newChildren);\n        }\n    }\n```\n\n#### Resizing the Tree Grid and its Columns\n\nThe width and height of the tree grid is determined by the container element.\nA scroller is appended to the tree grid body if there are more rows to display.\nFor example, you can restrict the height to 300px by applying CSS styling to\nthe container element.\n\n```html\n<div style=\"height: 300px;\">\n    <!-- lightning-tree-grid goes here -->\n</div>\n```\n\nBy default, columns are resizable. Users can click and drag the width to a\nminimum of 50px and a maximum of 1000px. Users can also resize the column width using the keyboard. For more information, see the **Accessibility** section.\n\n##### Working with Column Widths\n\nYou can customize the column widths in many ways. To specify your own width and disable resizing for a specific column, pass in `fixedWidth` to the column property. To specify an initial width and enable resizing for a specific column, pass in `initialWidth` to the column property.\n\n```javascript\nconst columns = [\n    {\n        label: 'Amount',\n        fieldName: 'amount',\n        type: 'currency',\n        initialWidth: 80,\n    },\n    // other column data\n];\n```\n\nColumns have a default minimum width of 50px and maximum width of 1000px. To change the minimum and maximum width of columns, use the\n`min-column-width` and `max-column-width` attributes. For example, if you want a user to be able to resize a column to a minimum of 80px, set `min-column-width=\"80\"`.\n\n```html\n<lightning-tree-grid\n    key-field=\"id\"\n    data={data}\n    columns={columns}\n    min-column-width=\"80\"\n></lightning-tree-grid>\n```\n\nTo prevent users from resizing columns, specify `resize-column-disabled` in your markup. The table can still adjust its column widths when you resize the browser window or the width of the parent container changes.\n\n`lightning-tree-grid` doesn't support the `resize` event. Managing the resizing of column widths using `column-widths-mode` is also not supported.\n\n#### Text Wrapping and Clipping\n\nYou can wrap or clip text within columns, which either expands the rows to\nreveal more content or truncates the content to a single line within the\ncolumn.\n\nTo toggle between the two views, select **Wrap text** or **Clip text** from\nthe dropdown menu on the column header.\n\nIf the number of characters is more than what the column width can display,\ncontent is clipped by default. Text wrapping is supported only for the\nfollowing data types.\n\n-   currency\n-   date\n-   email\n-   location\n-   number\n-   percent\n-   phone\n-   text\n-   url\n\nFor `text` data type, text clipping converts newline characters to spaces and condenses multiple spaces or tabs to one space. Text clipping suppresses line breaks, truncates content to fit a single line in the column, and adds a trailing ellipsis. Text wrapping breaks lines and hyphenates words as needed to fit the column.\n\nTo enable text wrapping by default, set `wrapText` to true on the `columns` property.\n\n```javascript\ncolumns = [\n    {\n        type: 'text',\n        fieldName: 'accountName',\n        label: 'Account Name',\n        initialWidth: 300,\n        wrapText: true,\n    },\n    //other column data\n];\n```\n\nSetting the maximum number of lines to display with text wrapping is currently not supported. Handling the header action event is currently not supported.\n\n#### Accessibility\n\n`lightning-tree-grid` renders a `<table>` element with a `treegrid` role and a polite live region that announces whether the table is in navigation mode or action mode. The label toggles the action mode when you press the Enter key or Space Bar on a cell. It toggles back to navigation mode when you press the Esc key to return focus to the cell. The component also announces the column width during a resize.\n\nEach row header renders with an `aria-label` attribute with the labels you provide for the column definition. By default, the row number column renders with `aria-label=\"Row Number\"` and cannot be changed. When row selection is enabled, each row renders with `aria-selected` set to true or false depending on whether the row is selected. Each cell renders with a `gridcell` role.\n\nUse the following `aria` attributes on `lightning-tree-grid` to provide a caption or description on your table for assistive technologies. These attributes are rendered on the `<table>` element. We recommend that you use one or the other, but not both.\n\n| Attribute       | Type              | Description                                                                                                                        |\n| --------------- | ----------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| aria-label      | string            | Provides an assistive label to identify a table from other tables on a page.                                                       |\n| aria-labelledby | ID reference list | Specifies the ID or list of IDs of the element or elements that contain visible descriptive text to caption or describe the table. |\n\nYou can add a `displayValue` on the dropdown arrow for a row. This `displayValue` replaces the default row `title` for the dropdown arrow's label.\n\n```javascript\n    {\n        name: '125313-7j',\n        accountName: 'Dach-Welch',\n        displayValue: 'Display Value One',\n        phone: '995-523-7024',\n    }\n```\n\n\n##### Provide an Accessible Label for the Table\n\nUse the `aria-label` attribute to provide a more descriptive label for the table for assistive technology. The `aria-label` attribute and its value are passed down to the rendered `table` element.\nOn pages with multiple tables, `aria-label` helps users identify which table\nthey're accessing.\n\nSet a descriptive text value to the `aria-label` attribute in `lightning-tree-grid` in your template.\n\n```html\n<lightning-tree-grid aria-label=\"Active Cases per Contact\">\n</lightning-tree-grid>\n```\n\nChange the ARIA label dynamically using the `ariaLabel` property.\n\n```js\nconst treegrid = this.template.querySelector('lightning-tree-grid');\ntreegrid.ariaLabel = 'Escalated Cases per Contact';\n```\n\nIf you set `aria-label=\"\"` in the HTML or `.ariaLabel = \"\"` in JavaScript, the table's `aria-label` attribute is hidden, not rendered with an empty string. An empty label string can confuse screen readers.\n\n##### Provide an Accessible Caption for the Table\n\nIf you have descriptions on an element or on multiple elements for the table, set the `aria-labelledby` value with the ID or list of IDs of the elements.\n\n```html\n<h2 id=\"table-desc1\">Account Details by Year</h2>\n<h3 id=\"table-desc2\">EMEA Region</h3>\n<lightning-tree-grid\n    aria-labelledby=\"table-desc1 table-desc2\"\n    key-field=\"id\"\n    data={data}\n    columns={columns}\n>\n</lightning-tree-grid>\n```\n\n`lightning-tree-grid` generates a unique string for the element and `aria-labelledby` value to prevent any naming conflicts with other `<table>` elements on the page. Always verify that your rendered table correctly matches the IDs of the descriptive text in the DOM with a screen reader like JAWS or VoiceOver.\n\n##### Toggle Between Navigation and Action Modes\n\nThis component supports navigation mode and action mode using the keyboard. To\nenter navigation mode, tab into the table, which triggers focus on the first\ndata cell in the table body. Use the arrow keys to move around the table.\n\nTo enter action mode, press the Enter key or Space Bar. Columns can be resized\nin action mode. To resize a column, navigate to the header by pressing the Up\nArrow key. Then, press the Tab key to activate the column divider, and resize\nthe column using the Left Arrow and Right Arrow key. To finish resizing the\ncolumn and return to navigation mode, press the Tab key.\n\nWhen focus is on a cell that contains a link, pressing enter to navigate to\nthe link is currently not supported. This limitation applies to cells that\ncontain data of type url, phone, and email.\n\n#### Custom Events\n\n**`toggle`**\n\nThe event fired when a row is expanded or collapsed.\n\nThe `toggle` event returns the following parameters.\n\n| Parameter          | Type    | Description                                                                                                                                                                                              |\n| ------------------ | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| name               | string  | The unique ID for the row that's toggled.                                                                                                                                                                |\n| isExpanded         | boolean | Specifies whether the row is expanded or not.                                                                                                                                                            |\n| hasChildrenContent | boolean | Specifies whether any data is available for the nested items of this row. When value is false, `_children` is null, undefined, or an empty array. When value is true, `_children` has a non-empty array. |\n| row                | object  | The toggled row data.                                                                                                                                                                                    |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                               |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                            |\n\n**`toggleall`**\n\nThe event fired when all rows are expanded or collapsed.\n\nThe `toggleall` event returns the following parameter.\n\n| Parameter  | Type    | Description                                   |\n| ---------- | ------- | --------------------------------------------- |\n| isExpanded | boolean | Specifies whether the row is expanded or not. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                               |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                            |\n\n**`rowselection`**\n\nThe event fired when a row is selected.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                               |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                            |\n\n**`headeraction`**\n\nThe event fired when a header-level action is run.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                               |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                            |\n\n**`rowaction`**\n\nThe event fired when a row-level action is run.\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                               |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                            |\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\nimport {\n    EXAMPLES_COLUMNS_DEFINITION_BASIC,\n    EXAMPLES_DATA_BASIC,\n} from './sampleData';\n\nexport default class TreeGridBasic extends LightningElement {\n    // definition of columns for the tree grid\n    gridColumns = EXAMPLES_COLUMNS_DEFINITION_BASIC;\n\n    // data provided to the tree grid\n    gridData = EXAMPLES_DATA_BASIC;\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Tree Grid component with data from a static source. Click on the arrow icons to expand or collapse a branch.\n        </h2>\n\n        <!-- Simple -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-tree-grid\n                columns={gridColumns}\n                data={gridData}\n                key-field=\"name\"\n            ></lightning-tree-grid>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement, track } from 'lwc';\nimport {\n    EXAMPLES_COLUMNS_DEFINITION_BASIC,\n    EXAMPLES_DATA_BASIC,\n} from './sampleData';\n\nexport default class TreeGridExpanded extends LightningElement {\n    @track currentExpandedRows;\n\n    // definition of columns for the tree grid\n    gridColumns = EXAMPLES_COLUMNS_DEFINITION_BASIC;\n\n    // data provided to the tree grid\n    gridData = EXAMPLES_DATA_BASIC;\n\n    // list of names for rows that are expanded\n    gridExpandedRows = [\n        '123556',\n        '123556-A',\n        '123556-B',\n        '123556-B-B',\n        '123557',\n    ];\n\n    // retrieve the list of rows currently marked as expanded\n    getCurrentExpandedRows() {\n        const treegrid = this.template.querySelector('.lgc-example-treegrid');\n        this.currentExpandedRows = treegrid.getCurrentExpandedRows().toString();\n    }\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium\">\n            Tree Grid component with some initially expanded rows.\n        </h2>\n        <h3 class=\"slds-text-heading_small slds-m-bottom_large\">\n            Click the \"Get current expanded rows\" button to view the key field values of the rows marked as expanded. Expand and collapse some rows then click the button again to see an updated result.\n        </h3>\n\n        <div class=\"slds-m-vertical_large\">\n            <p class=\"slds-m-bottom_xx-small\">The rows currently marked as expanded are: <span class=\"slds-text-heading_small\">{currentExpandedRows}</span></p>\n            <lightning-button label=\"Get Current Expanded Rows\" onclick={getCurrentExpandedRows}></lightning-button>\n        </div>\n\n        <!-- Expanded rows -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-tree-grid\n                class=\"lgc-example-treegrid\"\n                columns={gridColumns}\n                data={gridData}\n                expanded-rows={gridExpandedRows}\n                key-field=\"name\"\n            ></lightning-tree-grid>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\nimport {\n    EXAMPLES_COLUMNS_DEFINITION_BASIC,\n    EXAMPLES_DATA_LAZY_LOADING,\n} from './sampleData';\n\nexport default class TreeGridLazyLoading extends LightningElement {\n    gridLoadingState = false;\n\n    // definition of columns for the tree grid\n    gridColumns = EXAMPLES_COLUMNS_DEFINITION_BASIC;\n\n    // initial data provided to the tree grid\n    gridData = EXAMPLES_DATA_LAZY_LOADING;\n\n    // list of names for rows that are expanded\n    gridExpandedRows = ['123556', '123556-B', '123557'];\n\n    // when a row is toggled we retrieve values and dynamically load children if needed\n    handleRowToggle(event) {\n        // retrieve the unique identifier of the row being expanded\n        const rowName = event.detail.name;\n\n        // does the component have children content for this row already?\n        const hasChildrenContent = event.detail.hasChildrenContent;\n\n        /*\n         ** additional event.detail values available:\n         **\n         ** => the new expanded state for this row\n         **    const isExpanded = event.detail.isExpanded;\n         **\n         ** => the complete row data\n         **    const row = event.detail.row;\n         */\n\n        // if hasChildrenContent is false then we need to react and add children\n        if (hasChildrenContent === false) {\n            this.gridLoadingState = true;\n\n            // call a method to retrieve the updated data tree that includes the missing children\n            this.retrieveUpdatedData(rowName).then((newData) => {\n                this.gridData = newData;\n                this.gridLoadingState = false;\n            });\n        }\n    }\n\n    // mimic a delay in retrieving the data (2 second delay)\n    retrieveUpdatedData(rowName) {\n        return new Promise((resolve) => {\n            // mimic server delay\n            // eslint-disable-next-line @lwc/lwc/no-async-operation\n            window.setTimeout(() => {\n                // add children to data\n                const updatedData = this.addChildrenToRow(\n                    this.gridData,\n                    rowName,\n                    this.childrenData[rowName]\n                );\n\n                resolve(updatedData);\n            }, 2000);\n        });\n    }\n\n    // add the new child rows at the desired location\n    addChildrenToRow(data, rowName, children) {\n        // step through the array using recursion until we find the correct row to update\n        const newData = data.map((row) => {\n            // does this row have a properly formatted _children key with content?\n            let hasChildrenContent = false;\n            if (\n                // eslint-disable-next-line no-prototype-builtins\n                row.hasOwnProperty('_children') &&\n                Array.isArray(row._children) &&\n                row._children.length > 0\n            ) {\n                hasChildrenContent = true;\n            }\n\n            // if this is the row that was toggled then add the child content\n            if (row.name === rowName) {\n                row._children = children;\n                // otherwise keep searching for the correct row by recursively searching the tree\n            } else if (hasChildrenContent) {\n                this.addChildrenToRow(row._children, rowName, children);\n            }\n\n            return row;\n        });\n\n        return newData;\n    }\n\n    // child data to be added later\n    childrenData = {\n        '123556-A': [\n            {\n                name: '123556-A-A',\n                accountName: 'Acme Corporation (Oakland)',\n                employees: 745,\n                phone: '837-555-1212',\n                accountOwner: 'http://example.com/john-doe',\n                accountOwnerName: 'John Doe',\n                billingCity: 'New York, NY',\n            },\n            {\n                name: '123556-A-B',\n                accountName: 'Acme Corporation (San Francisco)',\n                employees: 578,\n                phone: '837-555-1212',\n                accountOwner: 'http://example.com/jane-doe',\n                accountOwnerName: 'Jane Doe',\n                billingCity: 'Los Angeles, CA',\n            },\n        ],\n\n        '123556-B-B': [\n            {\n                name: '123556-B-B-A',\n                accountName: 'Allied Technologies',\n                employees: 390,\n                phone: '837-555-1212',\n                accountOwner: 'http://example.com/jane-doe',\n                accountOwnerName: 'Jane Doe',\n                billingCity: 'Los Angeles, CA',\n                _children: [\n                    {\n                        name: '123556-B-B-A-A',\n                        accountName: 'Allied Technologies (UV)',\n                        employees: 270,\n                        phone: '837-555-1212',\n                        accountOwner: 'http://example.com/john-doe',\n                        accountOwnerName: 'John Doe',\n                        billingCity: 'San Francisco, CA',\n                    },\n                ],\n            },\n        ],\n    };\n}\n",
        "html": "<template>\n    <div class=\"slds-m-top_medium slds-m-bottom_x-large\">\n        <h2 class=\"slds-text-heading_medium slds-m-bottom_medium\">\n            Tree Grid component with some rows that will dynamically load children only when initially expanded.\n        </h2>\n\n        <!-- Expanded rows -->\n        <div class=\"slds-p-around_medium lgc-bg\">\n            <lightning-tree-grid\n                class=\"lgc-example-treegrid\"\n                columns={gridColumns}\n                data={gridData}\n                expanded-rows={gridExpandedRows}\n                key-field=\"name\"\n                is-loading={gridLoadingState}\n                ontoggle={handleRowToggle}\n            ></lightning-tree-grid>\n        </div>\n    </div>\n</template>\n",
        "css": ".lgc-bg {\n    background-color: rgb(242 242 242);\n}\n\n.lgc-bg-inverse {\n    background-color: rgb(22 50 92);\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-vertical-navigation",
    "shortDescription": "This component is a vertical navigation menu that provides a list of links, with support for overflow sections, icons, badges, and links, offering a user-friendly navigation experience with highlighted selections and compact spacing options.",
    "relatedComponents": {
      "lightning-vertical-navigation-section": "required",
      "lightning-vertical-navigation-item": "required",
      "lightning-vertical-navigation-overflow": "optional",
      "lightning-vertical-navigation-item-badge": "optional",
      "lightning-vertical-navigation-item-icon": "optional"
    },
    "publicApi": [
      {
        "name": "selected-item",
        "typeSignature": "string",
        "examples": [
          "<lightning-vertical-navigation selected-item=\"recent\">",
          "<lightning-vertical-navigation selected-item={selectedItemName}>"
        ]
      },
      {
        "name": "onselect",
        "typeSignature": "(ev: CustomEvent & { detail: { name: string } }) => void",
        "examples": ["<lightning-vertical-navigation onselect={handleSelect}>"]
      },
      {
        "name": "onbeforeselect",
        "typeSignature": "(ev: CustomEvent & { detail: { name: string } }) => void",
        "examples": ["<lightning-vertical-navigation onbeforeselect={handleBeforeSelect}>"]
      }
    ],
    "useCases": [
      "Imagine you're using a website for a large online store. On the left side of the screen, there's a vertical menu that lists different categories of products, like 'Electronics', 'Books', 'Clothing', etc. This is a perfect use case for the <lightning-vertical-navigation> component, as it allows users to easily navigate between different sections of the website.",
      "On a news website, there's a vertical menu on the side of the page that lists different news categories, like 'World News', 'Sports', 'Entertainment', etc. Some of these categories have a small icon next to them, like a football for 'Sports'. This is another scenario where the <lightning-vertical-navigation> component would be useful, as it supports adding icons to the navigation items.",
      "Consider a music streaming website. On the left side of the screen, there's a vertical menu that lists different sections of the website, like 'Home', 'Browse', 'Your Library', etc. Some of these sections have a small badge next to them, indicating new content. This is a scenario where the <lightning-vertical-navigation> component would be used, as it supports adding badges to the navigation items.",
      "On a large corporate website, there's a vertical menu on the side of the page that lists different sections of the website, like 'About Us', 'Our Services', 'Contact Us', etc. Some of these sections have a link that takes you to a different website. This is another scenario where the <lightning-vertical-navigation> component would be useful, as it supports adding links to the navigation items.",
      "Imagine a website with a lot of content and a vertical menu on the side of the page that lists different sections. However, there's not enough space to display all the sections at once, so some of them are hidden under an 'More' section that expands when clicked. This is a perfect use case for the <lightning-vertical-navigation> component, as it supports an overflow section for when space is limited.",
      "On a website for a university, there's a vertical menu on the side of the page that lists different sections, like 'Admissions', 'Academics', 'Campus Life', etc. The menu is on a shaded background, and the selected section is highlighted in white. This is another scenario where the <lightning-vertical-navigation> component would be useful, as it supports highlighting the selected item on a shaded background."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Vertical Navigation\n      description: A vertical navigation includes at least one navigation section and item.\n    - name: selected\n      label: Vertical Navigation with Default Selection\n      description: A selected item is highlighted in blue.\n    - name: icon\n      label: Vertical Navigation Items with Icons\n      description: Navigation items can include an icon on the left of the label.\n    - name: badge\n      label: Vertical Navigation Items with Badges\n      description: Navigation items can include a badge on the right of the label.\n    - name: href\n      label: Vertical Navigation Items with Links\n      description: Navigation items can include links to external websites.\n    - name: compact\n      label: Vertical Navigation with Compact Spacing\n      description: A vertical navigation can be displayed with reduced whitespace.\n    - name: shaded\n      label: Vertical Navigation On Shaded Background\n      description: Navigation items on a shaded background are highlighted in white when selected.\n    - name: overflow\n      label: Vertical Navigation with Overflow Section\n      description: An overflow section is helpful when you have limited space to display all navigation items.\n    - name: iteration\n      label: Vertical Navigation with Iteration\n      description: Navigation items can be created from a data source using iteration.\n    - name: validation\n      label: Vertical Navigation with Asynchronous Validation\n      description: Run an action using the onbeforeselect event handler before a navigation item is selected.\n    - name: advanced\n      label: Vertical Navigation in Action\n      description: A vertical navigation provides a rich feature set, including icons and badges for navigation items, and an overflow section to group additional items when space is limited.\n---\n\nA `lightning-vertical-navigation` component represents a list of links that's only one level deep, with support for overflow sections that collapse and expand.\nThe overflow section must be created using `lightning-vertical-navigation-overflow` and does not adjust automatically based on the view port.\n\nThis component inherits styling from [vertical navigation](https://www.lightningdesignsystem.com/components/vertical-navigation/) in the Lightning Design System.\n\n`lightning-vertical-navigation` is used together with these sub-components.\n\n-   `lightning-vertical-navigation-section`\n-   `lightning-vertical-navigation-item`\n-   `lightning-vertical-navigation-overflow`\n-   `lightning-vertical-navigation-item-badge`\n-   `lightning-vertical-navigation-item-icon`\n\nThis example creates a basic vertical navigation menu.\n\n```html\n<lightning-vertical-navigation>\n    <lightning-vertical-navigation-section label=\"Reports\">\n        <lightning-vertical-navigation-item\n            label=\"Recent\"\n            name=\"recent\"\n        ></lightning-vertical-navigation-item>\n        <lightning-vertical-navigation-item\n            label=\"Created by Me\"\n            name=\"created\"\n        ></lightning-vertical-navigation-item>\n        <lightning-vertical-navigation-item\n            label=\"Private Reports\"\n            name=\"private\"\n        ></lightning-vertical-navigation-item>\n        <lightning-vertical-navigation-item\n            label=\"Public Reports\"\n            name=\"public\"\n        ></lightning-vertical-navigation-item>\n        <lightning-vertical-navigation-item\n            label=\"All Reports\"\n            name=\"all\"\n        ></lightning-vertical-navigation-item>\n    </lightning-vertical-navigation-section>\n</lightning-vertical-navigation>\n```\n\nTo define an active navigation item, use `selected-item=\"itemName\"` on `lightning-vertical-navigation`, where `itemName` matches the `name` of the `lightning-vertical-navigation-item` component to be highlighted.\n\nThis example creates a navigation menu with a highlighted item and an overflow section.\n\n```html\n<lightning-vertical-navigation selected-item=\"recent\">\n    <lightning-vertical-navigation-section label=\"Reports\">\n        <lightning-vertical-navigation-item\n            label=\"Recent\"\n            name=\"recent\"\n        ></lightning-vertical-navigation-item>\n        <lightning-vertical-navigation-item\n            label=\"All Reports\"\n            name=\"all\"\n        ></lightning-vertical-navigation-item>\n    </lightning-vertical-navigation-section>\n    <lightning-vertical-navigation-overflow>\n        <lightning-vertical-navigation-item\n            label=\"Regional Sales East\"\n            name=\"east\"\n        ></lightning-vertical-navigation-item>\n        <lightning-vertical-navigation-item\n            label=\"Regional Sales West\"\n            name=\"west\"\n        ></lightning-vertical-navigation-item>\n    </lightning-vertical-navigation-overflow>\n</lightning-vertical-navigation>\n```\n\n#### Selecting a Navigation Item\n\nTo determine which navigation item is selected, use the `event.detail` property on the `onselect` event handler.\n\n```html\n<lightning-vertical-navigation onselect={handleSelect} selected-item=\"recent\">\n    <lightning-vertical-navigation-section label=\"Reports\">\n        <lightning-vertical-navigation-item\n            label=\"Recent\"\n            name=\"recent\"\n        ></lightning-vertical-navigation-item>\n        <lightning-vertical-navigation-item\n            label=\"Created by Me\"\n            name=\"created\"\n        ></lightning-vertical-navigation-item>\n        <lightning-vertical-navigation-item\n            label=\"All Reports\"\n            name=\"all\"\n        ></lightning-vertical-navigation-item>\n    </lightning-vertical-navigation-section>\n</lightning-vertical-navigation>\n```\n\nThe `onselect` event handler returns the name of the navigation item that's selected.\n\n```javascript\nimport { LightningElement } from 'lwc';\n\nexport default class VerticalNavigationExample extends LightningElement {\n    handleSelect(event) {\n        const selectedName = event.detail.name;\n    }\n}\n```\n\n#### Usage Considerations\n\nIf you want a navigation menu that's more than one level deep, consider using `lightning-tree` instead.\n\nThe navigation menu takes up the full width of the screen. You can specify a width by wrapping in a div and specifying width using CSS.\n\n```html\n<div style=\"width: 320px;\">\n    <lightning-vertical-navigation> ... </lightning-vertical-navigation>\n</div>\n```\n\n#### Accessibility\n\nUse the Tab and Shift+Tab keys to navigate up and down the menu. To expand or collapse an overflow section, press the Enter key or Space Bar.\n\n#### Custom Events\n\n**`beforeselect`**\n\nThe event fired before a navigation item is selected.\n\nThe `beforeselect` event returns the following parameter.\n\n| Parameter | Type   | Description                                                                                                      |\n| --------- | ------ | ---------------------------------------------------------------------------------------------------------------- |\n| name      | string | The name of the item to be selected, which matches the `name` value on the `vertical-navigation-item` component. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                    |\n| ---------- | ----- | ------------------------------------------------------------------------------ |\n| bubbles    | false | This event does not bubble.                                                    |\n| cancelable | true  | This event can be canceled. You can call `preventDefault()` on this event.     |\n| composed   | false | This event does not propagate outside the template in which it was dispatched. |\n\n**`select`**\n\nThe event fired when a navigation item is selected.\n\nThe `select` event returns the following parameter.\n\n| Parameter | Type   | Description                                                                                                |\n| --------- | ------ | ---------------------------------------------------------------------------------------------------------- |\n| name      | string | The name of the selected item, which matches the `name` value on the `vertical-navigation-item` component. |\n\nThe event properties are as follows.\n\n| Property   | Value | Description                                                                                               |\n| ---------- | ----- | --------------------------------------------------------------------------------------------------------- |\n| bubbles    | false | This event does not bubble.                                                                               |\n| cancelable | false | This event has no default behavior that can be canceled. You can't call `preventDefault()` on this event. |\n| composed   | false | This event does not propagate outside the template in which it was dispatched.                            |\n",
    "examples": [
      {
        "js": "import { LightningElement, track } from 'lwc';\n\nexport default class LightningExampleVerticalNavAdvanced extends LightningElement {\n    @track selectedItem = 'reports_recent';\n    @track currentContent = 'reports_recent';\n    @track updatedCount = 12;\n\n    handleSelect(event) {\n        const selected = event.detail.name;\n\n        if (selected === 'reports_updated') {\n            this.updatedCount = 0;\n        }\n\n        this.currentContent = selected;\n    }\n}\n",
        "html": "<template>\n    <div style=\"min-width: 225px; border-right: 1px solid #e7e7e7;\">\n        <lightning-layout>\n            <lightning-layout-item>\n                <lightning-vertical-navigation selected-item={selectedItem} onselect={handleSelect} class=\"navigation\">\n                    <lightning-vertical-navigation-section label=\"Reports\">\n                        <lightning-vertical-navigation-item label=\"Recently Viewed\" name=\"reports_recent\"></lightning-vertical-navigation-item>\n                        <lightning-vertical-navigation-item label=\"Private Reports\" name=\"reports_private\"></lightning-vertical-navigation-item>\n                        <lightning-vertical-navigation-item label=\"Public Reports\" name=\"reports_public\"></lightning-vertical-navigation-item>\n                        <lightning-vertical-navigation-item label=\"All Reports\" name=\"reports_all\"></lightning-vertical-navigation-item>\n                        <lightning-vertical-navigation-item-badge label=\"Recently Updated\" name=\"reports_updated\" badge-count={updatedCount}></lightning-vertical-navigation-item-badge>\n                    </lightning-vertical-navigation-section>\n                    <lightning-vertical-navigation-section label=\"Folders\">\n                        <lightning-vertical-navigation-item-icon label=\"Created by Me\" name=\"folders_created\" icon-name=\"utility:open_folder\"></lightning-vertical-navigation-item-icon>\n                        <lightning-vertical-navigation-item-icon label=\"Shared with Me\" name=\"folders_shared\" icon-name=\"utility:open_folder\"></lightning-vertical-navigation-item-icon>\n                        <lightning-vertical-navigation-item label=\"All Folders\" name=\"folders_all\"></lightning-vertical-navigation-item>\n                    </lightning-vertical-navigation-section>\n                    <lightning-vertical-navigation-overflow>\n                        <lightning-vertical-navigation-item label=\"Extra Report 1\" name=\"reports_extra1\"></lightning-vertical-navigation-item>\n                        <lightning-vertical-navigation-item label=\"Extra Report 2\" name=\"reports_extra2\"></lightning-vertical-navigation-item>\n                        <lightning-vertical-navigation-item label=\"Extra Report 3\" name=\"reports_extra3\"></lightning-vertical-navigation-item>\n                        <lightning-vertical-navigation-item label=\"Extra Report 4\" name=\"reports_extra4\"></lightning-vertical-navigation-item>\n                        <lightning-vertical-navigation-item label=\"Extra Report 5\" name=\"reports_extra5\"></lightning-vertical-navigation-item>\n                    </lightning-vertical-navigation-overflow>\n                    <lightning-vertical-navigation-overflow>\n                        <lightning-vertical-navigation-item label=\"Extra Folder 1\" name=\"folders_extra1\"></lightning-vertical-navigation-item>\n                        <lightning-vertical-navigation-item label=\"Extra Folder 2\" name=\"folders_extra2\"></lightning-vertical-navigation-item>\n                        <lightning-vertical-navigation-item label=\"Extra Folder 3\" name=\"folders_extra3\"></lightning-vertical-navigation-item>\n                    </lightning-vertical-navigation-overflow>\n                </lightning-vertical-navigation>\n            </lightning-layout-item>\n            <lightning-layout-item padding=\"around-medium\">\n                <p>You Are Viewing: {currentContent} </p>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleVerticalNavBadge extends LightningElement {}\n",
        "html": "<template>\n    <div style=\"width: 320px;\">\n        <lightning-vertical-navigation selected-item=\"recent\">\n            <lightning-vertical-navigation-section label=\"Reports\">\n                <lightning-vertical-navigation-item-badge label=\"Recent\" name=\"recent\" badge-count=\"3\"></lightning-vertical-navigation-item-badge>\n                <lightning-vertical-navigation-item label=\"Created by Me\" name=\"usercreated\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Private Reports\" name=\"private\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Public Reports\" name=\"public\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"All Reports\" name=\"all\"></lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-section>\n        </lightning-vertical-navigation>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleVerticalNavBasic extends LightningElement {}\n",
        "html": "<template>\n    <div style=\"width: 320px;\">\n        <lightning-vertical-navigation>\n            <lightning-vertical-navigation-section label=\"Reports\">\n                <lightning-vertical-navigation-item label=\"Recent\" name=\"recent\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Created by Me\" name=\"created\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Private Reports\" name=\"private\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Public Reports\" name=\"public\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"All Reports\" name=\"all\"></lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-section>\n        </lightning-vertical-navigation>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleVerticalNavCompact extends LightningElement {}\n",
        "html": "<template>\n    <div style=\"width: 320px;\">\n        <lightning-vertical-navigation selected-item=\"recent\" compact>\n            <lightning-vertical-navigation-section label=\"Reports\">\n                <lightning-vertical-navigation-item label=\"Recent\" name=\"recent\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Created by Me\" name=\"created\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Private Reports\" name=\"private\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Public Reports\" name=\"public\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"All Reports\" name=\"all\"></lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-section>\n        </lightning-vertical-navigation>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleVerticalNavHref extends LightningElement {}\n",
        "html": "<template>\n    <div style=\"width: 320px;\">\n        <lightning-vertical-navigation>\n            <lightning-vertical-navigation-section label=\"Navigation\">\n                <lightning-vertical-navigation-item label=\"Home\" name=\"home\" href=\"/\"></lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-section>\n            <lightning-vertical-navigation-section label=\"Resources\">\n                <lightning-vertical-navigation-item\n                    label=\"Salesforce\"\n                    name=\"salesforce\"\n                    href=\"https://www.salesforce.com/\">\n                </lightning-vertical-navigation-item>\n\n                <lightning-vertical-navigation-item\n                    label=\"Salesforce Developers\"\n                    name=\"developers\"\n                    href=\"https://developer.salesforce.com/\">\n                </lightning-vertical-navigation-item>\n\n                <lightning-vertical-navigation-item\n                    label=\"Trailhead\"\n                    name=\"trailhead\"\n                    href=\"https://trailhead.salesforce.com\">\n                </lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-section>\n        </lightning-vertical-navigation>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleVerticalNavIcon extends LightningElement {}\n",
        "html": "<template>\n    <div style=\"width: 320px;\">\n        <lightning-vertical-navigation selected-item=\"reports_recent\">\n            <lightning-vertical-navigation-section label=\"Reports\">\n                <lightning-vertical-navigation-item-icon\n                    label=\"Recent\"\n                    name=\"reports_recent\"\n                    icon-name=\"utility:clock\">\n                </lightning-vertical-navigation-item-icon>\n\n                <lightning-vertical-navigation-item-icon\n                    label=\"Created by Me\"\n                    name=\"reports_usercreated\"\n                    icon-name=\"utility:user\">\n                </lightning-vertical-navigation-item-icon>\n\n                <lightning-vertical-navigation-item-icon\n                    label=\"Private Reports\"\n                    name=\"reports_private\"\n                    icon-name=\"utility:lock\">\n                </lightning-vertical-navigation-item-icon>\n\n                <lightning-vertical-navigation-item-icon\n                    label=\"Public Reports\"\n                    name=\"reports_public\"\n                    icon-name=\"utility:groups\">\n                </lightning-vertical-navigation-item-icon>\n\n                <lightning-vertical-navigation-item\n                    label=\"All Reports\"\n                    name=\"reports_all\">\n                </lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-section>\n\n            <lightning-vertical-navigation-section label=\"Folders\">\n                <lightning-vertical-navigation-item-icon\n                    label=\"Created by Me\"\n                    name=\"folders_usercreated\"\n                    icon-name=\"utility:open_folder\">\n                </lightning-vertical-navigation-item-icon>\n\n                <lightning-vertical-navigation-item-icon\n                    label=\"Shared with Me\"\n                    name=\"folders_shared\"\n                    icon-name=\"utility:open_folder\">\n                </lightning-vertical-navigation-item-icon>\n            </lightning-vertical-navigation-section>\n        </lightning-vertical-navigation>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nconst sections = [\n    {\n        label: 'Reports',\n        items: [\n            {\n                label: 'Recent',\n                name: 'default_recent',\n                icon: 'utility:clock',\n            },\n            {\n                label: 'Created by Me',\n                name: 'default_created',\n            },\n            {\n                label: 'Public Reports',\n                name: 'default_public',\n            },\n            {\n                label: 'My P1 Bugs',\n                name: 'custom_p1bugs',\n            },\n        ],\n    },\n\n    {\n        label: 'Dashboards',\n        items: [\n            {\n                label: 'Favorites',\n                name: 'default_favorites',\n                icon: 'utility:favorite',\n            },\n            {\n                label: 'Most Popular',\n                name: 'custom_mostpopular',\n            },\n            {\n                label: 'Summer Release Metrics',\n                name: 'custom_newreleaseadoption',\n            },\n        ],\n    },\n];\n\nexport default class LightningExampleVerticalNavIteration extends LightningElement {\n    initiallySelected = 'default_recent';\n    navigationData = sections;\n}\n",
        "html": "<template>\n    <div style=\"width: 320px;\">\n        <lightning-vertical-navigation selected-item={initiallySelected}>\n            <template for:each={navigationData} for:item=\"section\">\n                <lightning-vertical-navigation-section key={section.label} label={section.label}>\n                    <template for:each={section.items} for:item=\"item\">\n                        <template if:true={item.icon}>\n                            <lightning-vertical-navigation-item-icon key={item.name} label={item.label} name={item.name} icon-name={item.icon}></lightning-vertical-navigation-item-icon>\n                        </template>\n                        <template if:false={item.icon}>\n                            <lightning-vertical-navigation-item key={item.name} label={item.label} name={item.name}></lightning-vertical-navigation-item>\n                        </template>\n                    </template>\n\n                </lightning-vertical-navigation-section>\n            </template>\n        </lightning-vertical-navigation>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleVerticalNavOverflow extends LightningElement {}\n",
        "html": "<template>\n    <div style=\"width: 320px;\">\n        <lightning-vertical-navigation selected-item=\"recent\">\n            <lightning-vertical-navigation-section label=\"Reports\">\n                <lightning-vertical-navigation-item label=\"Recent\" name=\"recent\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Private Reports\" name=\"private\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Public Reports\" name=\"public\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"All Reports\" name=\"all\"></lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-section>\n            <lightning-vertical-navigation-overflow>\n                <lightning-vertical-navigation-item label=\"Regional Sales NW\" name=\"1859008\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Regional Sales SW\" name=\"1919113\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Regional Sales NE\" name=\"1919115\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Regional Sales SE\" name=\"1919112\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Regional Sales - Outdated\" name=\"1213411\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Account Planning Fall Review\" name=\"1213114\"></lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-overflow>\n        </lightning-vertical-navigation>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleVerticalNavSelected extends LightningElement {}\n",
        "html": "<template>\n    <div style=\"width: 320px;\">\n        <lightning-vertical-navigation selected-item=\"recent\">\n            <lightning-vertical-navigation-section label=\"Reports\">\n                <lightning-vertical-navigation-item label=\"Recent\" name=\"recent\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Created by Me\" name=\"created\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Private Reports\" name=\"private\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Public Reports\" name=\"public\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"All Reports\" name=\"all\"></lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-section>\n        </lightning-vertical-navigation>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleVerticalNavShaded extends LightningElement {}\n",
        "html": "<template>\n    <div style=\"width: 320px;\">\n        <lightning-vertical-navigation selected-item=\"recent\" shaded>\n            <lightning-vertical-navigation-section label=\"Reports\">\n                <lightning-vertical-navigation-item label=\"Recent\" name=\"recent\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Created by Me\" name=\"created\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Private Reports\" name=\"private\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Public Reports\" name=\"public\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"All Reports\" name=\"all\"></lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-section>\n        </lightning-vertical-navigation>\n    </div>\n</template>\n"
      },
      {
        "js": "import { LightningElement, track } from 'lwc';\n\nexport default class LightningExampleVerticalNavValidation extends LightningElement {\n    @track asyncValidation;\n    @track hasBeenEdited = false;\n    @track selectedItem = 'report_1';\n\n    handleClick() {\n        this.hasBeenEdited = true;\n    }\n\n    handleBeforeSelect(event) {\n        if (this.hasBeenEdited) {\n            // Prevent the onselect handler from running\n            event.preventDefault();\n\n            this.asyncValidation = true;\n\n            // Simulate an async operation\n            // eslint-disable-next-line @lwc/lwc/no-async-operation\n            setTimeout(() => {\n                this.hasBeenEdited = false;\n                this.selectedItem = event.detail.name;\n                this.asyncValidation = false;\n            }, 2000);\n        }\n    }\n}\n",
        "html": "<template>\n    <div style=\"width: 320px;\">\n        <lightning-layout>\n            <lightning-layout-item>\n                <lightning-vertical-navigation onbeforeselect={handleBeforeSelect} selected-item={selectedItem}>\n                    <lightning-vertical-navigation-item label=\"Report 1\" name=\"report_1\"></lightning-vertical-navigation-item>\n                    <lightning-vertical-navigation-item label=\"Report 2\" name=\"report_2\"></lightning-vertical-navigation-item>\n                    <lightning-vertical-navigation-item label=\"Report 3\" name=\"report_3\"></lightning-vertical-navigation-item>\n                    <lightning-vertical-navigation-item label=\"Report 4\" name=\"report_4\"></lightning-vertical-navigation-item>\n                    <lightning-vertical-navigation-item label=\"Report 5\" name=\"report_5\"></lightning-vertical-navigation-item>\n                </lightning-vertical-navigation>\n            </lightning-layout-item>\n            <lightning-layout-item class=\"layoutContent\" padding=\"around-medium\">\n                <template if:true={asyncValidation}>\n                    <lightning-spinner alternative-text=\"Validating asynchronously\"></lightning-spinner>\n                </template>\n                <template if:false={asyncValidation}>\n                    <lightning-button label=\"Click to require validation\" onclick={handleClick}></lightning-button>\n                    <p>You Are Viewing: {selectedItem}</p>\n                    <p>Validate on navigate: {hasBeenEdited}</p>\n                </template>\n            </lightning-layout-item>\n        </lightning-layout>\n    </div>\n</template>\n",
        "css": ".layoutContent {\n    position: relative;\n    width: 50%;\n}\n"
      }
    ]
  },
  {
    "tagName": "lightning-vertical-navigation-item",
    "shortDescription": "This component serves as a navigation item within a vertical navigation system, providing a structured user experience for navigating through different sections.",
    "relatedComponents": {
      "lightning-vertical-navigation": "required"
    },
    "publicApi": [],
    "useCases": [
      "Imagine you're browsing an online store that sells a variety of products, like electronics, clothing, and home goods. The website could use the <lightning-vertical-navigation-item> component to create a vertical menu on the side of the page, allowing you to easily navigate between different product categories.",
      "On a news website, the <lightning-vertical-navigation-item> component could be used to create a sidebar menu with different sections like 'World News', 'Sports', 'Entertainment', and 'Weather'. This would allow you to quickly jump to the news category you're interested in.",
      "Consider a university website with a lot of information about different departments, courses, and events. The <lightning-vertical-navigation-item> component could be used to create a vertical navigation menu, making it easier for students and staff to find the information they need."
    ],
    "docs": "---\nexamples:\n    - name: basic\n      label: Basic Vertical Navigation\n      description: A vertical navigation includes at least one navigation section and item.\n---\n\nA `lightning-vertical-navigation-item` component is a navigation item within `lightning-vertical-navigation`.\n\nFor more information, see the\n[lightning-vertical-navigation](bundle/lightning-vertical-navigation/documentation) documentation.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleVerticalNavigationBasic extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-vertical_medium\">\n        <h1 class=\"slds-text-heading_small\">Basic Vertical Navigation</h1>\n        <p class=\"slds-text-body_regular\">A basic Vertical Navigation with one section.</p>\n    </div>\n    \n    <div style=\"width: 320px;\">\n        <lightning-vertical-navigation>\n            <lightning-vertical-navigation-section label=\"Reports\">\n                <lightning-vertical-navigation-item label=\"Recent\" name=\"recent\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Created by Me\" name=\"created\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Private Reports\" name=\"private\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Public Reports\" name=\"public\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"All Reports\" name=\"all\"></lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-section>\n        </lightning-vertical-navigation>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-vertical-navigation-item-badge",
    "shortDescription": "This component is a navigation item that enhances user experience by displaying a numerical badge to the right of the item label, indicating additional information or notifications related to that item.",
    "relatedComponents": {
      "lightning-vertical-navigation": "required",
      "lightning-vertical-navigation-section": "required",
      "lightning-vertical-navigation-item": "optional"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": [
          "<lightning-vertical-navigation-item-badge label='Recent'>",
          "<lightning-vertical-navigation-item-badge label={itemLabel}>"
        ]
      },
      {
        "name": "name",
        "typeSignature": "string",
        "examples": [
          "<lightning-vertical-navigation-item-badge name='recent'>",
          "<lightning-vertical-navigation-item-badge name={itemName}>"
        ]
      },
      {
        "name": "badge-count",
        "typeSignature": "number",
        "examples": [
          "<lightning-vertical-navigation-item-badge badge-count='3'>",
          "<lightning-vertical-navigation-item-badge badge-count={badgeCount}>"
        ]
      }
    ],
    "useCases": [
      "In an email application, the <lightning-vertical-navigation-item-badge> component could be used in the sidebar to show the number of unread emails in different folders. For example, next to the 'Inbox' label, a badge could display the number of unread emails, providing a quick visual cue for the user to know if they have any new messages without having to click on the folder.",
      "In a project management tool, the <lightning-vertical-navigation-item-badge> component could be used to display the number of tasks assigned to a user that are due soon. This would be displayed next to the 'Tasks' label in the navigation menu, allowing the user to quickly see how many tasks they need to complete in the near future.",
      "In an e-commerce website, the <lightning-vertical-navigation-item-badge> component could be used in the user's account section to show the number of items in their shopping cart. This would be displayed next to the 'Cart' label, providing a quick and easy way for the user to see how many items they have added to their cart.",
      "In a social media application, the <lightning-vertical-navigation-item-badge> component could be used to display the number of new notifications a user has. This would be displayed next to the 'Notifications' label in the navigation menu, allowing the user to see at a glance if they have any new notifications to check.",
      "In a customer relationship management (CRM) system, the <lightning-vertical-navigation-item-badge> component could be used to display the number of new leads assigned to a salesperson. This would be displayed next to the 'Leads' label in the navigation menu, providing a quick way for the salesperson to see how many new leads they have to follow up on."
    ],
    "docs": "---\nexamples:\n    - name: badges\n      label: Vertical Navigation with Badges\n      description: Navigation items can include a badge on the right of the label.\n---\n\nA `lightning-vertical-navigation-item-badge` component is a navigation item that displays a numerical badge to the right of the item label.\n\nHere's an example that creates a navigation menu with an item containing a badge.\n\n```html\n<template>\n    <lightning-vertical-navigation selected-item=\"recent\">\n        <lightning-vertical-navigation-section label=\"Reports\">\n            <lightning-vertical-navigation-item-badge\n                label=\"Recent\"\n                name=\"recent\"\n                badge-count=\"3\"\n            >\n            </lightning-vertical-navigation-item-badge>\n            <lightning-vertical-navigation-item\n                label=\"Created by Me\"\n                name=\"usercreated\"\n            >\n            </lightning-vertical-navigation-item>\n            <lightning-vertical-navigation-item\n                label=\"Private Reports\"\n                name=\"private\"\n            >\n            </lightning-vertical-navigation-item>\n            <lightning-vertical-navigation-item\n                label=\"Public Reports\"\n                name=\"public\"\n            >\n            </lightning-vertical-navigation-item>\n            <lightning-vertical-navigation-item label=\"All Reports\" name=\"all\">\n            </lightning-vertical-navigation-item>\n        </lightning-vertical-navigation-section>\n    </lightning-vertical-navigation>\n</template>\n```\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleVerticalNavigationItemBadges extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-vertical_medium\">\n        <h1 class=\"slds-text-heading_small\">Items With Badges</h1>\n        <p class=\"slds-text-body_regular\">A Vertical Navigation with item badges. Badges contain small amounts of information, such as the number of unread messages.</p>\n    </div>\n    \n    <div style=\"width: 320px;\">\n        <lightning-vertical-navigation selected-item=\"recent\">\n            <lightning-vertical-navigation-section label=\"Reports\">\n                <lightning-vertical-navigation-item-badge label=\"Recent\" name=\"recent\" badge-count=\"3\"></lightning-vertical-navigation-item-badge>\n                <lightning-vertical-navigation-item label=\"Created by Me\" name=\"usercreated\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Private Reports\" name=\"private\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"Public Reports\" name=\"public\"></lightning-vertical-navigation-item>\n                <lightning-vertical-navigation-item label=\"All Reports\" name=\"all\"></lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-section>\n        </lightning-vertical-navigation>\n    </div>\n</template>\n"
      }
    ]
  },
  {
    "tagName": "lightning-vertical-navigation-item-icon",
    "shortDescription": "This component is a navigational item that enhances user experience by displaying an icon to the left of the item label, supporting icons from the Lightning Design System.",
    "relatedComponents": {
      "lightning-vertical-navigation": "required",
      "lightning-vertical-navigation-section": "required",
      "lightning-vertical-navigation-item": "optional"
    },
    "publicApi": [
      {
        "name": "label",
        "typeSignature": "string",
        "examples": [
          "<lightning-vertical-navigation-item-icon label='Recent'>",
          "<lightning-vertical-navigation-item-icon label={itemLabel}>"
        ]
      },
      {
        "name": "name",
        "typeSignature": "string",
        "examples": [
          "<lightning-vertical-navigation-item-icon name='recent'>",
          "<lightning-vertical-navigation-item-icon name={itemName}>"
        ]
      },
      {
        "name": "icon-name",
        "typeSignature": "string",
        "examples": [
          "<lightning-vertical-navigation-item-icon icon-name='utility:clock'>",
          "<lightning-vertical-navigation-item-icon icon-name={iconName}>"
        ]
      }
    ],
    "useCases": [
      "In a business application, the <lightning-vertical-navigation-item-icon> component could be used to create a sidebar menu for navigating different sections of the application. For example, there could be a 'Reports' section with different types of reports like 'Recent', 'Created by Me', and 'All Reports'. Each of these report types would have an icon next to it, making it easier for users to quickly identify and navigate to the report they need.",
      "In a music streaming application, the <lightning-vertical-navigation-item-icon> component could be used to create a navigation menu for different categories of music. For example, there could be categories like 'Pop', 'Rock', 'Classical', etc. Each category would have an icon next to it, providing a visual cue to users about the type of music in that category.",
      "In an online shopping platform, the <lightning-vertical-navigation-item-icon> component could be used to create a navigation menu for different product categories. For example, there could be categories like 'Electronics', 'Fashion', 'Home & Kitchen', etc. Each category would have an icon next to it, helping users to easily identify and navigate to the category they are interested in."
    ],
    "docs": "---\nexamples:\n    - name: icons\n      label: Vertical Navigation with Icons\n      description: Navigation items can include an icon on the left of the label.\n---\n\nA `lightning-vertical-navigation-item-icon` component is a navigation item that displays an icon to the left of the item label.\n\nHere's an example that creates a navigation menu with icons on the navigation items.\n\n```html\n<template>\n    <lightning-vertical-navigation>\n        <lightning-vertical-navigation-section label=\"Reports\">\n            <lightning-vertical-navigation-item-icon\n                label=\"Recent\"\n                name=\"recent\"\n                icon-name=\"utility:clock\"\n            >\n            </lightning-vertical-navigation-item-icon>\n            <lightning-vertical-navigation-item-icon\n                label=\"Created by Me\"\n                name=\"created\"\n                icon-name=\"utility:user\"\n            >\n            </lightning-vertical-navigation-item-icon>\n            <lightning-vertical-navigation-item label=\"All Reports\" name=\"all\">\n            </lightning-vertical-navigation-item>\n        </lightning-vertical-navigation-section>\n    </lightning-vertical-navigation>\n</template>\n```\n\nIcons from the Lightning Design System are supported. Visit [https://lightningdesignsystem.com/icons](https://lightningdesignsystem.com/icons) to view available icons.\n\nWhen applying Lightning Design System classes or icons, check that they are available in the\nLightning Design System release tied to your org. The latest Lightning Design System\nresources become available only when the new release is available in your org.\n",
    "examples": [
      {
        "js": "import { LightningElement } from 'lwc';\n\nexport default class LightningExampleVerticalNavigationItemIcons extends LightningElement {}\n",
        "html": "<template>\n    <div class=\"slds-m-vertical_medium\">\n        <h1 class=\"slds-text-heading_small\">Items With Icons</h1>\n        <p class=\"slds-text-body_regular\">A Vertical navigation with item icons.</p>\n    </div>\n    \n    <div style=\"width: 320px;\">\n        <lightning-vertical-navigation selected-item=\"reports_recent\">\n            <lightning-vertical-navigation-section label=\"Reports\">\n                <lightning-vertical-navigation-item-icon\n                    label=\"Recent\"\n                    name=\"reports_recent\"\n                    icon-name=\"utility:clock\">\n                </lightning-vertical-navigation-item-icon>\n                <lightning-vertical-navigation-item-icon\n                    label=\"Created by Me\"\n                    name=\"reports_usercreated\"\n                    icon-name=\"utility:user\">\n                </lightning-vertical-navigation-item-icon>\n                <lightning-vertical-navigation-item-icon\n                    label=\"Private Reports\"\n                    name=\"reports_private\"\n                    icon-name=\"utility:lock\">\n                </lightning-vertical-navigation-item-icon>\n                <lightning-vertical-navigation-item-icon\n                    label=\"Public Reports\"\n                    name=\"reports_public\"\n                    icon-name=\"utility:groups\">\n                </lightning-vertical-navigation-item-icon>\n                <lightning-vertical-navigation-item\n                    label=\"All Reports\"\n                    name=\"reports_all\">\n                </lightning-vertical-navigation-item>\n            </lightning-vertical-navigation-section>\n            <lightning-vertical-navigation-section label=\"Folders\">\n                <lightning-vertical-navigation-item-icon\n                    label=\"Created by Me\"\n                    name=\"folders_usercreated\"\n                    icon-name=\"utility:open_folder\">\n                </lightning-vertical-navigation-item-icon>\n                <lightning-vertical-navigation-item-icon\n                    label=\"Shared with Me\"\n                    name=\"folders_shared\"\n                    icon-name=\"utility:open_folder\">\n                </lightning-vertical-navigation-item-icon>\n            </lightning-vertical-navigation-section>\n        </lightning-vertical-navigation>\n    </div>\n</template>\n"
      }
    ]
  }
]
